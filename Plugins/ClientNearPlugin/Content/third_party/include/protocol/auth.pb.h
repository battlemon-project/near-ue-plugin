// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace game {
namespace battlemon {
namespace auth {
class SendCodeRequest;
struct SendCodeRequestDefaultTypeInternal;
extern SendCodeRequestDefaultTypeInternal _SendCodeRequest_default_instance_;
class SendCodeResponse;
struct SendCodeResponseDefaultTypeInternal;
extern SendCodeResponseDefaultTypeInternal _SendCodeResponse_default_instance_;
class VerifyCodeRequest;
struct VerifyCodeRequestDefaultTypeInternal;
extern VerifyCodeRequestDefaultTypeInternal _VerifyCodeRequest_default_instance_;
class VerifyCodeResponse;
struct VerifyCodeResponseDefaultTypeInternal;
extern VerifyCodeResponseDefaultTypeInternal _VerifyCodeResponse_default_instance_;
class WalletAddressRequest;
struct WalletAddressRequestDefaultTypeInternal;
extern WalletAddressRequestDefaultTypeInternal _WalletAddressRequest_default_instance_;
class WalletAddressResponse;
struct WalletAddressResponseDefaultTypeInternal;
extern WalletAddressResponseDefaultTypeInternal _WalletAddressResponse_default_instance_;
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::auth::SendCodeRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::SendCodeRequest>(Arena*);
template<> ::game::battlemon::auth::SendCodeResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::SendCodeResponse>(Arena*);
template<> ::game::battlemon::auth::VerifyCodeRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::VerifyCodeRequest>(Arena*);
template<> ::game::battlemon::auth::VerifyCodeResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::VerifyCodeResponse>(Arena*);
template<> ::game::battlemon::auth::WalletAddressRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::WalletAddressRequest>(Arena*);
template<> ::game::battlemon::auth::WalletAddressResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::WalletAddressResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace auth {

// ===================================================================

class SendCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.SendCodeRequest) */ {
 public:
  inline SendCodeRequest() : SendCodeRequest(nullptr) {}
  ~SendCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR SendCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCodeRequest(const SendCodeRequest& from);
  SendCodeRequest(SendCodeRequest&& from) noexcept
    : SendCodeRequest() {
    *this = ::std::move(from);
  }

  inline SendCodeRequest& operator=(const SendCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCodeRequest& operator=(SendCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCodeRequest* internal_default_instance() {
    return reinterpret_cast<const SendCodeRequest*>(
               &_SendCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SendCodeRequest& a, SendCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendCodeRequest& from) {
    SendCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.SendCodeRequest";
  }
  protected:
  explicit SendCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.SendCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class SendCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.SendCodeResponse) */ {
 public:
  inline SendCodeResponse() : SendCodeResponse(nullptr) {}
  ~SendCodeResponse() override;
  explicit PROTOBUF_CONSTEXPR SendCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCodeResponse(const SendCodeResponse& from);
  SendCodeResponse(SendCodeResponse&& from) noexcept
    : SendCodeResponse() {
    *this = ::std::move(from);
  }

  inline SendCodeResponse& operator=(const SendCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCodeResponse& operator=(SendCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCodeResponse* internal_default_instance() {
    return reinterpret_cast<const SendCodeResponse*>(
               &_SendCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SendCodeResponse& a, SendCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SendCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SendCodeResponse& from) {
    SendCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.SendCodeResponse";
  }
  protected:
  explicit SendCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.SendCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class VerifyCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.VerifyCodeRequest) */ {
 public:
  inline VerifyCodeRequest() : VerifyCodeRequest(nullptr) {}
  ~VerifyCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR VerifyCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyCodeRequest(const VerifyCodeRequest& from);
  VerifyCodeRequest(VerifyCodeRequest&& from) noexcept
    : VerifyCodeRequest() {
    *this = ::std::move(from);
  }

  inline VerifyCodeRequest& operator=(const VerifyCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyCodeRequest& operator=(VerifyCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyCodeRequest* internal_default_instance() {
    return reinterpret_cast<const VerifyCodeRequest*>(
               &_VerifyCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VerifyCodeRequest& a, VerifyCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyCodeRequest& from) {
    VerifyCodeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.VerifyCodeRequest";
  }
  protected:
  explicit VerifyCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicKeyFieldNumber = 1,
    kSignFieldNumber = 2,
  };
  // string public_key = 1;
  void clear_public_key();
  const std::string& public_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* public_key);
  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(const std::string& value);
  std::string* _internal_mutable_public_key();
  public:

  // string sign = 2;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.VerifyCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class VerifyCodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.VerifyCodeResponse) */ {
 public:
  inline VerifyCodeResponse() : VerifyCodeResponse(nullptr) {}
  ~VerifyCodeResponse() override;
  explicit PROTOBUF_CONSTEXPR VerifyCodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VerifyCodeResponse(const VerifyCodeResponse& from);
  VerifyCodeResponse(VerifyCodeResponse&& from) noexcept
    : VerifyCodeResponse() {
    *this = ::std::move(from);
  }

  inline VerifyCodeResponse& operator=(const VerifyCodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline VerifyCodeResponse& operator=(VerifyCodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VerifyCodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const VerifyCodeResponse* internal_default_instance() {
    return reinterpret_cast<const VerifyCodeResponse*>(
               &_VerifyCodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(VerifyCodeResponse& a, VerifyCodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(VerifyCodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VerifyCodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VerifyCodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VerifyCodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const VerifyCodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const VerifyCodeResponse& from) {
    VerifyCodeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerifyCodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.VerifyCodeResponse";
  }
  protected:
  explicit VerifyCodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearAccountIdFieldNumber = 1,
  };
  // string near_account_id = 1;
  void clear_near_account_id();
  const std::string& near_account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_account_id();
  PROTOBUF_NODISCARD std::string* release_near_account_id();
  void set_allocated_near_account_id(std::string* near_account_id);
  private:
  const std::string& _internal_near_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_account_id(const std::string& value);
  std::string* _internal_mutable_near_account_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.VerifyCodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_account_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class WalletAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.WalletAddressRequest) */ {
 public:
  inline WalletAddressRequest() : WalletAddressRequest(nullptr) {}
  ~WalletAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR WalletAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletAddressRequest(const WalletAddressRequest& from);
  WalletAddressRequest(WalletAddressRequest&& from) noexcept
    : WalletAddressRequest() {
    *this = ::std::move(from);
  }

  inline WalletAddressRequest& operator=(const WalletAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletAddressRequest& operator=(WalletAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletAddressRequest* internal_default_instance() {
    return reinterpret_cast<const WalletAddressRequest*>(
               &_WalletAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WalletAddressRequest& a, WalletAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletAddressRequest& from) {
    WalletAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.WalletAddressRequest";
  }
  protected:
  explicit WalletAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.WalletAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class WalletAddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.WalletAddressResponse) */ {
 public:
  inline WalletAddressResponse() : WalletAddressResponse(nullptr) {}
  ~WalletAddressResponse() override;
  explicit PROTOBUF_CONSTEXPR WalletAddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletAddressResponse(const WalletAddressResponse& from);
  WalletAddressResponse(WalletAddressResponse&& from) noexcept
    : WalletAddressResponse() {
    *this = ::std::move(from);
  }

  inline WalletAddressResponse& operator=(const WalletAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletAddressResponse& operator=(WalletAddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletAddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletAddressResponse* internal_default_instance() {
    return reinterpret_cast<const WalletAddressResponse*>(
               &_WalletAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WalletAddressResponse& a, WalletAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletAddressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletAddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletAddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletAddressResponse& from) {
    WalletAddressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletAddressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.WalletAddressResponse";
  }
  protected:
  explicit WalletAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletAddressFieldNumber = 1,
  };
  // string wallet_address = 1;
  void clear_wallet_address();
  const std::string& wallet_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_address();
  PROTOBUF_NODISCARD std::string* release_wallet_address();
  void set_allocated_wallet_address(std::string* wallet_address);
  private:
  const std::string& _internal_wallet_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_address(const std::string& value);
  std::string* _internal_mutable_wallet_address();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.WalletAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendCodeRequest

// string public_key = 1;
inline void SendCodeRequest::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& SendCodeRequest::public_key() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.SendCodeRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendCodeRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.SendCodeRequest.public_key)
}
inline std::string* SendCodeRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.SendCodeRequest.public_key)
  return _s;
}
inline const std::string& SendCodeRequest::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void SendCodeRequest::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* SendCodeRequest::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* SendCodeRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.SendCodeRequest.public_key)
  return _impl_.public_key_.Release();
}
inline void SendCodeRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.SendCodeRequest.public_key)
}

// -------------------------------------------------------------------

// SendCodeResponse

// string code = 1;
inline void SendCodeResponse::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& SendCodeResponse::code() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.SendCodeResponse.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendCodeResponse::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.SendCodeResponse.code)
}
inline std::string* SendCodeResponse::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.SendCodeResponse.code)
  return _s;
}
inline const std::string& SendCodeResponse::_internal_code() const {
  return _impl_.code_.Get();
}
inline void SendCodeResponse::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* SendCodeResponse::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* SendCodeResponse::release_code() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.SendCodeResponse.code)
  return _impl_.code_.Release();
}
inline void SendCodeResponse::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.SendCodeResponse.code)
}

// -------------------------------------------------------------------

// VerifyCodeRequest

// string public_key = 1;
inline void VerifyCodeRequest::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
}
inline const std::string& VerifyCodeRequest::public_key() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.VerifyCodeRequest.public_key)
  return _internal_public_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyCodeRequest::set_public_key(ArgT0&& arg0, ArgT... args) {
 
 _impl_.public_key_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.VerifyCodeRequest.public_key)
}
inline std::string* VerifyCodeRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.VerifyCodeRequest.public_key)
  return _s;
}
inline const std::string& VerifyCodeRequest::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void VerifyCodeRequest::_internal_set_public_key(const std::string& value) {
  
  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyCodeRequest::_internal_mutable_public_key() {
  
  return _impl_.public_key_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyCodeRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.VerifyCodeRequest.public_key)
  return _impl_.public_key_.Release();
}
inline void VerifyCodeRequest::set_allocated_public_key(std::string* public_key) {
  if (public_key != nullptr) {
    
  } else {
    
  }
  _impl_.public_key_.SetAllocated(public_key, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.public_key_.IsDefault()) {
    _impl_.public_key_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.VerifyCodeRequest.public_key)
}

// string sign = 2;
inline void VerifyCodeRequest::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& VerifyCodeRequest::sign() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.VerifyCodeRequest.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyCodeRequest::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.VerifyCodeRequest.sign)
}
inline std::string* VerifyCodeRequest::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.VerifyCodeRequest.sign)
  return _s;
}
inline const std::string& VerifyCodeRequest::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void VerifyCodeRequest::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyCodeRequest::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyCodeRequest::release_sign() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.VerifyCodeRequest.sign)
  return _impl_.sign_.Release();
}
inline void VerifyCodeRequest::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.VerifyCodeRequest.sign)
}

// -------------------------------------------------------------------

// VerifyCodeResponse

// string near_account_id = 1;
inline void VerifyCodeResponse::clear_near_account_id() {
  _impl_.near_account_id_.ClearToEmpty();
}
inline const std::string& VerifyCodeResponse::near_account_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.VerifyCodeResponse.near_account_id)
  return _internal_near_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VerifyCodeResponse::set_near_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.VerifyCodeResponse.near_account_id)
}
inline std::string* VerifyCodeResponse::mutable_near_account_id() {
  std::string* _s = _internal_mutable_near_account_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.VerifyCodeResponse.near_account_id)
  return _s;
}
inline const std::string& VerifyCodeResponse::_internal_near_account_id() const {
  return _impl_.near_account_id_.Get();
}
inline void VerifyCodeResponse::_internal_set_near_account_id(const std::string& value) {
  
  _impl_.near_account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* VerifyCodeResponse::_internal_mutable_near_account_id() {
  
  return _impl_.near_account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* VerifyCodeResponse::release_near_account_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.VerifyCodeResponse.near_account_id)
  return _impl_.near_account_id_.Release();
}
inline void VerifyCodeResponse::set_allocated_near_account_id(std::string* near_account_id) {
  if (near_account_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_account_id_.SetAllocated(near_account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_account_id_.IsDefault()) {
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.VerifyCodeResponse.near_account_id)
}

// -------------------------------------------------------------------

// WalletAddressRequest

// string client_id = 1;
inline void WalletAddressRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& WalletAddressRequest::client_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.WalletAddressRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletAddressRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.WalletAddressRequest.client_id)
}
inline std::string* WalletAddressRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.WalletAddressRequest.client_id)
  return _s;
}
inline const std::string& WalletAddressRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void WalletAddressRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletAddressRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletAddressRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.WalletAddressRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void WalletAddressRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.WalletAddressRequest.client_id)
}

// -------------------------------------------------------------------

// WalletAddressResponse

// string wallet_address = 1;
inline void WalletAddressResponse::clear_wallet_address() {
  _impl_.wallet_address_.ClearToEmpty();
}
inline const std::string& WalletAddressResponse::wallet_address() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _internal_wallet_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletAddressResponse::set_wallet_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wallet_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.WalletAddressResponse.wallet_address)
}
inline std::string* WalletAddressResponse::mutable_wallet_address() {
  std::string* _s = _internal_mutable_wallet_address();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _s;
}
inline const std::string& WalletAddressResponse::_internal_wallet_address() const {
  return _impl_.wallet_address_.Get();
}
inline void WalletAddressResponse::_internal_set_wallet_address(const std::string& value) {
  
  _impl_.wallet_address_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletAddressResponse::_internal_mutable_wallet_address() {
  
  return _impl_.wallet_address_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletAddressResponse::release_wallet_address() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _impl_.wallet_address_.Release();
}
inline void WalletAddressResponse::set_allocated_wallet_address(std::string* wallet_address) {
  if (wallet_address != nullptr) {
    
  } else {
    
  }
  _impl_.wallet_address_.SetAllocated(wallet_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wallet_address_.IsDefault()) {
    _impl_.wallet_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.WalletAddressResponse.wallet_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
