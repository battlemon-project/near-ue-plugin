// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto
#ifndef GRPC_auth_2eproto__INCLUDED
#define GRPC_auth_2eproto__INCLUDED

#include "auth.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace battlemon {
namespace auth {

class AuthService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.battlemon.auth.AuthService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::game::battlemon::auth::SuiSession* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>> AsyncSuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>>(AsyncSuiAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>> PrepareAsyncSuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>>(PrepareAsyncSuiAuthRaw(context, request, cq));
    }
    virtual ::grpc::Status GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::game::battlemon::auth::Session* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>> AsyncGuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>>(AsyncGuestAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>> PrepareAsyncGuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>>(PrepareAsyncGuestAuthRaw(context, request, cq));
    }
    // deprecated
    virtual ::grpc::Status GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::game::battlemon::auth::WalletAddressResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>> AsyncGetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>>(AsyncGetWalletAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>> PrepareAsyncGetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>>(PrepareAsyncGetWalletAddressRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // deprecated
      virtual void GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>* AsyncSuiAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::SuiSession>* PrepareAsyncSuiAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>* AsyncGuestAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::Session>* PrepareAsyncGuestAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>* AsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::auth::WalletAddressResponse>* PrepareAsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::game::battlemon::auth::SuiSession* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>> AsyncSuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>>(AsyncSuiAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>> PrepareAsyncSuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>>(PrepareAsyncSuiAuthRaw(context, request, cq));
    }
    ::grpc::Status GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::game::battlemon::auth::Session* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>> AsyncGuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>>(AsyncGuestAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>> PrepareAsyncGuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>>(PrepareAsyncGuestAuthRaw(context, request, cq));
    }
    ::grpc::Status GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::game::battlemon::auth::WalletAddressResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>> AsyncGetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>>(AsyncGetWalletAddressRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>> PrepareAsyncGetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>>(PrepareAsyncGetWalletAddressRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response, std::function<void(::grpc::Status)>) override;
      void SuiAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response, std::function<void(::grpc::Status)>) override;
      void GuestAuth(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, std::function<void(::grpc::Status)>) override;
      void GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>* AsyncSuiAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SuiSession>* PrepareAsyncSuiAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SuiAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>* AsyncGuestAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::Session>* PrepareAsyncGuestAuthRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::GuestAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>* AsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>* PrepareAsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SuiAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_GuestAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_GetWalletAddress_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SuiAuth(::grpc::ServerContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response);
    virtual ::grpc::Status GuestAuth(::grpc::ServerContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response);
    // deprecated
    virtual ::grpc::Status GetWalletAddress(::grpc::ServerContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SuiAuth() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuiAuth(::grpc::ServerContext* context, ::game::battlemon::auth::SuiAuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::auth::SuiSession>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GuestAuth() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGuestAuth(::grpc::ServerContext* context, ::game::battlemon::auth::GuestAuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::auth::Session>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWalletAddress(::grpc::ServerContext* context, ::game::battlemon::auth::WalletAddressRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::auth::WalletAddressResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SuiAuth<WithAsyncMethod_GuestAuth<WithAsyncMethod_GetWalletAddress<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SuiAuth() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::SuiAuthRequest, ::game::battlemon::auth::SuiSession>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::auth::SuiAuthRequest* request, ::game::battlemon::auth::SuiSession* response) { return this->SuiAuth(context, request, response); }));}
    void SetMessageAllocatorFor_SuiAuth(
        ::grpc::MessageAllocator< ::game::battlemon::auth::SuiAuthRequest, ::game::battlemon::auth::SuiSession>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::SuiAuthRequest, ::game::battlemon::auth::SuiSession>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuiAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GuestAuth() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::GuestAuthRequest, ::game::battlemon::auth::Session>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::auth::GuestAuthRequest* request, ::game::battlemon::auth::Session* response) { return this->GuestAuth(context, request, response); }));}
    void SetMessageAllocatorFor_GuestAuth(
        ::grpc::MessageAllocator< ::game::battlemon::auth::GuestAuthRequest, ::game::battlemon::auth::Session>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::GuestAuthRequest, ::game::battlemon::auth::Session>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GuestAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response) { return this->GetWalletAddress(context, request, response); }));}
    void SetMessageAllocatorFor_GetWalletAddress(
        ::grpc::MessageAllocator< ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWalletAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SuiAuth<WithCallbackMethod_GuestAuth<WithCallbackMethod_GetWalletAddress<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SuiAuth() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GuestAuth() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SuiAuth() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSuiAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GuestAuth() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGuestAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetWalletAddress(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SuiAuth() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SuiAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SuiAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GuestAuth() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GuestAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GuestAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetWalletAddress(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetWalletAddress(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SuiAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SuiAuth() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::auth::SuiAuthRequest, ::game::battlemon::auth::SuiSession>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::auth::SuiAuthRequest, ::game::battlemon::auth::SuiSession>* streamer) {
                       return this->StreamedSuiAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SuiAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SuiAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::SuiAuthRequest* /*request*/, ::game::battlemon::auth::SuiSession* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSuiAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::auth::SuiAuthRequest,::game::battlemon::auth::SuiSession>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GuestAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GuestAuth() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::auth::GuestAuthRequest, ::game::battlemon::auth::Session>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::auth::GuestAuthRequest, ::game::battlemon::auth::Session>* streamer) {
                       return this->StreamedGuestAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GuestAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GuestAuth(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::GuestAuthRequest* /*request*/, ::game::battlemon::auth::Session* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGuestAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::auth::GuestAuthRequest,::game::battlemon::auth::Session>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetWalletAddress : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetWalletAddress() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse>* streamer) {
                       return this->StreamedGetWalletAddress(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetWalletAddress() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetWalletAddress(::grpc::ServerContext* /*context*/, const ::game::battlemon::auth::WalletAddressRequest* /*request*/, ::game::battlemon::auth::WalletAddressResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetWalletAddress(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::auth::WalletAddressRequest,::game::battlemon::auth::WalletAddressResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SuiAuth<WithStreamedUnaryMethod_GuestAuth<WithStreamedUnaryMethod_GetWalletAddress<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SuiAuth<WithStreamedUnaryMethod_GuestAuth<WithStreamedUnaryMethod_GetWalletAddress<Service > > > StreamedService;
};

}  // namespace auth
}  // namespace battlemon
}  // namespace game


#endif  // GRPC_auth_2eproto__INCLUDED
