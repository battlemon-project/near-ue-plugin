// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalItems.proto

#include "internalItems.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace items {
namespace internal {
PROTOBUF_CONSTEXPR IsOwnerRequest::IsOwnerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nft_ids_)*/{}
  , /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsOwnerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsOwnerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsOwnerRequestDefaultTypeInternal() {}
  union {
    IsOwnerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsOwnerRequestDefaultTypeInternal _IsOwnerRequest_default_instance_;
PROTOBUF_CONSTEXPR IsOwnerResponse::IsOwnerResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsOwnerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsOwnerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsOwnerResponseDefaultTypeInternal() {}
  union {
    IsOwnerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsOwnerResponseDefaultTypeInternal _IsOwnerResponse_default_instance_;
PROTOBUF_CONSTEXPR InternalLemonsInfoRequest::InternalLemonsInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_lemonids_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalLemonsInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalLemonsInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalLemonsInfoRequestDefaultTypeInternal() {}
  union {
    InternalLemonsInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalLemonsInfoRequestDefaultTypeInternal _InternalLemonsInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR InternalUserLemonID::InternalUserLemonID(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lemon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalUserLemonIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalUserLemonIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalUserLemonIDDefaultTypeInternal() {}
  union {
    InternalUserLemonID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalUserLemonIDDefaultTypeInternal _InternalUserLemonID_default_instance_;
PROTOBUF_CONSTEXPR InternalLemonsInfoResponse::InternalLemonsInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.users_lemons_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalLemonsInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalLemonsInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalLemonsInfoResponseDefaultTypeInternal() {}
  union {
    InternalLemonsInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalLemonsInfoResponseDefaultTypeInternal _InternalLemonsInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR InternalUserLemon::InternalUserLemon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lemon_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalUserLemonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalUserLemonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalUserLemonDefaultTypeInternal() {}
  union {
    InternalUserLemon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalUserLemonDefaultTypeInternal _InternalUserLemon_default_instance_;
}  // namespace internal
}  // namespace items
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_internalItems_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_internalItems_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internalItems_2eproto = nullptr;

const uint32_t TableStruct_internalItems_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::IsOwnerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::IsOwnerRequest, _impl_.nft_ids_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::IsOwnerRequest, _impl_.near_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::IsOwnerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::IsOwnerResponse, _impl_.result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalLemonsInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalLemonsInfoRequest, _impl_.users_lemonids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemonID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemonID, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemonID, _impl_.lemon_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalLemonsInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalLemonsInfoResponse, _impl_.users_lemons_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemon, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::internal::InternalUserLemon, _impl_.lemon_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::items::internal::IsOwnerRequest)},
  { 8, -1, -1, sizeof(::game::battlemon::items::internal::IsOwnerResponse)},
  { 15, -1, -1, sizeof(::game::battlemon::items::internal::InternalLemonsInfoRequest)},
  { 22, -1, -1, sizeof(::game::battlemon::items::internal::InternalUserLemonID)},
  { 30, -1, -1, sizeof(::game::battlemon::items::internal::InternalLemonsInfoResponse)},
  { 37, -1, -1, sizeof(::game::battlemon::items::internal::InternalUserLemon)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::items::internal::_IsOwnerRequest_default_instance_._instance,
  &::game::battlemon::items::internal::_IsOwnerResponse_default_instance_._instance,
  &::game::battlemon::items::internal::_InternalLemonsInfoRequest_default_instance_._instance,
  &::game::battlemon::items::internal::_InternalUserLemonID_default_instance_._instance,
  &::game::battlemon::items::internal::_InternalLemonsInfoResponse_default_instance_._instance,
  &::game::battlemon::items::internal::_InternalUserLemon_default_instance_._instance,
};

const char descriptor_table_protodef_internalItems_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023internalItems.proto\022\035game.battlemon.it"
  "ems.internal\032\013items.proto\"2\n\016IsOwnerRequ"
  "est\022\017\n\007nft_ids\030\001 \003(\t\022\017\n\007near_id\030\002 \001(\t\"!\n"
  "\017IsOwnerResponse\022\016\n\006result\030\001 \001(\010\"g\n\031Inte"
  "rnalLemonsInfoRequest\022J\n\016users_lemonids\030"
  "\001 \003(\01322.game.battlemon.items.internal.In"
  "ternalUserLemonID\"8\n\023InternalUserLemonID"
  "\022\017\n\007near_id\030\001 \001(\t\022\020\n\010lemon_id\030\002 \001(\t\"d\n\032I"
  "nternalLemonsInfoResponse\022F\n\014users_lemon"
  "s\030\001 \003(\01320.game.battlemon.items.internal."
  "InternalUserLemon\"O\n\021InternalUserLemon\022\017"
  "\n\007near_id\030\001 \001(\t\022)\n\005lemon\030\002 \001(\0132\032.game.ba"
  "ttlemon.items.Item2\217\002\n\024InternalItemsServ"
  "ice\022h\n\007IsOwner\022-.game.battlemon.items.in"
  "ternal.IsOwnerRequest\032..game.battlemon.i"
  "tems.internal.IsOwnerResponse\022\214\001\n\025Intern"
  "alGetLemonsInfo\0228.game.battlemon.items.i"
  "nternal.InternalLemonsInfoRequest\0329.game"
  ".battlemon.items.internal.InternalLemons"
  "InfoResponseB\nZ\010servicesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_internalItems_2eproto_deps[1] = {
  &::descriptor_table_items_2eproto,
};
static ::_pbi::once_flag descriptor_table_internalItems_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internalItems_2eproto = {
    false, false, 792, descriptor_table_protodef_internalItems_2eproto,
    "internalItems.proto",
    &descriptor_table_internalItems_2eproto_once, descriptor_table_internalItems_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_internalItems_2eproto::offsets,
    file_level_metadata_internalItems_2eproto, file_level_enum_descriptors_internalItems_2eproto,
    file_level_service_descriptors_internalItems_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internalItems_2eproto_getter() {
  return &descriptor_table_internalItems_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internalItems_2eproto(&descriptor_table_internalItems_2eproto);
namespace game {
namespace battlemon {
namespace items {
namespace internal {

// ===================================================================

class IsOwnerRequest::_Internal {
 public:
};

IsOwnerRequest::IsOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.IsOwnerRequest)
}
IsOwnerRequest::IsOwnerRequest(const IsOwnerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsOwnerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nft_ids_){from._impl_.nft_ids_}
    , decltype(_impl_.near_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.IsOwnerRequest)
}

inline void IsOwnerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nft_ids_){arena}
    , decltype(_impl_.near_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IsOwnerRequest::~IsOwnerRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.IsOwnerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsOwnerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nft_ids_.~RepeatedPtrField();
  _impl_.near_id_.Destroy();
}

void IsOwnerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsOwnerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.IsOwnerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nft_ids_.Clear();
  _impl_.near_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsOwnerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string nft_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_nft_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.internal.IsOwnerRequest.nft_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string near_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.internal.IsOwnerRequest.near_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsOwnerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.IsOwnerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string nft_ids = 1;
  for (int i = 0, n = this->_internal_nft_ids_size(); i < n; i++) {
    const auto& s = this->_internal_nft_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.internal.IsOwnerRequest.nft_ids");
    target = stream->WriteString(1, s, target);
  }

  // string near_id = 2;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.internal.IsOwnerRequest.near_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_near_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.IsOwnerRequest)
  return target;
}

size_t IsOwnerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.IsOwnerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string nft_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.nft_ids_.size());
  for (int i = 0, n = _impl_.nft_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.nft_ids_.Get(i));
  }

  // string near_id = 2;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsOwnerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsOwnerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsOwnerRequest::GetClassData() const { return &_class_data_; }


void IsOwnerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsOwnerRequest*>(&to_msg);
  auto& from = static_cast<const IsOwnerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.IsOwnerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nft_ids_.MergeFrom(from._impl_.nft_ids_);
  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsOwnerRequest::CopyFrom(const IsOwnerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.IsOwnerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOwnerRequest::IsInitialized() const {
  return true;
}

void IsOwnerRequest::InternalSwap(IsOwnerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nft_ids_.InternalSwap(&other->_impl_.nft_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IsOwnerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[0]);
}

// ===================================================================

class IsOwnerResponse::_Internal {
 public:
};

IsOwnerResponse::IsOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.IsOwnerResponse)
}
IsOwnerResponse::IsOwnerResponse(const IsOwnerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsOwnerResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.result_ = from._impl_.result_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.IsOwnerResponse)
}

inline void IsOwnerResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsOwnerResponse::~IsOwnerResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.IsOwnerResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsOwnerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsOwnerResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsOwnerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.IsOwnerResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.result_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsOwnerResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsOwnerResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.IsOwnerResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.IsOwnerResponse)
  return target;
}

size_t IsOwnerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.IsOwnerResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool result = 1;
  if (this->_internal_result() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsOwnerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsOwnerResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsOwnerResponse::GetClassData() const { return &_class_data_; }


void IsOwnerResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsOwnerResponse*>(&to_msg);
  auto& from = static_cast<const IsOwnerResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.IsOwnerResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsOwnerResponse::CopyFrom(const IsOwnerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.IsOwnerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsOwnerResponse::IsInitialized() const {
  return true;
}

void IsOwnerResponse::InternalSwap(IsOwnerResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.result_, other->_impl_.result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsOwnerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[1]);
}

// ===================================================================

class InternalLemonsInfoRequest::_Internal {
 public:
};

InternalLemonsInfoRequest::InternalLemonsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.InternalLemonsInfoRequest)
}
InternalLemonsInfoRequest::InternalLemonsInfoRequest(const InternalLemonsInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalLemonsInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_lemonids_){from._impl_.users_lemonids_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.InternalLemonsInfoRequest)
}

inline void InternalLemonsInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_lemonids_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InternalLemonsInfoRequest::~InternalLemonsInfoRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.InternalLemonsInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalLemonsInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_lemonids_.~RepeatedPtrField();
}

void InternalLemonsInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalLemonsInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.InternalLemonsInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_lemonids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalLemonsInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.battlemon.items.internal.InternalUserLemonID users_lemonids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users_lemonids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalLemonsInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.InternalLemonsInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.battlemon.items.internal.InternalUserLemonID users_lemonids = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_lemonids_size()); i < n; i++) {
    const auto& repfield = this->_internal_users_lemonids(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.InternalLemonsInfoRequest)
  return target;
}

size_t InternalLemonsInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.InternalLemonsInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.internal.InternalUserLemonID users_lemonids = 1;
  total_size += 1UL * this->_internal_users_lemonids_size();
  for (const auto& msg : this->_impl_.users_lemonids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalLemonsInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalLemonsInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalLemonsInfoRequest::GetClassData() const { return &_class_data_; }


void InternalLemonsInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalLemonsInfoRequest*>(&to_msg);
  auto& from = static_cast<const InternalLemonsInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.InternalLemonsInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_lemonids_.MergeFrom(from._impl_.users_lemonids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalLemonsInfoRequest::CopyFrom(const InternalLemonsInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.InternalLemonsInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLemonsInfoRequest::IsInitialized() const {
  return true;
}

void InternalLemonsInfoRequest::InternalSwap(InternalLemonsInfoRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_lemonids_.InternalSwap(&other->_impl_.users_lemonids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalLemonsInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[2]);
}

// ===================================================================

class InternalUserLemonID::_Internal {
 public:
};

InternalUserLemonID::InternalUserLemonID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.InternalUserLemonID)
}
InternalUserLemonID::InternalUserLemonID(const InternalUserLemonID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalUserLemonID* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lemon_id().empty()) {
    _this->_impl_.lemon_id_.Set(from._internal_lemon_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.InternalUserLemonID)
}

inline void InternalUserLemonID::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalUserLemonID::~InternalUserLemonID() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.InternalUserLemonID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalUserLemonID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  _impl_.lemon_id_.Destroy();
}

void InternalUserLemonID::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalUserLemonID::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.InternalUserLemonID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  _impl_.lemon_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalUserLemonID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.internal.InternalUserLemonID.near_id"));
        } else
          goto handle_unusual;
        continue;
      // string lemon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lemon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.internal.InternalUserLemonID.lemon_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalUserLemonID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.InternalUserLemonID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.internal.InternalUserLemonID.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lemon_id().data(), static_cast<int>(this->_internal_lemon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.internal.InternalUserLemonID.lemon_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lemon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.InternalUserLemonID)
  return target;
}

size_t InternalUserLemonID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.InternalUserLemonID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lemon_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalUserLemonID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalUserLemonID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalUserLemonID::GetClassData() const { return &_class_data_; }


void InternalUserLemonID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalUserLemonID*>(&to_msg);
  auto& from = static_cast<const InternalUserLemonID&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.InternalUserLemonID)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (!from._internal_lemon_id().empty()) {
    _this->_internal_set_lemon_id(from._internal_lemon_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalUserLemonID::CopyFrom(const InternalUserLemonID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.InternalUserLemonID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalUserLemonID::IsInitialized() const {
  return true;
}

void InternalUserLemonID::InternalSwap(InternalUserLemonID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lemon_id_, lhs_arena,
      &other->_impl_.lemon_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalUserLemonID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[3]);
}

// ===================================================================

class InternalLemonsInfoResponse::_Internal {
 public:
};

InternalLemonsInfoResponse::InternalLemonsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.InternalLemonsInfoResponse)
}
InternalLemonsInfoResponse::InternalLemonsInfoResponse(const InternalLemonsInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalLemonsInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.users_lemons_){from._impl_.users_lemons_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.InternalLemonsInfoResponse)
}

inline void InternalLemonsInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.users_lemons_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InternalLemonsInfoResponse::~InternalLemonsInfoResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.InternalLemonsInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalLemonsInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.users_lemons_.~RepeatedPtrField();
}

void InternalLemonsInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalLemonsInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.InternalLemonsInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.users_lemons_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalLemonsInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.battlemon.items.internal.InternalUserLemon users_lemons = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_users_lemons(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalLemonsInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.InternalLemonsInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.battlemon.items.internal.InternalUserLemon users_lemons = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_users_lemons_size()); i < n; i++) {
    const auto& repfield = this->_internal_users_lemons(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.InternalLemonsInfoResponse)
  return target;
}

size_t InternalLemonsInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.InternalLemonsInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.internal.InternalUserLemon users_lemons = 1;
  total_size += 1UL * this->_internal_users_lemons_size();
  for (const auto& msg : this->_impl_.users_lemons_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalLemonsInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalLemonsInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalLemonsInfoResponse::GetClassData() const { return &_class_data_; }


void InternalLemonsInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalLemonsInfoResponse*>(&to_msg);
  auto& from = static_cast<const InternalLemonsInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.InternalLemonsInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.users_lemons_.MergeFrom(from._impl_.users_lemons_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalLemonsInfoResponse::CopyFrom(const InternalLemonsInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.InternalLemonsInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalLemonsInfoResponse::IsInitialized() const {
  return true;
}

void InternalLemonsInfoResponse::InternalSwap(InternalLemonsInfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.users_lemons_.InternalSwap(&other->_impl_.users_lemons_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalLemonsInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[4]);
}

// ===================================================================

class InternalUserLemon::_Internal {
 public:
  static const ::game::battlemon::items::Item& lemon(const InternalUserLemon* msg);
};

const ::game::battlemon::items::Item&
InternalUserLemon::_Internal::lemon(const InternalUserLemon* msg) {
  return *msg->_impl_.lemon_;
}
void InternalUserLemon::clear_lemon() {
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
}
InternalUserLemon::InternalUserLemon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.internal.InternalUserLemon)
}
InternalUserLemon::InternalUserLemon(const InternalUserLemon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalUserLemon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lemon()) {
    _this->_impl_.lemon_ = new ::game::battlemon::items::Item(*from._impl_.lemon_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.internal.InternalUserLemon)
}

inline void InternalUserLemon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalUserLemon::~InternalUserLemon() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.internal.InternalUserLemon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalUserLemon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lemon_;
}

void InternalUserLemon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalUserLemon::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.internal.InternalUserLemon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalUserLemon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.internal.InternalUserLemon.near_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.Item lemon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lemon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalUserLemon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.internal.InternalUserLemon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.internal.InternalUserLemon.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lemon(this),
        _Internal::lemon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.internal.InternalUserLemon)
  return target;
}

size_t InternalUserLemon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.internal.InternalUserLemon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lemon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalUserLemon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalUserLemon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalUserLemon::GetClassData() const { return &_class_data_; }


void InternalUserLemon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalUserLemon*>(&to_msg);
  auto& from = static_cast<const InternalUserLemon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.internal.InternalUserLemon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (from._internal_has_lemon()) {
    _this->_internal_mutable_lemon()->::game::battlemon::items::Item::MergeFrom(
        from._internal_lemon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalUserLemon::CopyFrom(const InternalUserLemon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.internal.InternalUserLemon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalUserLemon::IsInitialized() const {
  return true;
}

void InternalUserLemon::InternalSwap(InternalUserLemon* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  swap(_impl_.lemon_, other->_impl_.lemon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalUserLemon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalItems_2eproto_getter, &descriptor_table_internalItems_2eproto_once,
      file_level_metadata_internalItems_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace items
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::IsOwnerRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::IsOwnerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::IsOwnerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::IsOwnerResponse*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::IsOwnerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::IsOwnerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::InternalLemonsInfoRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::InternalLemonsInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::InternalLemonsInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::InternalUserLemonID*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::InternalUserLemonID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::InternalUserLemonID >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::InternalLemonsInfoResponse*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::InternalLemonsInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::InternalLemonsInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::internal::InternalUserLemon*
Arena::CreateMaybeMessage< ::game::battlemon::items::internal::InternalUserLemon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::internal::InternalUserLemon >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
