// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalCarousel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internalCarousel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internalCarousel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mm.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internalCarousel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internalCarousel_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internalCarousel_2eproto;
namespace game {
namespace battlemon {
namespace carousel {
namespace internal {
class CarouselRequests;
struct CarouselRequestsDefaultTypeInternal;
extern CarouselRequestsDefaultTypeInternal _CarouselRequests_default_instance_;
class CarouselResponses;
struct CarouselResponsesDefaultTypeInternal;
extern CarouselResponsesDefaultTypeInternal _CarouselResponses_default_instance_;
class InternalNewPlayer;
struct InternalNewPlayerDefaultTypeInternal;
extern InternalNewPlayerDefaultTypeInternal _InternalNewPlayer_default_instance_;
class InternalPlayer;
struct InternalPlayerDefaultTypeInternal;
extern InternalPlayerDefaultTypeInternal _InternalPlayer_default_instance_;
class InternalRoomInfo;
struct InternalRoomInfoDefaultTypeInternal;
extern InternalRoomInfoDefaultTypeInternal _InternalRoomInfo_default_instance_;
class NeedUsersAccept;
struct NeedUsersAcceptDefaultTypeInternal;
extern NeedUsersAcceptDefaultTypeInternal _NeedUsersAccept_default_instance_;
class PlayerInBattle;
struct PlayerInBattleDefaultTypeInternal;
extern PlayerInBattleDefaultTypeInternal _PlayerInBattle_default_instance_;
}  // namespace internal
}  // namespace carousel
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::carousel::internal::CarouselRequests* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::CarouselRequests>(Arena*);
template<> ::game::battlemon::carousel::internal::CarouselResponses* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::CarouselResponses>(Arena*);
template<> ::game::battlemon::carousel::internal::InternalNewPlayer* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::InternalNewPlayer>(Arena*);
template<> ::game::battlemon::carousel::internal::InternalPlayer* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::InternalPlayer>(Arena*);
template<> ::game::battlemon::carousel::internal::InternalRoomInfo* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::InternalRoomInfo>(Arena*);
template<> ::game::battlemon::carousel::internal::NeedUsersAccept* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::NeedUsersAccept>(Arena*);
template<> ::game::battlemon::carousel::internal::PlayerInBattle* Arena::CreateMaybeMessage<::game::battlemon::carousel::internal::PlayerInBattle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace carousel {
namespace internal {

// ===================================================================

class CarouselRequests final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.CarouselRequests) */ {
 public:
  inline CarouselRequests() : CarouselRequests(nullptr) {}
  ~CarouselRequests() override;
  explicit PROTOBUF_CONSTEXPR CarouselRequests(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarouselRequests(const CarouselRequests& from);
  CarouselRequests(CarouselRequests&& from) noexcept
    : CarouselRequests() {
    *this = ::std::move(from);
  }

  inline CarouselRequests& operator=(const CarouselRequests& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarouselRequests& operator=(CarouselRequests&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarouselRequests& default_instance() {
    return *internal_default_instance();
  }
  enum RequestCase {
    kNewPlayer = 1,
    kNewRoom = 2,
    kRemovePlayer = 3,
    kRoomFinished = 4,
    kAcceptGame = 5,
    REQUEST_NOT_SET = 0,
  };

  static inline const CarouselRequests* internal_default_instance() {
    return reinterpret_cast<const CarouselRequests*>(
               &_CarouselRequests_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CarouselRequests& a, CarouselRequests& b) {
    a.Swap(&b);
  }
  inline void Swap(CarouselRequests* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarouselRequests* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarouselRequests* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarouselRequests>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarouselRequests& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarouselRequests& from) {
    CarouselRequests::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarouselRequests* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.CarouselRequests";
  }
  protected:
  explicit CarouselRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewPlayerFieldNumber = 1,
    kNewRoomFieldNumber = 2,
    kRemovePlayerFieldNumber = 3,
    kRoomFinishedFieldNumber = 4,
    kAcceptGameFieldNumber = 5,
  };
  // .game.battlemon.carousel.internal.InternalPlayer new_player = 1;
  bool has_new_player() const;
  private:
  bool _internal_has_new_player() const;
  public:
  void clear_new_player();
  const ::game::battlemon::carousel::internal::InternalPlayer& new_player() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_new_player();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_new_player();
  void set_allocated_new_player(::game::battlemon::carousel::internal::InternalPlayer* new_player);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_new_player() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_new_player();
  public:
  void unsafe_arena_set_allocated_new_player(
      ::game::battlemon::carousel::internal::InternalPlayer* new_player);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_new_player();

  // .game.battlemon.carousel.internal.InternalRoomInfo new_room = 2;
  bool has_new_room() const;
  private:
  bool _internal_has_new_room() const;
  public:
  void clear_new_room();
  const ::game::battlemon::carousel::internal::InternalRoomInfo& new_room() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalRoomInfo* release_new_room();
  ::game::battlemon::carousel::internal::InternalRoomInfo* mutable_new_room();
  void set_allocated_new_room(::game::battlemon::carousel::internal::InternalRoomInfo* new_room);
  private:
  const ::game::battlemon::carousel::internal::InternalRoomInfo& _internal_new_room() const;
  ::game::battlemon::carousel::internal::InternalRoomInfo* _internal_mutable_new_room();
  public:
  void unsafe_arena_set_allocated_new_room(
      ::game::battlemon::carousel::internal::InternalRoomInfo* new_room);
  ::game::battlemon::carousel::internal::InternalRoomInfo* unsafe_arena_release_new_room();

  // .game.battlemon.carousel.internal.InternalPlayer remove_player = 3;
  bool has_remove_player() const;
  private:
  bool _internal_has_remove_player() const;
  public:
  void clear_remove_player();
  const ::game::battlemon::carousel::internal::InternalPlayer& remove_player() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_remove_player();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_remove_player();
  void set_allocated_remove_player(::game::battlemon::carousel::internal::InternalPlayer* remove_player);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_remove_player() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_remove_player();
  public:
  void unsafe_arena_set_allocated_remove_player(
      ::game::battlemon::carousel::internal::InternalPlayer* remove_player);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_remove_player();

  // .game.battlemon.carousel.internal.InternalRoomInfo room_finished = 4;
  bool has_room_finished() const;
  private:
  bool _internal_has_room_finished() const;
  public:
  void clear_room_finished();
  const ::game::battlemon::carousel::internal::InternalRoomInfo& room_finished() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalRoomInfo* release_room_finished();
  ::game::battlemon::carousel::internal::InternalRoomInfo* mutable_room_finished();
  void set_allocated_room_finished(::game::battlemon::carousel::internal::InternalRoomInfo* room_finished);
  private:
  const ::game::battlemon::carousel::internal::InternalRoomInfo& _internal_room_finished() const;
  ::game::battlemon::carousel::internal::InternalRoomInfo* _internal_mutable_room_finished();
  public:
  void unsafe_arena_set_allocated_room_finished(
      ::game::battlemon::carousel::internal::InternalRoomInfo* room_finished);
  ::game::battlemon::carousel::internal::InternalRoomInfo* unsafe_arena_release_room_finished();

  // .game.battlemon.carousel.internal.InternalPlayer accept_game = 5;
  bool has_accept_game() const;
  private:
  bool _internal_has_accept_game() const;
  public:
  void clear_accept_game();
  const ::game::battlemon::carousel::internal::InternalPlayer& accept_game() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_accept_game();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_accept_game();
  void set_allocated_accept_game(::game::battlemon::carousel::internal::InternalPlayer* accept_game);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_accept_game() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_accept_game();
  public:
  void unsafe_arena_set_allocated_accept_game(
      ::game::battlemon::carousel::internal::InternalPlayer* accept_game);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_accept_game();

  void clear_request();
  RequestCase request_case() const;
  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.CarouselRequests)
 private:
  class _Internal;
  void set_has_new_player();
  void set_has_new_room();
  void set_has_remove_player();
  void set_has_room_finished();
  void set_has_accept_game();

  inline bool has_request() const;
  inline void clear_has_request();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union RequestUnion {
      constexpr RequestUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::game::battlemon::carousel::internal::InternalPlayer* new_player_;
      ::game::battlemon::carousel::internal::InternalRoomInfo* new_room_;
      ::game::battlemon::carousel::internal::InternalPlayer* remove_player_;
      ::game::battlemon::carousel::internal::InternalRoomInfo* room_finished_;
      ::game::battlemon::carousel::internal::InternalPlayer* accept_game_;
    } request_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class CarouselResponses final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.CarouselResponses) */ {
 public:
  inline CarouselResponses() : CarouselResponses(nullptr) {}
  ~CarouselResponses() override;
  explicit PROTOBUF_CONSTEXPR CarouselResponses(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CarouselResponses(const CarouselResponses& from);
  CarouselResponses(CarouselResponses&& from) noexcept
    : CarouselResponses() {
    *this = ::std::move(from);
  }

  inline CarouselResponses& operator=(const CarouselResponses& from) {
    CopyFrom(from);
    return *this;
  }
  inline CarouselResponses& operator=(CarouselResponses&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CarouselResponses& default_instance() {
    return *internal_default_instance();
  }
  enum ResponseCase {
    kRoomReady = 1,
    kNewRoomPlayer = 2,
    kNeedUsersAccept = 3,
    kRoomNotFound = 4,
    kAcceptingCanceled = 5,
    kPlayerInQueue = 6,
    kPlayerInBattle = 7,
    kPlayerOutOfLine = 8,
    RESPONSE_NOT_SET = 0,
  };

  static inline const CarouselResponses* internal_default_instance() {
    return reinterpret_cast<const CarouselResponses*>(
               &_CarouselResponses_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CarouselResponses& a, CarouselResponses& b) {
    a.Swap(&b);
  }
  inline void Swap(CarouselResponses* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CarouselResponses* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CarouselResponses* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CarouselResponses>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CarouselResponses& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CarouselResponses& from) {
    CarouselResponses::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CarouselResponses* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.CarouselResponses";
  }
  protected:
  explicit CarouselResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomReadyFieldNumber = 1,
    kNewRoomPlayerFieldNumber = 2,
    kNeedUsersAcceptFieldNumber = 3,
    kRoomNotFoundFieldNumber = 4,
    kAcceptingCanceledFieldNumber = 5,
    kPlayerInQueueFieldNumber = 6,
    kPlayerInBattleFieldNumber = 7,
    kPlayerOutOfLineFieldNumber = 8,
  };
  // .game.battlemon.carousel.internal.InternalRoomInfo room_ready = 1;
  bool has_room_ready() const;
  private:
  bool _internal_has_room_ready() const;
  public:
  void clear_room_ready();
  const ::game::battlemon::carousel::internal::InternalRoomInfo& room_ready() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalRoomInfo* release_room_ready();
  ::game::battlemon::carousel::internal::InternalRoomInfo* mutable_room_ready();
  void set_allocated_room_ready(::game::battlemon::carousel::internal::InternalRoomInfo* room_ready);
  private:
  const ::game::battlemon::carousel::internal::InternalRoomInfo& _internal_room_ready() const;
  ::game::battlemon::carousel::internal::InternalRoomInfo* _internal_mutable_room_ready();
  public:
  void unsafe_arena_set_allocated_room_ready(
      ::game::battlemon::carousel::internal::InternalRoomInfo* room_ready);
  ::game::battlemon::carousel::internal::InternalRoomInfo* unsafe_arena_release_room_ready();

  // .game.battlemon.carousel.internal.InternalNewPlayer new_room_player = 2;
  bool has_new_room_player() const;
  private:
  bool _internal_has_new_room_player() const;
  public:
  void clear_new_room_player();
  const ::game::battlemon::carousel::internal::InternalNewPlayer& new_room_player() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalNewPlayer* release_new_room_player();
  ::game::battlemon::carousel::internal::InternalNewPlayer* mutable_new_room_player();
  void set_allocated_new_room_player(::game::battlemon::carousel::internal::InternalNewPlayer* new_room_player);
  private:
  const ::game::battlemon::carousel::internal::InternalNewPlayer& _internal_new_room_player() const;
  ::game::battlemon::carousel::internal::InternalNewPlayer* _internal_mutable_new_room_player();
  public:
  void unsafe_arena_set_allocated_new_room_player(
      ::game::battlemon::carousel::internal::InternalNewPlayer* new_room_player);
  ::game::battlemon::carousel::internal::InternalNewPlayer* unsafe_arena_release_new_room_player();

  // .game.battlemon.carousel.internal.NeedUsersAccept need_users_accept = 3;
  bool has_need_users_accept() const;
  private:
  bool _internal_has_need_users_accept() const;
  public:
  void clear_need_users_accept();
  const ::game::battlemon::carousel::internal::NeedUsersAccept& need_users_accept() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::NeedUsersAccept* release_need_users_accept();
  ::game::battlemon::carousel::internal::NeedUsersAccept* mutable_need_users_accept();
  void set_allocated_need_users_accept(::game::battlemon::carousel::internal::NeedUsersAccept* need_users_accept);
  private:
  const ::game::battlemon::carousel::internal::NeedUsersAccept& _internal_need_users_accept() const;
  ::game::battlemon::carousel::internal::NeedUsersAccept* _internal_mutable_need_users_accept();
  public:
  void unsafe_arena_set_allocated_need_users_accept(
      ::game::battlemon::carousel::internal::NeedUsersAccept* need_users_accept);
  ::game::battlemon::carousel::internal::NeedUsersAccept* unsafe_arena_release_need_users_accept();

  // .game.battlemon.carousel.internal.InternalPlayer room_not_found = 4;
  bool has_room_not_found() const;
  private:
  bool _internal_has_room_not_found() const;
  public:
  void clear_room_not_found();
  const ::game::battlemon::carousel::internal::InternalPlayer& room_not_found() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_room_not_found();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_room_not_found();
  void set_allocated_room_not_found(::game::battlemon::carousel::internal::InternalPlayer* room_not_found);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_room_not_found() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_room_not_found();
  public:
  void unsafe_arena_set_allocated_room_not_found(
      ::game::battlemon::carousel::internal::InternalPlayer* room_not_found);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_room_not_found();

  // .game.battlemon.carousel.internal.InternalRoomInfo accepting_canceled = 5;
  bool has_accepting_canceled() const;
  private:
  bool _internal_has_accepting_canceled() const;
  public:
  void clear_accepting_canceled();
  const ::game::battlemon::carousel::internal::InternalRoomInfo& accepting_canceled() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalRoomInfo* release_accepting_canceled();
  ::game::battlemon::carousel::internal::InternalRoomInfo* mutable_accepting_canceled();
  void set_allocated_accepting_canceled(::game::battlemon::carousel::internal::InternalRoomInfo* accepting_canceled);
  private:
  const ::game::battlemon::carousel::internal::InternalRoomInfo& _internal_accepting_canceled() const;
  ::game::battlemon::carousel::internal::InternalRoomInfo* _internal_mutable_accepting_canceled();
  public:
  void unsafe_arena_set_allocated_accepting_canceled(
      ::game::battlemon::carousel::internal::InternalRoomInfo* accepting_canceled);
  ::game::battlemon::carousel::internal::InternalRoomInfo* unsafe_arena_release_accepting_canceled();

  // .game.battlemon.carousel.internal.InternalPlayer player_in_queue = 6;
  bool has_player_in_queue() const;
  private:
  bool _internal_has_player_in_queue() const;
  public:
  void clear_player_in_queue();
  const ::game::battlemon::carousel::internal::InternalPlayer& player_in_queue() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_player_in_queue();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_player_in_queue();
  void set_allocated_player_in_queue(::game::battlemon::carousel::internal::InternalPlayer* player_in_queue);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_player_in_queue() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_player_in_queue();
  public:
  void unsafe_arena_set_allocated_player_in_queue(
      ::game::battlemon::carousel::internal::InternalPlayer* player_in_queue);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_player_in_queue();

  // .game.battlemon.carousel.internal.PlayerInBattle player_in_battle = 7;
  bool has_player_in_battle() const;
  private:
  bool _internal_has_player_in_battle() const;
  public:
  void clear_player_in_battle();
  const ::game::battlemon::carousel::internal::PlayerInBattle& player_in_battle() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::PlayerInBattle* release_player_in_battle();
  ::game::battlemon::carousel::internal::PlayerInBattle* mutable_player_in_battle();
  void set_allocated_player_in_battle(::game::battlemon::carousel::internal::PlayerInBattle* player_in_battle);
  private:
  const ::game::battlemon::carousel::internal::PlayerInBattle& _internal_player_in_battle() const;
  ::game::battlemon::carousel::internal::PlayerInBattle* _internal_mutable_player_in_battle();
  public:
  void unsafe_arena_set_allocated_player_in_battle(
      ::game::battlemon::carousel::internal::PlayerInBattle* player_in_battle);
  ::game::battlemon::carousel::internal::PlayerInBattle* unsafe_arena_release_player_in_battle();

  // .game.battlemon.carousel.internal.InternalPlayer player_out_of_line = 8;
  bool has_player_out_of_line() const;
  private:
  bool _internal_has_player_out_of_line() const;
  public:
  void clear_player_out_of_line();
  const ::game::battlemon::carousel::internal::InternalPlayer& player_out_of_line() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_player_out_of_line();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_player_out_of_line();
  void set_allocated_player_out_of_line(::game::battlemon::carousel::internal::InternalPlayer* player_out_of_line);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_player_out_of_line() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_player_out_of_line();
  public:
  void unsafe_arena_set_allocated_player_out_of_line(
      ::game::battlemon::carousel::internal::InternalPlayer* player_out_of_line);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_player_out_of_line();

  void clear_response();
  ResponseCase response_case() const;
  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.CarouselResponses)
 private:
  class _Internal;
  void set_has_room_ready();
  void set_has_new_room_player();
  void set_has_need_users_accept();
  void set_has_room_not_found();
  void set_has_accepting_canceled();
  void set_has_player_in_queue();
  void set_has_player_in_battle();
  void set_has_player_out_of_line();

  inline bool has_response() const;
  inline void clear_has_response();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ResponseUnion {
      constexpr ResponseUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::game::battlemon::carousel::internal::InternalRoomInfo* room_ready_;
      ::game::battlemon::carousel::internal::InternalNewPlayer* new_room_player_;
      ::game::battlemon::carousel::internal::NeedUsersAccept* need_users_accept_;
      ::game::battlemon::carousel::internal::InternalPlayer* room_not_found_;
      ::game::battlemon::carousel::internal::InternalRoomInfo* accepting_canceled_;
      ::game::battlemon::carousel::internal::InternalPlayer* player_in_queue_;
      ::game::battlemon::carousel::internal::PlayerInBattle* player_in_battle_;
      ::game::battlemon::carousel::internal::InternalPlayer* player_out_of_line_;
    } response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class NeedUsersAccept final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.NeedUsersAccept) */ {
 public:
  inline NeedUsersAccept() : NeedUsersAccept(nullptr) {}
  ~NeedUsersAccept() override;
  explicit PROTOBUF_CONSTEXPR NeedUsersAccept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NeedUsersAccept(const NeedUsersAccept& from);
  NeedUsersAccept(NeedUsersAccept&& from) noexcept
    : NeedUsersAccept() {
    *this = ::std::move(from);
  }

  inline NeedUsersAccept& operator=(const NeedUsersAccept& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeedUsersAccept& operator=(NeedUsersAccept&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NeedUsersAccept& default_instance() {
    return *internal_default_instance();
  }
  static inline const NeedUsersAccept* internal_default_instance() {
    return reinterpret_cast<const NeedUsersAccept*>(
               &_NeedUsersAccept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NeedUsersAccept& a, NeedUsersAccept& b) {
    a.Swap(&b);
  }
  inline void Swap(NeedUsersAccept* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeedUsersAccept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NeedUsersAccept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NeedUsersAccept>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NeedUsersAccept& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NeedUsersAccept& from) {
    NeedUsersAccept::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeedUsersAccept* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.NeedUsersAccept";
  }
  protected:
  explicit NeedUsersAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearIdsFieldNumber = 1,
    kManualAcceptFieldNumber = 2,
    kTimeToAcceptFieldNumber = 3,
  };
  // repeated string near_ids = 1;
  int near_ids_size() const;
  private:
  int _internal_near_ids_size() const;
  public:
  void clear_near_ids();
  const std::string& near_ids(int index) const;
  std::string* mutable_near_ids(int index);
  void set_near_ids(int index, const std::string& value);
  void set_near_ids(int index, std::string&& value);
  void set_near_ids(int index, const char* value);
  void set_near_ids(int index, const char* value, size_t size);
  std::string* add_near_ids();
  void add_near_ids(const std::string& value);
  void add_near_ids(std::string&& value);
  void add_near_ids(const char* value);
  void add_near_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& near_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_near_ids();
  private:
  const std::string& _internal_near_ids(int index) const;
  std::string* _internal_add_near_ids();
  public:

  // bool manual_accept = 2;
  void clear_manual_accept();
  bool manual_accept() const;
  void set_manual_accept(bool value);
  private:
  bool _internal_manual_accept() const;
  void _internal_set_manual_accept(bool value);
  public:

  // int32 time_to_accept = 3;
  void clear_time_to_accept();
  int32_t time_to_accept() const;
  void set_time_to_accept(int32_t value);
  private:
  int32_t _internal_time_to_accept() const;
  void _internal_set_time_to_accept(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.NeedUsersAccept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> near_ids_;
    bool manual_accept_;
    int32_t time_to_accept_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class InternalRoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.InternalRoomInfo) */ {
 public:
  inline InternalRoomInfo() : InternalRoomInfo(nullptr) {}
  ~InternalRoomInfo() override;
  explicit PROTOBUF_CONSTEXPR InternalRoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalRoomInfo(const InternalRoomInfo& from);
  InternalRoomInfo(InternalRoomInfo&& from) noexcept
    : InternalRoomInfo() {
    *this = ::std::move(from);
  }

  inline InternalRoomInfo& operator=(const InternalRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalRoomInfo& operator=(InternalRoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalRoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalRoomInfo* internal_default_instance() {
    return reinterpret_cast<const InternalRoomInfo*>(
               &_InternalRoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternalRoomInfo& a, InternalRoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalRoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalRoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalRoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalRoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalRoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalRoomInfo& from) {
    InternalRoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalRoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.InternalRoomInfo";
  }
  protected:
  explicit InternalRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // repeated .game.battlemon.carousel.internal.InternalPlayer players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::carousel::internal::InternalPlayer >*
      mutable_players();
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_players(int index) const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_add_players();
  public:
  const ::game::battlemon::carousel::internal::InternalPlayer& players(int index) const;
  ::game::battlemon::carousel::internal::InternalPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::carousel::internal::InternalPlayer >&
      players() const;

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .game.battlemon.mm.GameMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::game::battlemon::mm::GameMode& mode() const;
  PROTOBUF_NODISCARD ::game::battlemon::mm::GameMode* release_mode();
  ::game::battlemon::mm::GameMode* mutable_mode();
  void set_allocated_mode(::game::battlemon::mm::GameMode* mode);
  private:
  const ::game::battlemon::mm::GameMode& _internal_mode() const;
  ::game::battlemon::mm::GameMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::game::battlemon::mm::GameMode* mode);
  ::game::battlemon::mm::GameMode* unsafe_arena_release_mode();

  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.InternalRoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::carousel::internal::InternalPlayer > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::game::battlemon::mm::GameMode* mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class InternalNewPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.InternalNewPlayer) */ {
 public:
  inline InternalNewPlayer() : InternalNewPlayer(nullptr) {}
  ~InternalNewPlayer() override;
  explicit PROTOBUF_CONSTEXPR InternalNewPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalNewPlayer(const InternalNewPlayer& from);
  InternalNewPlayer(InternalNewPlayer&& from) noexcept
    : InternalNewPlayer() {
    *this = ::std::move(from);
  }

  inline InternalNewPlayer& operator=(const InternalNewPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalNewPlayer& operator=(InternalNewPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalNewPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalNewPlayer* internal_default_instance() {
    return reinterpret_cast<const InternalNewPlayer*>(
               &_InternalNewPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InternalNewPlayer& a, InternalNewPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalNewPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalNewPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalNewPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalNewPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalNewPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalNewPlayer& from) {
    InternalNewPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalNewPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.InternalNewPlayer";
  }
  protected:
  explicit InternalNewPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kPlayerFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .game.battlemon.carousel.internal.InternalPlayer player = 2;
  bool has_player() const;
  private:
  bool _internal_has_player() const;
  public:
  void clear_player();
  const ::game::battlemon::carousel::internal::InternalPlayer& player() const;
  PROTOBUF_NODISCARD ::game::battlemon::carousel::internal::InternalPlayer* release_player();
  ::game::battlemon::carousel::internal::InternalPlayer* mutable_player();
  void set_allocated_player(::game::battlemon::carousel::internal::InternalPlayer* player);
  private:
  const ::game::battlemon::carousel::internal::InternalPlayer& _internal_player() const;
  ::game::battlemon::carousel::internal::InternalPlayer* _internal_mutable_player();
  public:
  void unsafe_arena_set_allocated_player(
      ::game::battlemon::carousel::internal::InternalPlayer* player);
  ::game::battlemon::carousel::internal::InternalPlayer* unsafe_arena_release_player();

  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.InternalNewPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::game::battlemon::carousel::internal::InternalPlayer* player_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class InternalPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.InternalPlayer) */ {
 public:
  inline InternalPlayer() : InternalPlayer(nullptr) {}
  ~InternalPlayer() override;
  explicit PROTOBUF_CONSTEXPR InternalPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalPlayer(const InternalPlayer& from);
  InternalPlayer(InternalPlayer&& from) noexcept
    : InternalPlayer() {
    *this = ::std::move(from);
  }

  inline InternalPlayer& operator=(const InternalPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalPlayer& operator=(InternalPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalPlayer* internal_default_instance() {
    return reinterpret_cast<const InternalPlayer*>(
               &_InternalPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InternalPlayer& a, InternalPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalPlayer& from) {
    InternalPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.InternalPlayer";
  }
  protected:
  explicit InternalPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearIdFieldNumber = 1,
    kLemonIdFieldNumber = 3,
    kModeFieldNumber = 2,
  };
  // string near_id = 1;
  void clear_near_id();
  const std::string& near_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_id();
  PROTOBUF_NODISCARD std::string* release_near_id();
  void set_allocated_near_id(std::string* near_id);
  private:
  const std::string& _internal_near_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_id(const std::string& value);
  std::string* _internal_mutable_near_id();
  public:

  // string lemon_id = 3;
  void clear_lemon_id();
  const std::string& lemon_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lemon_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lemon_id();
  PROTOBUF_NODISCARD std::string* release_lemon_id();
  void set_allocated_lemon_id(std::string* lemon_id);
  private:
  const std::string& _internal_lemon_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lemon_id(const std::string& value);
  std::string* _internal_mutable_lemon_id();
  public:

  // .game.battlemon.mm.GameMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::game::battlemon::mm::GameMode& mode() const;
  PROTOBUF_NODISCARD ::game::battlemon::mm::GameMode* release_mode();
  ::game::battlemon::mm::GameMode* mutable_mode();
  void set_allocated_mode(::game::battlemon::mm::GameMode* mode);
  private:
  const ::game::battlemon::mm::GameMode& _internal_mode() const;
  ::game::battlemon::mm::GameMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::game::battlemon::mm::GameMode* mode);
  ::game::battlemon::mm::GameMode* unsafe_arena_release_mode();

  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.InternalPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemon_id_;
    ::game::battlemon::mm::GameMode* mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// -------------------------------------------------------------------

class PlayerInBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.carousel.internal.PlayerInBattle) */ {
 public:
  inline PlayerInBattle() : PlayerInBattle(nullptr) {}
  ~PlayerInBattle() override;
  explicit PROTOBUF_CONSTEXPR PlayerInBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInBattle(const PlayerInBattle& from);
  PlayerInBattle(PlayerInBattle&& from) noexcept
    : PlayerInBattle() {
    *this = ::std::move(from);
  }

  inline PlayerInBattle& operator=(const PlayerInBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInBattle& operator=(PlayerInBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInBattle* internal_default_instance() {
    return reinterpret_cast<const PlayerInBattle*>(
               &_PlayerInBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerInBattle& a, PlayerInBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInBattle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInBattle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInBattle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInBattle& from) {
    PlayerInBattle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInBattle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.carousel.internal.PlayerInBattle";
  }
  protected:
  explicit PlayerInBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
  };
  // string near_id = 1;
  void clear_near_id();
  const std::string& near_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_id();
  PROTOBUF_NODISCARD std::string* release_near_id();
  void set_allocated_near_id(std::string* near_id);
  private:
  const std::string& _internal_near_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_id(const std::string& value);
  std::string* _internal_mutable_near_id();
  public:

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.carousel.internal.PlayerInBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalCarousel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CarouselRequests

// .game.battlemon.carousel.internal.InternalPlayer new_player = 1;
inline bool CarouselRequests::_internal_has_new_player() const {
  return request_case() == kNewPlayer;
}
inline bool CarouselRequests::has_new_player() const {
  return _internal_has_new_player();
}
inline void CarouselRequests::set_has_new_player() {
  _impl_._oneof_case_[0] = kNewPlayer;
}
inline void CarouselRequests::clear_new_player() {
  if (_internal_has_new_player()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.new_player_;
    }
    clear_has_request();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::release_new_player() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselRequests.new_player)
  if (_internal_has_new_player()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.new_player_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.new_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::_internal_new_player() const {
  return _internal_has_new_player()
      ? *_impl_.request_.new_player_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::new_player() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselRequests.new_player)
  return _internal_new_player();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::unsafe_arena_release_new_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselRequests.new_player)
  if (_internal_has_new_player()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.new_player_;
    _impl_.request_.new_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselRequests::unsafe_arena_set_allocated_new_player(::game::battlemon::carousel::internal::InternalPlayer* new_player) {
  clear_request();
  if (new_player) {
    set_has_new_player();
    _impl_.request_.new_player_ = new_player;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselRequests.new_player)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::_internal_mutable_new_player() {
  if (!_internal_has_new_player()) {
    clear_request();
    set_has_new_player();
    _impl_.request_.new_player_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.request_.new_player_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::mutable_new_player() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_new_player();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselRequests.new_player)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalRoomInfo new_room = 2;
inline bool CarouselRequests::_internal_has_new_room() const {
  return request_case() == kNewRoom;
}
inline bool CarouselRequests::has_new_room() const {
  return _internal_has_new_room();
}
inline void CarouselRequests::set_has_new_room() {
  _impl_._oneof_case_[0] = kNewRoom;
}
inline void CarouselRequests::clear_new_room() {
  if (_internal_has_new_room()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.new_room_;
    }
    clear_has_request();
  }
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::release_new_room() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselRequests.new_room)
  if (_internal_has_new_room()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.request_.new_room_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.new_room_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselRequests::_internal_new_room() const {
  return _internal_has_new_room()
      ? *_impl_.request_.new_room_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalRoomInfo&>(::game::battlemon::carousel::internal::_InternalRoomInfo_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselRequests::new_room() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselRequests.new_room)
  return _internal_new_room();
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::unsafe_arena_release_new_room() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselRequests.new_room)
  if (_internal_has_new_room()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.request_.new_room_;
    _impl_.request_.new_room_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselRequests::unsafe_arena_set_allocated_new_room(::game::battlemon::carousel::internal::InternalRoomInfo* new_room) {
  clear_request();
  if (new_room) {
    set_has_new_room();
    _impl_.request_.new_room_ = new_room;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselRequests.new_room)
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::_internal_mutable_new_room() {
  if (!_internal_has_new_room()) {
    clear_request();
    set_has_new_room();
    _impl_.request_.new_room_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalRoomInfo >(GetArenaForAllocation());
  }
  return _impl_.request_.new_room_;
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::mutable_new_room() {
  ::game::battlemon::carousel::internal::InternalRoomInfo* _msg = _internal_mutable_new_room();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselRequests.new_room)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalPlayer remove_player = 3;
inline bool CarouselRequests::_internal_has_remove_player() const {
  return request_case() == kRemovePlayer;
}
inline bool CarouselRequests::has_remove_player() const {
  return _internal_has_remove_player();
}
inline void CarouselRequests::set_has_remove_player() {
  _impl_._oneof_case_[0] = kRemovePlayer;
}
inline void CarouselRequests::clear_remove_player() {
  if (_internal_has_remove_player()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.remove_player_;
    }
    clear_has_request();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::release_remove_player() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselRequests.remove_player)
  if (_internal_has_remove_player()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.remove_player_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.remove_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::_internal_remove_player() const {
  return _internal_has_remove_player()
      ? *_impl_.request_.remove_player_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::remove_player() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselRequests.remove_player)
  return _internal_remove_player();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::unsafe_arena_release_remove_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselRequests.remove_player)
  if (_internal_has_remove_player()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.remove_player_;
    _impl_.request_.remove_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselRequests::unsafe_arena_set_allocated_remove_player(::game::battlemon::carousel::internal::InternalPlayer* remove_player) {
  clear_request();
  if (remove_player) {
    set_has_remove_player();
    _impl_.request_.remove_player_ = remove_player;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselRequests.remove_player)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::_internal_mutable_remove_player() {
  if (!_internal_has_remove_player()) {
    clear_request();
    set_has_remove_player();
    _impl_.request_.remove_player_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.request_.remove_player_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::mutable_remove_player() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_remove_player();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselRequests.remove_player)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalRoomInfo room_finished = 4;
inline bool CarouselRequests::_internal_has_room_finished() const {
  return request_case() == kRoomFinished;
}
inline bool CarouselRequests::has_room_finished() const {
  return _internal_has_room_finished();
}
inline void CarouselRequests::set_has_room_finished() {
  _impl_._oneof_case_[0] = kRoomFinished;
}
inline void CarouselRequests::clear_room_finished() {
  if (_internal_has_room_finished()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.room_finished_;
    }
    clear_has_request();
  }
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::release_room_finished() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselRequests.room_finished)
  if (_internal_has_room_finished()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.request_.room_finished_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.room_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselRequests::_internal_room_finished() const {
  return _internal_has_room_finished()
      ? *_impl_.request_.room_finished_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalRoomInfo&>(::game::battlemon::carousel::internal::_InternalRoomInfo_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselRequests::room_finished() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselRequests.room_finished)
  return _internal_room_finished();
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::unsafe_arena_release_room_finished() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselRequests.room_finished)
  if (_internal_has_room_finished()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.request_.room_finished_;
    _impl_.request_.room_finished_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselRequests::unsafe_arena_set_allocated_room_finished(::game::battlemon::carousel::internal::InternalRoomInfo* room_finished) {
  clear_request();
  if (room_finished) {
    set_has_room_finished();
    _impl_.request_.room_finished_ = room_finished;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselRequests.room_finished)
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::_internal_mutable_room_finished() {
  if (!_internal_has_room_finished()) {
    clear_request();
    set_has_room_finished();
    _impl_.request_.room_finished_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalRoomInfo >(GetArenaForAllocation());
  }
  return _impl_.request_.room_finished_;
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselRequests::mutable_room_finished() {
  ::game::battlemon::carousel::internal::InternalRoomInfo* _msg = _internal_mutable_room_finished();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselRequests.room_finished)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalPlayer accept_game = 5;
inline bool CarouselRequests::_internal_has_accept_game() const {
  return request_case() == kAcceptGame;
}
inline bool CarouselRequests::has_accept_game() const {
  return _internal_has_accept_game();
}
inline void CarouselRequests::set_has_accept_game() {
  _impl_._oneof_case_[0] = kAcceptGame;
}
inline void CarouselRequests::clear_accept_game() {
  if (_internal_has_accept_game()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.request_.accept_game_;
    }
    clear_has_request();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::release_accept_game() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselRequests.accept_game)
  if (_internal_has_accept_game()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.accept_game_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.request_.accept_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::_internal_accept_game() const {
  return _internal_has_accept_game()
      ? *_impl_.request_.accept_game_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselRequests::accept_game() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselRequests.accept_game)
  return _internal_accept_game();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::unsafe_arena_release_accept_game() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselRequests.accept_game)
  if (_internal_has_accept_game()) {
    clear_has_request();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.request_.accept_game_;
    _impl_.request_.accept_game_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselRequests::unsafe_arena_set_allocated_accept_game(::game::battlemon::carousel::internal::InternalPlayer* accept_game) {
  clear_request();
  if (accept_game) {
    set_has_accept_game();
    _impl_.request_.accept_game_ = accept_game;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselRequests.accept_game)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::_internal_mutable_accept_game() {
  if (!_internal_has_accept_game()) {
    clear_request();
    set_has_accept_game();
    _impl_.request_.accept_game_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.request_.accept_game_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselRequests::mutable_accept_game() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_accept_game();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselRequests.accept_game)
  return _msg;
}

inline bool CarouselRequests::has_request() const {
  return request_case() != REQUEST_NOT_SET;
}
inline void CarouselRequests::clear_has_request() {
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}
inline CarouselRequests::RequestCase CarouselRequests::request_case() const {
  return CarouselRequests::RequestCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// CarouselResponses

// .game.battlemon.carousel.internal.InternalRoomInfo room_ready = 1;
inline bool CarouselResponses::_internal_has_room_ready() const {
  return response_case() == kRoomReady;
}
inline bool CarouselResponses::has_room_ready() const {
  return _internal_has_room_ready();
}
inline void CarouselResponses::set_has_room_ready() {
  _impl_._oneof_case_[0] = kRoomReady;
}
inline void CarouselResponses::clear_room_ready() {
  if (_internal_has_room_ready()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.room_ready_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::release_room_ready() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.room_ready)
  if (_internal_has_room_ready()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.response_.room_ready_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.room_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselResponses::_internal_room_ready() const {
  return _internal_has_room_ready()
      ? *_impl_.response_.room_ready_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalRoomInfo&>(::game::battlemon::carousel::internal::_InternalRoomInfo_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselResponses::room_ready() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.room_ready)
  return _internal_room_ready();
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::unsafe_arena_release_room_ready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.room_ready)
  if (_internal_has_room_ready()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.response_.room_ready_;
    _impl_.response_.room_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_room_ready(::game::battlemon::carousel::internal::InternalRoomInfo* room_ready) {
  clear_response();
  if (room_ready) {
    set_has_room_ready();
    _impl_.response_.room_ready_ = room_ready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.room_ready)
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::_internal_mutable_room_ready() {
  if (!_internal_has_room_ready()) {
    clear_response();
    set_has_room_ready();
    _impl_.response_.room_ready_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalRoomInfo >(GetArenaForAllocation());
  }
  return _impl_.response_.room_ready_;
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::mutable_room_ready() {
  ::game::battlemon::carousel::internal::InternalRoomInfo* _msg = _internal_mutable_room_ready();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.room_ready)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalNewPlayer new_room_player = 2;
inline bool CarouselResponses::_internal_has_new_room_player() const {
  return response_case() == kNewRoomPlayer;
}
inline bool CarouselResponses::has_new_room_player() const {
  return _internal_has_new_room_player();
}
inline void CarouselResponses::set_has_new_room_player() {
  _impl_._oneof_case_[0] = kNewRoomPlayer;
}
inline void CarouselResponses::clear_new_room_player() {
  if (_internal_has_new_room_player()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.new_room_player_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalNewPlayer* CarouselResponses::release_new_room_player() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
  if (_internal_has_new_room_player()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalNewPlayer* temp = _impl_.response_.new_room_player_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.new_room_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalNewPlayer& CarouselResponses::_internal_new_room_player() const {
  return _internal_has_new_room_player()
      ? *_impl_.response_.new_room_player_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalNewPlayer&>(::game::battlemon::carousel::internal::_InternalNewPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalNewPlayer& CarouselResponses::new_room_player() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
  return _internal_new_room_player();
}
inline ::game::battlemon::carousel::internal::InternalNewPlayer* CarouselResponses::unsafe_arena_release_new_room_player() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
  if (_internal_has_new_room_player()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalNewPlayer* temp = _impl_.response_.new_room_player_;
    _impl_.response_.new_room_player_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_new_room_player(::game::battlemon::carousel::internal::InternalNewPlayer* new_room_player) {
  clear_response();
  if (new_room_player) {
    set_has_new_room_player();
    _impl_.response_.new_room_player_ = new_room_player;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
}
inline ::game::battlemon::carousel::internal::InternalNewPlayer* CarouselResponses::_internal_mutable_new_room_player() {
  if (!_internal_has_new_room_player()) {
    clear_response();
    set_has_new_room_player();
    _impl_.response_.new_room_player_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalNewPlayer >(GetArenaForAllocation());
  }
  return _impl_.response_.new_room_player_;
}
inline ::game::battlemon::carousel::internal::InternalNewPlayer* CarouselResponses::mutable_new_room_player() {
  ::game::battlemon::carousel::internal::InternalNewPlayer* _msg = _internal_mutable_new_room_player();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
  return _msg;
}

// .game.battlemon.carousel.internal.NeedUsersAccept need_users_accept = 3;
inline bool CarouselResponses::_internal_has_need_users_accept() const {
  return response_case() == kNeedUsersAccept;
}
inline bool CarouselResponses::has_need_users_accept() const {
  return _internal_has_need_users_accept();
}
inline void CarouselResponses::set_has_need_users_accept() {
  _impl_._oneof_case_[0] = kNeedUsersAccept;
}
inline void CarouselResponses::clear_need_users_accept() {
  if (_internal_has_need_users_accept()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.need_users_accept_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::NeedUsersAccept* CarouselResponses::release_need_users_accept() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
  if (_internal_has_need_users_accept()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::NeedUsersAccept* temp = _impl_.response_.need_users_accept_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.need_users_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::NeedUsersAccept& CarouselResponses::_internal_need_users_accept() const {
  return _internal_has_need_users_accept()
      ? *_impl_.response_.need_users_accept_
      : reinterpret_cast< ::game::battlemon::carousel::internal::NeedUsersAccept&>(::game::battlemon::carousel::internal::_NeedUsersAccept_default_instance_);
}
inline const ::game::battlemon::carousel::internal::NeedUsersAccept& CarouselResponses::need_users_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
  return _internal_need_users_accept();
}
inline ::game::battlemon::carousel::internal::NeedUsersAccept* CarouselResponses::unsafe_arena_release_need_users_accept() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
  if (_internal_has_need_users_accept()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::NeedUsersAccept* temp = _impl_.response_.need_users_accept_;
    _impl_.response_.need_users_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_need_users_accept(::game::battlemon::carousel::internal::NeedUsersAccept* need_users_accept) {
  clear_response();
  if (need_users_accept) {
    set_has_need_users_accept();
    _impl_.response_.need_users_accept_ = need_users_accept;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
}
inline ::game::battlemon::carousel::internal::NeedUsersAccept* CarouselResponses::_internal_mutable_need_users_accept() {
  if (!_internal_has_need_users_accept()) {
    clear_response();
    set_has_need_users_accept();
    _impl_.response_.need_users_accept_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::NeedUsersAccept >(GetArenaForAllocation());
  }
  return _impl_.response_.need_users_accept_;
}
inline ::game::battlemon::carousel::internal::NeedUsersAccept* CarouselResponses::mutable_need_users_accept() {
  ::game::battlemon::carousel::internal::NeedUsersAccept* _msg = _internal_mutable_need_users_accept();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalPlayer room_not_found = 4;
inline bool CarouselResponses::_internal_has_room_not_found() const {
  return response_case() == kRoomNotFound;
}
inline bool CarouselResponses::has_room_not_found() const {
  return _internal_has_room_not_found();
}
inline void CarouselResponses::set_has_room_not_found() {
  _impl_._oneof_case_[0] = kRoomNotFound;
}
inline void CarouselResponses::clear_room_not_found() {
  if (_internal_has_room_not_found()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.room_not_found_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::release_room_not_found() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
  if (_internal_has_room_not_found()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.room_not_found_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.room_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::_internal_room_not_found() const {
  return _internal_has_room_not_found()
      ? *_impl_.response_.room_not_found_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::room_not_found() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
  return _internal_room_not_found();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::unsafe_arena_release_room_not_found() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
  if (_internal_has_room_not_found()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.room_not_found_;
    _impl_.response_.room_not_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_room_not_found(::game::battlemon::carousel::internal::InternalPlayer* room_not_found) {
  clear_response();
  if (room_not_found) {
    set_has_room_not_found();
    _impl_.response_.room_not_found_ = room_not_found;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::_internal_mutable_room_not_found() {
  if (!_internal_has_room_not_found()) {
    clear_response();
    set_has_room_not_found();
    _impl_.response_.room_not_found_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.response_.room_not_found_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::mutable_room_not_found() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_room_not_found();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalRoomInfo accepting_canceled = 5;
inline bool CarouselResponses::_internal_has_accepting_canceled() const {
  return response_case() == kAcceptingCanceled;
}
inline bool CarouselResponses::has_accepting_canceled() const {
  return _internal_has_accepting_canceled();
}
inline void CarouselResponses::set_has_accepting_canceled() {
  _impl_._oneof_case_[0] = kAcceptingCanceled;
}
inline void CarouselResponses::clear_accepting_canceled() {
  if (_internal_has_accepting_canceled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.accepting_canceled_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::release_accepting_canceled() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
  if (_internal_has_accepting_canceled()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.response_.accepting_canceled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.accepting_canceled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselResponses::_internal_accepting_canceled() const {
  return _internal_has_accepting_canceled()
      ? *_impl_.response_.accepting_canceled_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalRoomInfo&>(::game::battlemon::carousel::internal::_InternalRoomInfo_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalRoomInfo& CarouselResponses::accepting_canceled() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
  return _internal_accepting_canceled();
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::unsafe_arena_release_accepting_canceled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
  if (_internal_has_accepting_canceled()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalRoomInfo* temp = _impl_.response_.accepting_canceled_;
    _impl_.response_.accepting_canceled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_accepting_canceled(::game::battlemon::carousel::internal::InternalRoomInfo* accepting_canceled) {
  clear_response();
  if (accepting_canceled) {
    set_has_accepting_canceled();
    _impl_.response_.accepting_canceled_ = accepting_canceled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::_internal_mutable_accepting_canceled() {
  if (!_internal_has_accepting_canceled()) {
    clear_response();
    set_has_accepting_canceled();
    _impl_.response_.accepting_canceled_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalRoomInfo >(GetArenaForAllocation());
  }
  return _impl_.response_.accepting_canceled_;
}
inline ::game::battlemon::carousel::internal::InternalRoomInfo* CarouselResponses::mutable_accepting_canceled() {
  ::game::battlemon::carousel::internal::InternalRoomInfo* _msg = _internal_mutable_accepting_canceled();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalPlayer player_in_queue = 6;
inline bool CarouselResponses::_internal_has_player_in_queue() const {
  return response_case() == kPlayerInQueue;
}
inline bool CarouselResponses::has_player_in_queue() const {
  return _internal_has_player_in_queue();
}
inline void CarouselResponses::set_has_player_in_queue() {
  _impl_._oneof_case_[0] = kPlayerInQueue;
}
inline void CarouselResponses::clear_player_in_queue() {
  if (_internal_has_player_in_queue()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.player_in_queue_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::release_player_in_queue() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
  if (_internal_has_player_in_queue()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.player_in_queue_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.player_in_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::_internal_player_in_queue() const {
  return _internal_has_player_in_queue()
      ? *_impl_.response_.player_in_queue_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::player_in_queue() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
  return _internal_player_in_queue();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::unsafe_arena_release_player_in_queue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
  if (_internal_has_player_in_queue()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.player_in_queue_;
    _impl_.response_.player_in_queue_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_player_in_queue(::game::battlemon::carousel::internal::InternalPlayer* player_in_queue) {
  clear_response();
  if (player_in_queue) {
    set_has_player_in_queue();
    _impl_.response_.player_in_queue_ = player_in_queue;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::_internal_mutable_player_in_queue() {
  if (!_internal_has_player_in_queue()) {
    clear_response();
    set_has_player_in_queue();
    _impl_.response_.player_in_queue_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.response_.player_in_queue_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::mutable_player_in_queue() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_player_in_queue();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
  return _msg;
}

// .game.battlemon.carousel.internal.PlayerInBattle player_in_battle = 7;
inline bool CarouselResponses::_internal_has_player_in_battle() const {
  return response_case() == kPlayerInBattle;
}
inline bool CarouselResponses::has_player_in_battle() const {
  return _internal_has_player_in_battle();
}
inline void CarouselResponses::set_has_player_in_battle() {
  _impl_._oneof_case_[0] = kPlayerInBattle;
}
inline void CarouselResponses::clear_player_in_battle() {
  if (_internal_has_player_in_battle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.player_in_battle_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::PlayerInBattle* CarouselResponses::release_player_in_battle() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
  if (_internal_has_player_in_battle()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::PlayerInBattle* temp = _impl_.response_.player_in_battle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.player_in_battle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::PlayerInBattle& CarouselResponses::_internal_player_in_battle() const {
  return _internal_has_player_in_battle()
      ? *_impl_.response_.player_in_battle_
      : reinterpret_cast< ::game::battlemon::carousel::internal::PlayerInBattle&>(::game::battlemon::carousel::internal::_PlayerInBattle_default_instance_);
}
inline const ::game::battlemon::carousel::internal::PlayerInBattle& CarouselResponses::player_in_battle() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
  return _internal_player_in_battle();
}
inline ::game::battlemon::carousel::internal::PlayerInBattle* CarouselResponses::unsafe_arena_release_player_in_battle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
  if (_internal_has_player_in_battle()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::PlayerInBattle* temp = _impl_.response_.player_in_battle_;
    _impl_.response_.player_in_battle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_player_in_battle(::game::battlemon::carousel::internal::PlayerInBattle* player_in_battle) {
  clear_response();
  if (player_in_battle) {
    set_has_player_in_battle();
    _impl_.response_.player_in_battle_ = player_in_battle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
}
inline ::game::battlemon::carousel::internal::PlayerInBattle* CarouselResponses::_internal_mutable_player_in_battle() {
  if (!_internal_has_player_in_battle()) {
    clear_response();
    set_has_player_in_battle();
    _impl_.response_.player_in_battle_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::PlayerInBattle >(GetArenaForAllocation());
  }
  return _impl_.response_.player_in_battle_;
}
inline ::game::battlemon::carousel::internal::PlayerInBattle* CarouselResponses::mutable_player_in_battle() {
  ::game::battlemon::carousel::internal::PlayerInBattle* _msg = _internal_mutable_player_in_battle();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
  return _msg;
}

// .game.battlemon.carousel.internal.InternalPlayer player_out_of_line = 8;
inline bool CarouselResponses::_internal_has_player_out_of_line() const {
  return response_case() == kPlayerOutOfLine;
}
inline bool CarouselResponses::has_player_out_of_line() const {
  return _internal_has_player_out_of_line();
}
inline void CarouselResponses::set_has_player_out_of_line() {
  _impl_._oneof_case_[0] = kPlayerOutOfLine;
}
inline void CarouselResponses::clear_player_out_of_line() {
  if (_internal_has_player_out_of_line()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.response_.player_out_of_line_;
    }
    clear_has_response();
  }
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::release_player_out_of_line() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
  if (_internal_has_player_out_of_line()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.player_out_of_line_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.response_.player_out_of_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::_internal_player_out_of_line() const {
  return _internal_has_player_out_of_line()
      ? *_impl_.response_.player_out_of_line_
      : reinterpret_cast< ::game::battlemon::carousel::internal::InternalPlayer&>(::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& CarouselResponses::player_out_of_line() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
  return _internal_player_out_of_line();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::unsafe_arena_release_player_out_of_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
  if (_internal_has_player_out_of_line()) {
    clear_has_response();
    ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.response_.player_out_of_line_;
    _impl_.response_.player_out_of_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CarouselResponses::unsafe_arena_set_allocated_player_out_of_line(::game::battlemon::carousel::internal::InternalPlayer* player_out_of_line) {
  clear_response();
  if (player_out_of_line) {
    set_has_player_out_of_line();
    _impl_.response_.player_out_of_line_ = player_out_of_line;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::_internal_mutable_player_out_of_line() {
  if (!_internal_has_player_out_of_line()) {
    clear_response();
    set_has_player_out_of_line();
    _impl_.response_.player_out_of_line_ = CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(GetArenaForAllocation());
  }
  return _impl_.response_.player_out_of_line_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* CarouselResponses::mutable_player_out_of_line() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_player_out_of_line();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
  return _msg;
}

inline bool CarouselResponses::has_response() const {
  return response_case() != RESPONSE_NOT_SET;
}
inline void CarouselResponses::clear_has_response() {
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}
inline CarouselResponses::ResponseCase CarouselResponses::response_case() const {
  return CarouselResponses::ResponseCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// NeedUsersAccept

// repeated string near_ids = 1;
inline int NeedUsersAccept::_internal_near_ids_size() const {
  return _impl_.near_ids_.size();
}
inline int NeedUsersAccept::near_ids_size() const {
  return _internal_near_ids_size();
}
inline void NeedUsersAccept::clear_near_ids() {
  _impl_.near_ids_.Clear();
}
inline std::string* NeedUsersAccept::add_near_ids() {
  std::string* _s = _internal_add_near_ids();
  // @@protoc_insertion_point(field_add_mutable:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
  return _s;
}
inline const std::string& NeedUsersAccept::_internal_near_ids(int index) const {
  return _impl_.near_ids_.Get(index);
}
inline const std::string& NeedUsersAccept::near_ids(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
  return _internal_near_ids(index);
}
inline std::string* NeedUsersAccept::mutable_near_ids(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
  return _impl_.near_ids_.Mutable(index);
}
inline void NeedUsersAccept::set_near_ids(int index, const std::string& value) {
  _impl_.near_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::set_near_ids(int index, std::string&& value) {
  _impl_.near_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::set_near_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.near_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::set_near_ids(int index, const char* value, size_t size) {
  _impl_.near_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline std::string* NeedUsersAccept::_internal_add_near_ids() {
  return _impl_.near_ids_.Add();
}
inline void NeedUsersAccept::add_near_ids(const std::string& value) {
  _impl_.near_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::add_near_ids(std::string&& value) {
  _impl_.near_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::add_near_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.near_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline void NeedUsersAccept::add_near_ids(const char* value, size_t size) {
  _impl_.near_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
NeedUsersAccept::near_ids() const {
  // @@protoc_insertion_point(field_list:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
  return _impl_.near_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
NeedUsersAccept::mutable_near_ids() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.carousel.internal.NeedUsersAccept.near_ids)
  return &_impl_.near_ids_;
}

// bool manual_accept = 2;
inline void NeedUsersAccept::clear_manual_accept() {
  _impl_.manual_accept_ = false;
}
inline bool NeedUsersAccept::_internal_manual_accept() const {
  return _impl_.manual_accept_;
}
inline bool NeedUsersAccept::manual_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.NeedUsersAccept.manual_accept)
  return _internal_manual_accept();
}
inline void NeedUsersAccept::_internal_set_manual_accept(bool value) {
  
  _impl_.manual_accept_ = value;
}
inline void NeedUsersAccept::set_manual_accept(bool value) {
  _internal_set_manual_accept(value);
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.NeedUsersAccept.manual_accept)
}

// int32 time_to_accept = 3;
inline void NeedUsersAccept::clear_time_to_accept() {
  _impl_.time_to_accept_ = 0;
}
inline int32_t NeedUsersAccept::_internal_time_to_accept() const {
  return _impl_.time_to_accept_;
}
inline int32_t NeedUsersAccept::time_to_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.NeedUsersAccept.time_to_accept)
  return _internal_time_to_accept();
}
inline void NeedUsersAccept::_internal_set_time_to_accept(int32_t value) {
  
  _impl_.time_to_accept_ = value;
}
inline void NeedUsersAccept::set_time_to_accept(int32_t value) {
  _internal_set_time_to_accept(value);
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.NeedUsersAccept.time_to_accept)
}

// -------------------------------------------------------------------

// InternalRoomInfo

// string room_id = 1;
inline void InternalRoomInfo::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& InternalRoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalRoomInfo.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalRoomInfo::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.InternalRoomInfo.room_id)
}
inline std::string* InternalRoomInfo::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalRoomInfo.room_id)
  return _s;
}
inline const std::string& InternalRoomInfo::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void InternalRoomInfo::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalRoomInfo::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalRoomInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalRoomInfo.room_id)
  return _impl_.room_id_.Release();
}
inline void InternalRoomInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalRoomInfo.room_id)
}

// .game.battlemon.mm.GameMode mode = 2;
inline bool InternalRoomInfo::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool InternalRoomInfo::has_mode() const {
  return _internal_has_mode();
}
inline const ::game::battlemon::mm::GameMode& InternalRoomInfo::_internal_mode() const {
  const ::game::battlemon::mm::GameMode* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::mm::GameMode&>(
      ::game::battlemon::mm::_GameMode_default_instance_);
}
inline const ::game::battlemon::mm::GameMode& InternalRoomInfo::mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalRoomInfo.mode)
  return _internal_mode();
}
inline void InternalRoomInfo::unsafe_arena_set_allocated_mode(
    ::game::battlemon::mm::GameMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.InternalRoomInfo.mode)
}
inline ::game::battlemon::mm::GameMode* InternalRoomInfo::release_mode() {
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::mm::GameMode* InternalRoomInfo::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalRoomInfo.mode)
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::game::battlemon::mm::GameMode* InternalRoomInfo::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::mm::GameMode>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::game::battlemon::mm::GameMode* InternalRoomInfo::mutable_mode() {
  ::game::battlemon::mm::GameMode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalRoomInfo.mode)
  return _msg;
}
inline void InternalRoomInfo::set_allocated_mode(::game::battlemon::mm::GameMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode));
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalRoomInfo.mode)
}

// repeated .game.battlemon.carousel.internal.InternalPlayer players = 3;
inline int InternalRoomInfo::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int InternalRoomInfo::players_size() const {
  return _internal_players_size();
}
inline void InternalRoomInfo::clear_players() {
  _impl_.players_.Clear();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalRoomInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalRoomInfo.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::carousel::internal::InternalPlayer >*
InternalRoomInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.carousel.internal.InternalRoomInfo.players)
  return &_impl_.players_;
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& InternalRoomInfo::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& InternalRoomInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalRoomInfo.players)
  return _internal_players(index);
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalRoomInfo::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalRoomInfo::add_players() {
  ::game::battlemon::carousel::internal::InternalPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:game.battlemon.carousel.internal.InternalRoomInfo.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::carousel::internal::InternalPlayer >&
InternalRoomInfo::players() const {
  // @@protoc_insertion_point(field_list:game.battlemon.carousel.internal.InternalRoomInfo.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// InternalNewPlayer

// string room_id = 1;
inline void InternalNewPlayer::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& InternalNewPlayer::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalNewPlayer.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalNewPlayer::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.InternalNewPlayer.room_id)
}
inline std::string* InternalNewPlayer::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalNewPlayer.room_id)
  return _s;
}
inline const std::string& InternalNewPlayer::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void InternalNewPlayer::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalNewPlayer::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalNewPlayer::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalNewPlayer.room_id)
  return _impl_.room_id_.Release();
}
inline void InternalNewPlayer::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalNewPlayer.room_id)
}

// .game.battlemon.carousel.internal.InternalPlayer player = 2;
inline bool InternalNewPlayer::_internal_has_player() const {
  return this != internal_default_instance() && _impl_.player_ != nullptr;
}
inline bool InternalNewPlayer::has_player() const {
  return _internal_has_player();
}
inline void InternalNewPlayer::clear_player() {
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& InternalNewPlayer::_internal_player() const {
  const ::game::battlemon::carousel::internal::InternalPlayer* p = _impl_.player_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::carousel::internal::InternalPlayer&>(
      ::game::battlemon::carousel::internal::_InternalPlayer_default_instance_);
}
inline const ::game::battlemon::carousel::internal::InternalPlayer& InternalNewPlayer::player() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalNewPlayer.player)
  return _internal_player();
}
inline void InternalNewPlayer::unsafe_arena_set_allocated_player(
    ::game::battlemon::carousel::internal::InternalPlayer* player) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.player_);
  }
  _impl_.player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.InternalNewPlayer.player)
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalNewPlayer::release_player() {
  
  ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalNewPlayer::unsafe_arena_release_player() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalNewPlayer.player)
  
  ::game::battlemon::carousel::internal::InternalPlayer* temp = _impl_.player_;
  _impl_.player_ = nullptr;
  return temp;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalNewPlayer::_internal_mutable_player() {
  
  if (_impl_.player_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::carousel::internal::InternalPlayer>(GetArenaForAllocation());
    _impl_.player_ = p;
  }
  return _impl_.player_;
}
inline ::game::battlemon::carousel::internal::InternalPlayer* InternalNewPlayer::mutable_player() {
  ::game::battlemon::carousel::internal::InternalPlayer* _msg = _internal_mutable_player();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalNewPlayer.player)
  return _msg;
}
inline void InternalNewPlayer::set_allocated_player(::game::battlemon::carousel::internal::InternalPlayer* player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.player_;
  }
  if (player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player);
    if (message_arena != submessage_arena) {
      player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.player_ = player;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalNewPlayer.player)
}

// -------------------------------------------------------------------

// InternalPlayer

// string near_id = 1;
inline void InternalPlayer::clear_near_id() {
  _impl_.near_id_.ClearToEmpty();
}
inline const std::string& InternalPlayer::near_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalPlayer.near_id)
  return _internal_near_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalPlayer::set_near_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.InternalPlayer.near_id)
}
inline std::string* InternalPlayer::mutable_near_id() {
  std::string* _s = _internal_mutable_near_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalPlayer.near_id)
  return _s;
}
inline const std::string& InternalPlayer::_internal_near_id() const {
  return _impl_.near_id_.Get();
}
inline void InternalPlayer::_internal_set_near_id(const std::string& value) {
  
  _impl_.near_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalPlayer::_internal_mutable_near_id() {
  
  return _impl_.near_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalPlayer::release_near_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalPlayer.near_id)
  return _impl_.near_id_.Release();
}
inline void InternalPlayer::set_allocated_near_id(std::string* near_id) {
  if (near_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_id_.SetAllocated(near_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_id_.IsDefault()) {
    _impl_.near_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalPlayer.near_id)
}

// .game.battlemon.mm.GameMode mode = 2;
inline bool InternalPlayer::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool InternalPlayer::has_mode() const {
  return _internal_has_mode();
}
inline const ::game::battlemon::mm::GameMode& InternalPlayer::_internal_mode() const {
  const ::game::battlemon::mm::GameMode* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::mm::GameMode&>(
      ::game::battlemon::mm::_GameMode_default_instance_);
}
inline const ::game::battlemon::mm::GameMode& InternalPlayer::mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalPlayer.mode)
  return _internal_mode();
}
inline void InternalPlayer::unsafe_arena_set_allocated_mode(
    ::game::battlemon::mm::GameMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.carousel.internal.InternalPlayer.mode)
}
inline ::game::battlemon::mm::GameMode* InternalPlayer::release_mode() {
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::mm::GameMode* InternalPlayer::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalPlayer.mode)
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::game::battlemon::mm::GameMode* InternalPlayer::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::mm::GameMode>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::game::battlemon::mm::GameMode* InternalPlayer::mutable_mode() {
  ::game::battlemon::mm::GameMode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalPlayer.mode)
  return _msg;
}
inline void InternalPlayer::set_allocated_mode(::game::battlemon::mm::GameMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode));
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalPlayer.mode)
}

// string lemon_id = 3;
inline void InternalPlayer::clear_lemon_id() {
  _impl_.lemon_id_.ClearToEmpty();
}
inline const std::string& InternalPlayer::lemon_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.InternalPlayer.lemon_id)
  return _internal_lemon_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalPlayer::set_lemon_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lemon_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.InternalPlayer.lemon_id)
}
inline std::string* InternalPlayer::mutable_lemon_id() {
  std::string* _s = _internal_mutable_lemon_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.InternalPlayer.lemon_id)
  return _s;
}
inline const std::string& InternalPlayer::_internal_lemon_id() const {
  return _impl_.lemon_id_.Get();
}
inline void InternalPlayer::_internal_set_lemon_id(const std::string& value) {
  
  _impl_.lemon_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalPlayer::_internal_mutable_lemon_id() {
  
  return _impl_.lemon_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalPlayer::release_lemon_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.InternalPlayer.lemon_id)
  return _impl_.lemon_id_.Release();
}
inline void InternalPlayer::set_allocated_lemon_id(std::string* lemon_id) {
  if (lemon_id != nullptr) {
    
  } else {
    
  }
  _impl_.lemon_id_.SetAllocated(lemon_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lemon_id_.IsDefault()) {
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.InternalPlayer.lemon_id)
}

// -------------------------------------------------------------------

// PlayerInBattle

// string near_id = 1;
inline void PlayerInBattle::clear_near_id() {
  _impl_.near_id_.ClearToEmpty();
}
inline const std::string& PlayerInBattle::near_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.PlayerInBattle.near_id)
  return _internal_near_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInBattle::set_near_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.PlayerInBattle.near_id)
}
inline std::string* PlayerInBattle::mutable_near_id() {
  std::string* _s = _internal_mutable_near_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.PlayerInBattle.near_id)
  return _s;
}
inline const std::string& PlayerInBattle::_internal_near_id() const {
  return _impl_.near_id_.Get();
}
inline void PlayerInBattle::_internal_set_near_id(const std::string& value) {
  
  _impl_.near_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInBattle::_internal_mutable_near_id() {
  
  return _impl_.near_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInBattle::release_near_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.PlayerInBattle.near_id)
  return _impl_.near_id_.Release();
}
inline void PlayerInBattle::set_allocated_near_id(std::string* near_id) {
  if (near_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_id_.SetAllocated(near_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_id_.IsDefault()) {
    _impl_.near_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.PlayerInBattle.near_id)
}

// string room_id = 2;
inline void PlayerInBattle::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& PlayerInBattle::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.carousel.internal.PlayerInBattle.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInBattle::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.carousel.internal.PlayerInBattle.room_id)
}
inline std::string* PlayerInBattle::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.carousel.internal.PlayerInBattle.room_id)
  return _s;
}
inline const std::string& PlayerInBattle::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void PlayerInBattle::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* PlayerInBattle::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* PlayerInBattle::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.carousel.internal.PlayerInBattle.room_id)
  return _impl_.room_id_.Release();
}
inline void PlayerInBattle::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.PlayerInBattle.room_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace carousel
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internalCarousel_2eproto
