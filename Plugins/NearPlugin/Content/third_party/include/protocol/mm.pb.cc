// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#include "mm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace mm {
PROTOBUF_CONSTEXPR GameMode::GameMode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.match_type_)*/0
  , /*decltype(_impl_.match_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GameModeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GameModeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GameModeDefaultTypeInternal() {}
  union {
    GameMode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GameModeDefaultTypeInternal _GameMode_default_instance_;
PROTOBUF_CONSTEXPR SearchGameRequest::SearchGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.game_mode_)*/nullptr
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchGameRequestDefaultTypeInternal() {}
  union {
    SearchGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchGameRequestDefaultTypeInternal _SearchGameRequest_default_instance_;
PROTOBUF_CONSTEXPR SearchGameResponse::SearchGameResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SearchGameResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SearchGameResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SearchGameResponseDefaultTypeInternal() {}
  union {
    SearchGameResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SearchGameResponseDefaultTypeInternal _SearchGameResponse_default_instance_;
PROTOBUF_CONSTEXPR AcceptGameRequest::AcceptGameRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lemon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AcceptGameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AcceptGameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AcceptGameRequestDefaultTypeInternal() {}
  union {
    AcceptGameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AcceptGameRequestDefaultTypeInternal _AcceptGameRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelSearchRequest::CancelSearchRequest(
    ::_pbi::ConstantInitialized) {}
struct CancelSearchRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelSearchRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelSearchRequestDefaultTypeInternal() {}
  union {
    CancelSearchRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelSearchRequestDefaultTypeInternal _CancelSearchRequest_default_instance_;
}  // namespace mm
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_mm_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_mm_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_mm_2eproto = nullptr;

const uint32_t TableStruct_mm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::GameMode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::GameMode, _impl_.match_type_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::GameMode, _impl_.match_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::SearchGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::SearchGameRequest, _impl_.game_mode_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::SearchGameRequest, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::SearchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::SearchGameResponse, _impl_.status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::AcceptGameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::AcceptGameRequest, _impl_.lemon_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::CancelSearchRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::mm::GameMode)},
  { 8, -1, -1, sizeof(::game::battlemon::mm::SearchGameRequest)},
  { 16, -1, -1, sizeof(::game::battlemon::mm::SearchGameResponse)},
  { 23, -1, -1, sizeof(::game::battlemon::mm::AcceptGameRequest)},
  { 30, -1, -1, sizeof(::game::battlemon::mm::CancelSearchRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::mm::_GameMode_default_instance_._instance,
  &::game::battlemon::mm::_SearchGameRequest_default_instance_._instance,
  &::game::battlemon::mm::_SearchGameResponse_default_instance_._instance,
  &::game::battlemon::mm::_AcceptGameRequest_default_instance_._instance,
  &::game::battlemon::mm::_CancelSearchRequest_default_instance_._instance,
};

const char descriptor_table_protodef_mm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\010mm.proto\022\021game.battlemon.mm\032\014common.pr"
  "oto\"n\n\010GameMode\0220\n\nmatch_type\030\001 \001(\0162\034.ga"
  "me.battlemon.mm.MatchType\0220\n\nmatch_mode\030"
  "\002 \001(\0162\034.game.battlemon.mm.MatchMode\"n\n\021S"
  "earchGameRequest\022.\n\tgame_mode\030\001 \001(\0132\033.ga"
  "me.battlemon.mm.GameMode\022)\n\006region\030\002 \001(\016"
  "2\031.game.battlemon.mm.Region\"Q\n\022SearchGam"
  "eResponse\022;\n\006status\030\001 \001(\0162+.game.battlem"
  "on.mm.SearchGameResponseStatus\"%\n\021Accept"
  "GameRequest\022\020\n\010lemon_id\030\001 \001(\t\"\025\n\023CancelS"
  "earchRequest*0\n\tMatchType\022\017\n\013DEATH_MATCH"
  "\020\000\022\022\n\016CATCH_THE_FLAG\020\001*1\n\tMatchMode\022\010\n\004N"
  "ONE\020\000\022\r\n\tEQUIPMENT\020\001\022\013\n\007REALISM\020\002*\030\n\006Reg"
  "ion\022\006\n\002US\020\000\022\006\n\002EU\020\001*\233\001\n\030SearchGameRespon"
  "seStatus\022\006\n\002OK\020\000\022\r\n\tNFT_ERROR\020\001\022\024\n\020ALREA"
  "DY_IN_QUEUE\020\002\022\025\n\021ALREADY_IN_BATTLE\020\003\022\022\n\016"
  "GAMEMODE_ERROR\020\004\022\023\n\017INVALID_REQUEST\020\005\022\022\n"
  "\016INTERNAL_ERROR\020\0062\216\002\n\tMMService\022Y\n\nSearc"
  "hGame\022$.game.battlemon.mm.SearchGameRequ"
  "est\032%.game.battlemon.mm.SearchGameRespon"
  "se\022P\n\nAcceptGame\022$.game.battlemon.mm.Acc"
  "eptGameRequest\032\034.game.battlemon.common.E"
  "mpty\022T\n\014CancelSearch\022&.game.battlemon.mm"
  ".CancelSearchRequest\032\034.game.battlemon.co"
  "mmon.EmptyB\nZ\010servicesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_mm_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_mm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_mm_2eproto = {
    false, false, 990, descriptor_table_protodef_mm_2eproto,
    "mm.proto",
    &descriptor_table_mm_2eproto_once, descriptor_table_mm_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_mm_2eproto::offsets,
    file_level_metadata_mm_2eproto, file_level_enum_descriptors_mm_2eproto,
    file_level_service_descriptors_mm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_mm_2eproto_getter() {
  return &descriptor_table_mm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_mm_2eproto(&descriptor_table_mm_2eproto);
namespace game {
namespace battlemon {
namespace mm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mm_2eproto);
  return file_level_enum_descriptors_mm_2eproto[0];
}
bool MatchType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mm_2eproto);
  return file_level_enum_descriptors_mm_2eproto[1];
}
bool MatchMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Region_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mm_2eproto);
  return file_level_enum_descriptors_mm_2eproto[2];
}
bool Region_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchGameResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_mm_2eproto);
  return file_level_enum_descriptors_mm_2eproto[3];
}
bool SearchGameResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GameMode::_Internal {
 public:
};

GameMode::GameMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.GameMode)
}
GameMode::GameMode(const GameMode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GameMode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.match_type_){}
    , decltype(_impl_.match_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.match_type_, &from._impl_.match_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.match_mode_) -
    reinterpret_cast<char*>(&_impl_.match_type_)) + sizeof(_impl_.match_mode_));
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.GameMode)
}

inline void GameMode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.match_type_){0}
    , decltype(_impl_.match_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GameMode::~GameMode() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.GameMode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GameMode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GameMode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GameMode::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.GameMode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.match_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.match_mode_) -
      reinterpret_cast<char*>(&_impl_.match_type_)) + sizeof(_impl_.match_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GameMode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.mm.MatchType match_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_type(static_cast<::game::battlemon::mm::MatchType>(val));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.MatchMode match_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_match_mode(static_cast<::game::battlemon::mm::MatchMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GameMode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.GameMode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.mm.MatchType match_type = 1;
  if (this->_internal_match_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_match_type(), target);
  }

  // .game.battlemon.mm.MatchMode match_mode = 2;
  if (this->_internal_match_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_match_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.GameMode)
  return target;
}

size_t GameMode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.GameMode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.battlemon.mm.MatchType match_type = 1;
  if (this->_internal_match_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_type());
  }

  // .game.battlemon.mm.MatchMode match_mode = 2;
  if (this->_internal_match_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_match_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GameMode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GameMode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GameMode::GetClassData() const { return &_class_data_; }


void GameMode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GameMode*>(&to_msg);
  auto& from = static_cast<const GameMode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.GameMode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_match_type() != 0) {
    _this->_internal_set_match_type(from._internal_match_type());
  }
  if (from._internal_match_mode() != 0) {
    _this->_internal_set_match_mode(from._internal_match_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GameMode::CopyFrom(const GameMode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.GameMode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMode::IsInitialized() const {
  return true;
}

void GameMode::InternalSwap(GameMode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GameMode, _impl_.match_mode_)
      + sizeof(GameMode::_impl_.match_mode_)
      - PROTOBUF_FIELD_OFFSET(GameMode, _impl_.match_type_)>(
          reinterpret_cast<char*>(&_impl_.match_type_),
          reinterpret_cast<char*>(&other->_impl_.match_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GameMode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mm_2eproto_getter, &descriptor_table_mm_2eproto_once,
      file_level_metadata_mm_2eproto[0]);
}

// ===================================================================

class SearchGameRequest::_Internal {
 public:
  static const ::game::battlemon::mm::GameMode& game_mode(const SearchGameRequest* msg);
};

const ::game::battlemon::mm::GameMode&
SearchGameRequest::_Internal::game_mode(const SearchGameRequest* msg) {
  return *msg->_impl_.game_mode_;
}
SearchGameRequest::SearchGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.SearchGameRequest)
}
SearchGameRequest::SearchGameRequest(const SearchGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.game_mode_){nullptr}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_game_mode()) {
    _this->_impl_.game_mode_ = new ::game::battlemon::mm::GameMode(*from._impl_.game_mode_);
  }
  _this->_impl_.region_ = from._impl_.region_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.SearchGameRequest)
}

inline void SearchGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.game_mode_){nullptr}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchGameRequest::~SearchGameRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.SearchGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.game_mode_;
}

void SearchGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.SearchGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.game_mode_ != nullptr) {
    delete _impl_.game_mode_;
  }
  _impl_.game_mode_ = nullptr;
  _impl_.region_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.mm.GameMode game_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_game_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.Region region = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::game::battlemon::mm::Region>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.SearchGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.mm.GameMode game_mode = 1;
  if (this->_internal_has_game_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::game_mode(this),
        _Internal::game_mode(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.mm.Region region = 2;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.SearchGameRequest)
  return target;
}

size_t SearchGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.SearchGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.battlemon.mm.GameMode game_mode = 1;
  if (this->_internal_has_game_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.game_mode_);
  }

  // .game.battlemon.mm.Region region = 2;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchGameRequest::GetClassData() const { return &_class_data_; }


void SearchGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchGameRequest*>(&to_msg);
  auto& from = static_cast<const SearchGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.SearchGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_game_mode()) {
    _this->_internal_mutable_game_mode()->::game::battlemon::mm::GameMode::MergeFrom(
        from._internal_game_mode());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchGameRequest::CopyFrom(const SearchGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.SearchGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGameRequest::IsInitialized() const {
  return true;
}

void SearchGameRequest::InternalSwap(SearchGameRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SearchGameRequest, _impl_.region_)
      + sizeof(SearchGameRequest::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(SearchGameRequest, _impl_.game_mode_)>(
          reinterpret_cast<char*>(&_impl_.game_mode_),
          reinterpret_cast<char*>(&other->_impl_.game_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mm_2eproto_getter, &descriptor_table_mm_2eproto_once,
      file_level_metadata_mm_2eproto[1]);
}

// ===================================================================

class SearchGameResponse::_Internal {
 public:
};

SearchGameResponse::SearchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.SearchGameResponse)
}
SearchGameResponse::SearchGameResponse(const SearchGameResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SearchGameResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.SearchGameResponse)
}

inline void SearchGameResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SearchGameResponse::~SearchGameResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.SearchGameResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SearchGameResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SearchGameResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SearchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.SearchGameResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SearchGameResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.mm.SearchGameResponseStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::game::battlemon::mm::SearchGameResponseStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SearchGameResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.SearchGameResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.mm.SearchGameResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.SearchGameResponse)
  return target;
}

size_t SearchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.SearchGameResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.battlemon.mm.SearchGameResponseStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SearchGameResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SearchGameResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SearchGameResponse::GetClassData() const { return &_class_data_; }


void SearchGameResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SearchGameResponse*>(&to_msg);
  auto& from = static_cast<const SearchGameResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.SearchGameResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SearchGameResponse::CopyFrom(const SearchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.SearchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchGameResponse::IsInitialized() const {
  return true;
}

void SearchGameResponse::InternalSwap(SearchGameResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SearchGameResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mm_2eproto_getter, &descriptor_table_mm_2eproto_once,
      file_level_metadata_mm_2eproto[2]);
}

// ===================================================================

class AcceptGameRequest::_Internal {
 public:
};

AcceptGameRequest::AcceptGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.AcceptGameRequest)
}
AcceptGameRequest::AcceptGameRequest(const AcceptGameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AcceptGameRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lemon_id().empty()) {
    _this->_impl_.lemon_id_.Set(from._internal_lemon_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.AcceptGameRequest)
}

inline void AcceptGameRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AcceptGameRequest::~AcceptGameRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.AcceptGameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AcceptGameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lemon_id_.Destroy();
}

void AcceptGameRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AcceptGameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.AcceptGameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lemon_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AcceptGameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string lemon_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_lemon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.AcceptGameRequest.lemon_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AcceptGameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.AcceptGameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string lemon_id = 1;
  if (!this->_internal_lemon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lemon_id().data(), static_cast<int>(this->_internal_lemon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.AcceptGameRequest.lemon_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_lemon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.AcceptGameRequest)
  return target;
}

size_t AcceptGameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.AcceptGameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lemon_id = 1;
  if (!this->_internal_lemon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lemon_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AcceptGameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AcceptGameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AcceptGameRequest::GetClassData() const { return &_class_data_; }


void AcceptGameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AcceptGameRequest*>(&to_msg);
  auto& from = static_cast<const AcceptGameRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.AcceptGameRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lemon_id().empty()) {
    _this->_internal_set_lemon_id(from._internal_lemon_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AcceptGameRequest::CopyFrom(const AcceptGameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.AcceptGameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptGameRequest::IsInitialized() const {
  return true;
}

void AcceptGameRequest::InternalSwap(AcceptGameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lemon_id_, lhs_arena,
      &other->_impl_.lemon_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AcceptGameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mm_2eproto_getter, &descriptor_table_mm_2eproto_once,
      file_level_metadata_mm_2eproto[3]);
}

// ===================================================================

class CancelSearchRequest::_Internal {
 public:
};

CancelSearchRequest::CancelSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.CancelSearchRequest)
}
CancelSearchRequest::CancelSearchRequest(const CancelSearchRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CancelSearchRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.CancelSearchRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelSearchRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelSearchRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelSearchRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_mm_2eproto_getter, &descriptor_table_mm_2eproto_once,
      file_level_metadata_mm_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mm
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::GameMode*
Arena::CreateMaybeMessage< ::game::battlemon::mm::GameMode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::GameMode >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::SearchGameRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::SearchGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::SearchGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::SearchGameResponse*
Arena::CreateMaybeMessage< ::game::battlemon::mm::SearchGameResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::SearchGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::AcceptGameRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::AcceptGameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::AcceptGameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::CancelSearchRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::CancelSearchRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::CancelSearchRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
