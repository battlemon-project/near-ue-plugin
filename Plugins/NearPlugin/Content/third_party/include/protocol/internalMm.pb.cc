// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalMm.proto

#include "internalMm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace mm {
namespace internal {
PROTOBUF_CONSTEXPR InternalUserLeftBattleRequest::InternalUserLeftBattleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_accident_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalUserLeftBattleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalUserLeftBattleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalUserLeftBattleRequestDefaultTypeInternal() {}
  union {
    InternalUserLeftBattleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalUserLeftBattleRequestDefaultTypeInternal _InternalUserLeftBattleRequest_default_instance_;
PROTOBUF_CONSTEXPR SaveBattleResultRequest::SaveBattleResultRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ott_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveBattleResultRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveBattleResultRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveBattleResultRequestDefaultTypeInternal() {}
  union {
    SaveBattleResultRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveBattleResultRequestDefaultTypeInternal _SaveBattleResultRequest_default_instance_;
PROTOBUF_CONSTEXPR InternalPlayerResult::InternalPlayerResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.place_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalPlayerResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalPlayerResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalPlayerResultDefaultTypeInternal() {}
  union {
    InternalPlayerResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalPlayerResultDefaultTypeInternal _InternalPlayerResult_default_instance_;
PROTOBUF_CONSTEXPR RoomInfoRequest::RoomInfoRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ott_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoRequestDefaultTypeInternal() {}
  union {
    RoomInfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoRequestDefaultTypeInternal _RoomInfoRequest_default_instance_;
PROTOBUF_CONSTEXPR RoomInfoResponse::RoomInfoResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoResponseDefaultTypeInternal() {}
  union {
    RoomInfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoResponseDefaultTypeInternal _RoomInfoResponse_default_instance_;
PROTOBUF_CONSTEXPR RoomPlayerInfo::RoomPlayerInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lemon_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomPlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomPlayerInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomPlayerInfoDefaultTypeInternal() {}
  union {
    RoomPlayerInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomPlayerInfoDefaultTypeInternal _RoomPlayerInfo_default_instance_;
PROTOBUF_CONSTEXPR CreateRoomRequest::CreateRoomRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_ids_)*/{}
  , /*decltype(_impl_.prev_room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ott_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateRoomRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRoomRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRoomRequestDefaultTypeInternal() {}
  union {
    CreateRoomRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
PROTOBUF_CONSTEXPR DedicatedServerIsReadyRequest::DedicatedServerIsReadyRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.ott_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DedicatedServerIsReadyRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DedicatedServerIsReadyRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DedicatedServerIsReadyRequestDefaultTypeInternal() {}
  union {
    DedicatedServerIsReadyRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DedicatedServerIsReadyRequestDefaultTypeInternal _DedicatedServerIsReadyRequest_default_instance_;
}  // namespace internal
}  // namespace mm
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_internalMm_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_internalMm_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internalMm_2eproto = nullptr;

const uint32_t TableStruct_internalMm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalUserLeftBattleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalUserLeftBattleRequest, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalUserLeftBattleRequest, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalUserLeftBattleRequest, _impl_.is_accident_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::SaveBattleResultRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::SaveBattleResultRequest, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::SaveBattleResultRequest, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::SaveBattleResultRequest, _impl_.ott_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalPlayerResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalPlayerResult, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::InternalPlayerResult, _impl_.place_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoRequest, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoRequest, _impl_.ott_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoResponse, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoResponse, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomInfoResponse, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomPlayerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomPlayerInfo, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::RoomPlayerInfo, _impl_.lemon_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::CreateRoomRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::CreateRoomRequest, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::CreateRoomRequest, _impl_.near_ids_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::CreateRoomRequest, _impl_.prev_room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::CreateRoomRequest, _impl_.ott_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, _impl_.ott_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::mm::internal::InternalUserLeftBattleRequest)},
  { 9, -1, -1, sizeof(::game::battlemon::mm::internal::SaveBattleResultRequest)},
  { 18, -1, -1, sizeof(::game::battlemon::mm::internal::InternalPlayerResult)},
  { 26, -1, -1, sizeof(::game::battlemon::mm::internal::RoomInfoRequest)},
  { 34, -1, -1, sizeof(::game::battlemon::mm::internal::RoomInfoResponse)},
  { 43, -1, -1, sizeof(::game::battlemon::mm::internal::RoomPlayerInfo)},
  { 51, -1, -1, sizeof(::game::battlemon::mm::internal::CreateRoomRequest)},
  { 61, -1, -1, sizeof(::game::battlemon::mm::internal::DedicatedServerIsReadyRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::mm::internal::_InternalUserLeftBattleRequest_default_instance_._instance,
  &::game::battlemon::mm::internal::_SaveBattleResultRequest_default_instance_._instance,
  &::game::battlemon::mm::internal::_InternalPlayerResult_default_instance_._instance,
  &::game::battlemon::mm::internal::_RoomInfoRequest_default_instance_._instance,
  &::game::battlemon::mm::internal::_RoomInfoResponse_default_instance_._instance,
  &::game::battlemon::mm::internal::_RoomPlayerInfo_default_instance_._instance,
  &::game::battlemon::mm::internal::_CreateRoomRequest_default_instance_._instance,
  &::game::battlemon::mm::internal::_DedicatedServerIsReadyRequest_default_instance_._instance,
};

const char descriptor_table_protodef_internalMm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020internalMm.proto\022\032game.battlemon.mm.in"
  "ternal\032\010mm.proto\032\014common.proto\032\013items.pr"
  "oto\"V\n\035InternalUserLeftBattleRequest\022\017\n\007"
  "near_id\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\t\022\023\n\013is_acc"
  "ident\030\003 \001(\010\"z\n\027SaveBattleResultRequest\022\017"
  "\n\007room_id\030\001 \001(\t\022A\n\007results\030\002 \003(\01320.game."
  "battlemon.mm.internal.InternalPlayerResu"
  "lt\022\013\n\003ott\030\003 \001(\t\"6\n\024InternalPlayerResult\022"
  "\017\n\007near_id\030\001 \001(\t\022\r\n\005place\030\002 \001(\005\"/\n\017RoomI"
  "nfoRequest\022\017\n\007room_id\030\001 \001(\t\022\013\n\003ott\030\002 \001(\t"
  "\"\213\001\n\020RoomInfoResponse\022\017\n\007room_id\030\001 \001(\t\022)"
  "\n\004mode\030\002 \001(\0132\033.game.battlemon.mm.GameMod"
  "e\022;\n\007players\030\003 \003(\0132*.game.battlemon.mm.i"
  "nternal.RoomPlayerInfo\"L\n\016RoomPlayerInfo"
  "\022\017\n\007near_id\030\001 \001(\t\022)\n\005lemon\030\002 \001(\0132\032.game."
  "battlemon.items.Item\"s\n\021CreateRoomReques"
  "t\022)\n\004mode\030\001 \001(\0132\033.game.battlemon.mm.Game"
  "Mode\022\020\n\010near_ids\030\002 \003(\t\022\024\n\014prev_room_id\030\003"
  " \001(\t\022\013\n\003ott\030\004 \001(\t\"=\n\035DedicatedServerIsRe"
  "adyRequest\022\017\n\007room_id\030\001 \001(\t\022\013\n\003ott\030\002 \001(\t"
  "2\270\004\n\021InternalMMService\022i\n\016UserLeftBattle"
  "\0229.game.battlemon.mm.internal.InternalUs"
  "erLeftBattleRequest\032\034.game.battlemon.com"
  "mon.Empty\022e\n\020SaveBattleResult\0223.game.bat"
  "tlemon.mm.internal.SaveBattleResultReque"
  "st\032\034.game.battlemon.common.Empty\022h\n\013GetR"
  "oomInfo\022+.game.battlemon.mm.internal.Roo"
  "mInfoRequest\032,.game.battlemon.mm.interna"
  "l.RoomInfoResponse\022t\n\025CreateRoomWithPlay"
  "ers\022-.game.battlemon.mm.internal.CreateR"
  "oomRequest\032,.game.battlemon.mm.internal."
  "RoomInfoResponse\022q\n\026DedicatedServerIsRea"
  "dy\0229.game.battlemon.mm.internal.Dedicate"
  "dServerIsReadyRequest\032\034.game.battlemon.c"
  "ommon.EmptyB\nZ\010servicesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_internalMm_2eproto_deps[3] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_items_2eproto,
  &::descriptor_table_mm_2eproto,
};
static ::_pbi::once_flag descriptor_table_internalMm_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internalMm_2eproto = {
    false, false, 1391, descriptor_table_protodef_internalMm_2eproto,
    "internalMm.proto",
    &descriptor_table_internalMm_2eproto_once, descriptor_table_internalMm_2eproto_deps, 3, 8,
    schemas, file_default_instances, TableStruct_internalMm_2eproto::offsets,
    file_level_metadata_internalMm_2eproto, file_level_enum_descriptors_internalMm_2eproto,
    file_level_service_descriptors_internalMm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internalMm_2eproto_getter() {
  return &descriptor_table_internalMm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internalMm_2eproto(&descriptor_table_internalMm_2eproto);
namespace game {
namespace battlemon {
namespace mm {
namespace internal {

// ===================================================================

class InternalUserLeftBattleRequest::_Internal {
 public:
};

InternalUserLeftBattleRequest::InternalUserLeftBattleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
}
InternalUserLeftBattleRequest::InternalUserLeftBattleRequest(const InternalUserLeftBattleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalUserLeftBattleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.is_accident_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_accident_ = from._impl_.is_accident_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
}

inline void InternalUserLeftBattleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.is_accident_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalUserLeftBattleRequest::~InternalUserLeftBattleRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalUserLeftBattleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  _impl_.room_id_.Destroy();
}

void InternalUserLeftBattleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalUserLeftBattleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  _impl_.room_id_.ClearToEmpty();
  _impl_.is_accident_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalUserLeftBattleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.InternalUserLeftBattleRequest.near_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_accident = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_accident_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalUserLeftBattleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.InternalUserLeftBattleRequest.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  // bool is_accident = 3;
  if (this->_internal_is_accident() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_accident(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  return target;
}

size_t InternalUserLeftBattleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // bool is_accident = 3;
  if (this->_internal_is_accident() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalUserLeftBattleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalUserLeftBattleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalUserLeftBattleRequest::GetClassData() const { return &_class_data_; }


void InternalUserLeftBattleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalUserLeftBattleRequest*>(&to_msg);
  auto& from = static_cast<const InternalUserLeftBattleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_is_accident() != 0) {
    _this->_internal_set_is_accident(from._internal_is_accident());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalUserLeftBattleRequest::CopyFrom(const InternalUserLeftBattleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalUserLeftBattleRequest::IsInitialized() const {
  return true;
}

void InternalUserLeftBattleRequest::InternalSwap(InternalUserLeftBattleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  swap(_impl_.is_accident_, other->_impl_.is_accident_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalUserLeftBattleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[0]);
}

// ===================================================================

class SaveBattleResultRequest::_Internal {
 public:
};

SaveBattleResultRequest::SaveBattleResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.SaveBattleResultRequest)
}
SaveBattleResultRequest::SaveBattleResultRequest(const SaveBattleResultRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveBattleResultRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ott().empty()) {
    _this->_impl_.ott_.Set(from._internal_ott(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.SaveBattleResultRequest)
}

inline void SaveBattleResultRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveBattleResultRequest::~SaveBattleResultRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.SaveBattleResultRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveBattleResultRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.room_id_.Destroy();
  _impl_.ott_.Destroy();
}

void SaveBattleResultRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveBattleResultRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.SaveBattleResultRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.room_id_.ClearToEmpty();
  _impl_.ott_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveBattleResultRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.SaveBattleResultRequest.room_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.mm.internal.InternalPlayerResult results = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string ott = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ott();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.SaveBattleResultRequest.ott"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveBattleResultRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.SaveBattleResultRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.SaveBattleResultRequest.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // repeated .game.battlemon.mm.internal.InternalPlayerResult results = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string ott = 3;
  if (!this->_internal_ott().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ott().data(), static_cast<int>(this->_internal_ott().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.SaveBattleResultRequest.ott");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ott(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.SaveBattleResultRequest)
  return target;
}

size_t SaveBattleResultRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.SaveBattleResultRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.mm.internal.InternalPlayerResult results = 2;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string ott = 3;
  if (!this->_internal_ott().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ott());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveBattleResultRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveBattleResultRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveBattleResultRequest::GetClassData() const { return &_class_data_; }


void SaveBattleResultRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveBattleResultRequest*>(&to_msg);
  auto& from = static_cast<const SaveBattleResultRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.SaveBattleResultRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_ott().empty()) {
    _this->_internal_set_ott(from._internal_ott());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveBattleResultRequest::CopyFrom(const SaveBattleResultRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.SaveBattleResultRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveBattleResultRequest::IsInitialized() const {
  return true;
}

void SaveBattleResultRequest::InternalSwap(SaveBattleResultRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ott_, lhs_arena,
      &other->_impl_.ott_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveBattleResultRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[1]);
}

// ===================================================================

class InternalPlayerResult::_Internal {
 public:
};

InternalPlayerResult::InternalPlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.InternalPlayerResult)
}
InternalPlayerResult::InternalPlayerResult(const InternalPlayerResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalPlayerResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.place_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.place_ = from._impl_.place_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.InternalPlayerResult)
}

inline void InternalPlayerResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.place_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalPlayerResult::~InternalPlayerResult() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.InternalPlayerResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalPlayerResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
}

void InternalPlayerResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalPlayerResult::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.InternalPlayerResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  _impl_.place_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalPlayerResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.InternalPlayerResult.near_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 place = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.place_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalPlayerResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.InternalPlayerResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.InternalPlayerResult.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // int32 place = 2;
  if (this->_internal_place() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_place(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.InternalPlayerResult)
  return target;
}

size_t InternalPlayerResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.InternalPlayerResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // int32 place = 2;
  if (this->_internal_place() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_place());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalPlayerResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalPlayerResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalPlayerResult::GetClassData() const { return &_class_data_; }


void InternalPlayerResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalPlayerResult*>(&to_msg);
  auto& from = static_cast<const InternalPlayerResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.InternalPlayerResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (from._internal_place() != 0) {
    _this->_internal_set_place(from._internal_place());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalPlayerResult::CopyFrom(const InternalPlayerResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.InternalPlayerResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPlayerResult::IsInitialized() const {
  return true;
}

void InternalPlayerResult::InternalSwap(InternalPlayerResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  swap(_impl_.place_, other->_impl_.place_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalPlayerResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[2]);
}

// ===================================================================

class RoomInfoRequest::_Internal {
 public:
};

RoomInfoRequest::RoomInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.RoomInfoRequest)
}
RoomInfoRequest::RoomInfoRequest(const RoomInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfoRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ott().empty()) {
    _this->_impl_.ott_.Set(from._internal_ott(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.RoomInfoRequest)
}

inline void RoomInfoRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfoRequest::~RoomInfoRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.RoomInfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.Destroy();
  _impl_.ott_.Destroy();
}

void RoomInfoRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.RoomInfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.ClearToEmpty();
  _impl_.ott_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.RoomInfoRequest.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string ott = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ott();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.RoomInfoRequest.ott"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.RoomInfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.RoomInfoRequest.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // string ott = 2;
  if (!this->_internal_ott().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ott().data(), static_cast<int>(this->_internal_ott().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.RoomInfoRequest.ott");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ott(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.RoomInfoRequest)
  return target;
}

size_t RoomInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.RoomInfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string ott = 2;
  if (!this->_internal_ott().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ott());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfoRequest::GetClassData() const { return &_class_data_; }


void RoomInfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfoRequest*>(&to_msg);
  auto& from = static_cast<const RoomInfoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.RoomInfoRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_ott().empty()) {
    _this->_internal_set_ott(from._internal_ott());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfoRequest::CopyFrom(const RoomInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.RoomInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoRequest::IsInitialized() const {
  return true;
}

void RoomInfoRequest::InternalSwap(RoomInfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ott_, lhs_arena,
      &other->_impl_.ott_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[3]);
}

// ===================================================================

class RoomInfoResponse::_Internal {
 public:
  static const ::game::battlemon::mm::GameMode& mode(const RoomInfoResponse* msg);
};

const ::game::battlemon::mm::GameMode&
RoomInfoResponse::_Internal::mode(const RoomInfoResponse* msg) {
  return *msg->_impl_.mode_;
}
void RoomInfoResponse::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
RoomInfoResponse::RoomInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.RoomInfoResponse)
}
RoomInfoResponse::RoomInfoResponse(const RoomInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfoResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.mode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::game::battlemon::mm::GameMode(*from._impl_.mode_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.RoomInfoResponse)
}

inline void RoomInfoResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.mode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfoResponse::~RoomInfoResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.RoomInfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.room_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mode_;
}

void RoomInfoResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.RoomInfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.RoomInfoResponse.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.GameMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.mm.internal.RoomPlayerInfo players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.RoomInfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.RoomInfoResponse.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // repeated .game.battlemon.mm.internal.RoomPlayerInfo players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.RoomInfoResponse)
  return target;
}

size_t RoomInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.RoomInfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.mm.internal.RoomPlayerInfo players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfoResponse::GetClassData() const { return &_class_data_; }


void RoomInfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfoResponse*>(&to_msg);
  auto& from = static_cast<const RoomInfoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.RoomInfoResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::game::battlemon::mm::GameMode::MergeFrom(
        from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfoResponse::CopyFrom(const RoomInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.RoomInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfoResponse::IsInitialized() const {
  return true;
}

void RoomInfoResponse::InternalSwap(RoomInfoResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[4]);
}

// ===================================================================

class RoomPlayerInfo::_Internal {
 public:
  static const ::game::battlemon::items::Item& lemon(const RoomPlayerInfo* msg);
};

const ::game::battlemon::items::Item&
RoomPlayerInfo::_Internal::lemon(const RoomPlayerInfo* msg) {
  return *msg->_impl_.lemon_;
}
void RoomPlayerInfo::clear_lemon() {
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
}
RoomPlayerInfo::RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.RoomPlayerInfo)
}
RoomPlayerInfo::RoomPlayerInfo(const RoomPlayerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomPlayerInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lemon()) {
    _this->_impl_.lemon_ = new ::game::battlemon::items::Item(*from._impl_.lemon_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.RoomPlayerInfo)
}

inline void RoomPlayerInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomPlayerInfo::~RoomPlayerInfo() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.RoomPlayerInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomPlayerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lemon_;
}

void RoomPlayerInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomPlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.RoomPlayerInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomPlayerInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.RoomPlayerInfo.near_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.Item lemon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lemon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomPlayerInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.RoomPlayerInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.RoomPlayerInfo.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lemon(this),
        _Internal::lemon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.RoomPlayerInfo)
  return target;
}

size_t RoomPlayerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.RoomPlayerInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lemon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomPlayerInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomPlayerInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomPlayerInfo::GetClassData() const { return &_class_data_; }


void RoomPlayerInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomPlayerInfo*>(&to_msg);
  auto& from = static_cast<const RoomPlayerInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.RoomPlayerInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (from._internal_has_lemon()) {
    _this->_internal_mutable_lemon()->::game::battlemon::items::Item::MergeFrom(
        from._internal_lemon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomPlayerInfo::CopyFrom(const RoomPlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.RoomPlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayerInfo::IsInitialized() const {
  return true;
}

void RoomPlayerInfo::InternalSwap(RoomPlayerInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  swap(_impl_.lemon_, other->_impl_.lemon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomPlayerInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[5]);
}

// ===================================================================

class CreateRoomRequest::_Internal {
 public:
  static const ::game::battlemon::mm::GameMode& mode(const CreateRoomRequest* msg);
};

const ::game::battlemon::mm::GameMode&
CreateRoomRequest::_Internal::mode(const CreateRoomRequest* msg) {
  return *msg->_impl_.mode_;
}
void CreateRoomRequest::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
CreateRoomRequest::CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.CreateRoomRequest)
}
CreateRoomRequest::CreateRoomRequest(const CreateRoomRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateRoomRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){from._impl_.near_ids_}
    , decltype(_impl_.prev_room_id_){}
    , decltype(_impl_.ott_){}
    , decltype(_impl_.mode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prev_room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prev_room_id().empty()) {
    _this->_impl_.prev_room_id_.Set(from._internal_prev_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ott().empty()) {
    _this->_impl_.ott_.Set(from._internal_ott(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::game::battlemon::mm::GameMode(*from._impl_.mode_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.CreateRoomRequest)
}

inline void CreateRoomRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){arena}
    , decltype(_impl_.prev_room_id_){}
    , decltype(_impl_.ott_){}
    , decltype(_impl_.mode_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prev_room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prev_room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateRoomRequest::~CreateRoomRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.CreateRoomRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRoomRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_ids_.~RepeatedPtrField();
  _impl_.prev_room_id_.Destroy();
  _impl_.ott_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mode_;
}

void CreateRoomRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRoomRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_ids_.Clear();
  _impl_.prev_room_id_.ClearToEmpty();
  _impl_.ott_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateRoomRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.mm.GameMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string near_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_near_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.CreateRoomRequest.near_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string prev_room_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_prev_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.CreateRoomRequest.prev_room_id"));
        } else
          goto handle_unusual;
        continue;
      // string ott = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ott();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.CreateRoomRequest.ott"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateRoomRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.CreateRoomRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.mm.GameMode mode = 1;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // repeated string near_ids = 2;
  for (int i = 0, n = this->_internal_near_ids_size(); i < n; i++) {
    const auto& s = this->_internal_near_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.CreateRoomRequest.near_ids");
    target = stream->WriteString(2, s, target);
  }

  // string prev_room_id = 3;
  if (!this->_internal_prev_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prev_room_id().data(), static_cast<int>(this->_internal_prev_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.CreateRoomRequest.prev_room_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_prev_room_id(), target);
  }

  // string ott = 4;
  if (!this->_internal_ott().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ott().data(), static_cast<int>(this->_internal_ott().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.CreateRoomRequest.ott");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ott(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.CreateRoomRequest)
  return target;
}

size_t CreateRoomRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.CreateRoomRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string near_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.near_ids_.size());
  for (int i = 0, n = _impl_.near_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.near_ids_.Get(i));
  }

  // string prev_room_id = 3;
  if (!this->_internal_prev_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prev_room_id());
  }

  // string ott = 4;
  if (!this->_internal_ott().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ott());
  }

  // .game.battlemon.mm.GameMode mode = 1;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateRoomRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateRoomRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateRoomRequest::GetClassData() const { return &_class_data_; }


void CreateRoomRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateRoomRequest*>(&to_msg);
  auto& from = static_cast<const CreateRoomRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.CreateRoomRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.near_ids_.MergeFrom(from._impl_.near_ids_);
  if (!from._internal_prev_room_id().empty()) {
    _this->_internal_set_prev_room_id(from._internal_prev_room_id());
  }
  if (!from._internal_ott().empty()) {
    _this->_internal_set_ott(from._internal_ott());
  }
  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::game::battlemon::mm::GameMode::MergeFrom(
        from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateRoomRequest::CopyFrom(const CreateRoomRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.CreateRoomRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomRequest::IsInitialized() const {
  return true;
}

void CreateRoomRequest::InternalSwap(CreateRoomRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.near_ids_.InternalSwap(&other->_impl_.near_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prev_room_id_, lhs_arena,
      &other->_impl_.prev_room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ott_, lhs_arena,
      &other->_impl_.ott_, rhs_arena
  );
  swap(_impl_.mode_, other->_impl_.mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateRoomRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[6]);
}

// ===================================================================

class DedicatedServerIsReadyRequest::_Internal {
 public:
};

DedicatedServerIsReadyRequest::DedicatedServerIsReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
}
DedicatedServerIsReadyRequest::DedicatedServerIsReadyRequest(const DedicatedServerIsReadyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DedicatedServerIsReadyRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ott().empty()) {
    _this->_impl_.ott_.Set(from._internal_ott(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
}

inline void DedicatedServerIsReadyRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.ott_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.ott_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ott_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DedicatedServerIsReadyRequest::~DedicatedServerIsReadyRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DedicatedServerIsReadyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.Destroy();
  _impl_.ott_.Destroy();
}

void DedicatedServerIsReadyRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DedicatedServerIsReadyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.ClearToEmpty();
  _impl_.ott_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DedicatedServerIsReadyRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string ott = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ott();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DedicatedServerIsReadyRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // string ott = 2;
  if (!this->_internal_ott().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ott().data(), static_cast<int>(this->_internal_ott().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ott(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  return target;
}

size_t DedicatedServerIsReadyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string ott = 2;
  if (!this->_internal_ott().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ott());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DedicatedServerIsReadyRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DedicatedServerIsReadyRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DedicatedServerIsReadyRequest::GetClassData() const { return &_class_data_; }


void DedicatedServerIsReadyRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DedicatedServerIsReadyRequest*>(&to_msg);
  auto& from = static_cast<const DedicatedServerIsReadyRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_ott().empty()) {
    _this->_internal_set_ott(from._internal_ott());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DedicatedServerIsReadyRequest::CopyFrom(const DedicatedServerIsReadyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DedicatedServerIsReadyRequest::IsInitialized() const {
  return true;
}

void DedicatedServerIsReadyRequest::InternalSwap(DedicatedServerIsReadyRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ott_, lhs_arena,
      &other->_impl_.ott_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DedicatedServerIsReadyRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalMm_2eproto_getter, &descriptor_table_internalMm_2eproto_once,
      file_level_metadata_internalMm_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace mm
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::InternalUserLeftBattleRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::SaveBattleResultRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::SaveBattleResultRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::SaveBattleResultRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::InternalPlayerResult*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::InternalPlayerResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::InternalPlayerResult >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::RoomInfoRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::RoomInfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::RoomInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::RoomInfoResponse*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::RoomInfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::RoomInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::RoomPlayerInfo*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::RoomPlayerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::RoomPlayerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::CreateRoomRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::CreateRoomRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::CreateRoomRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest*
Arena::CreateMaybeMessage< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
