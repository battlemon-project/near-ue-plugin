// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: auth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_auth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_auth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_auth_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_auth_2eproto;
namespace game {
namespace battlemon {
namespace auth {
class GuestAuthRequest;
struct GuestAuthRequestDefaultTypeInternal;
extern GuestAuthRequestDefaultTypeInternal _GuestAuthRequest_default_instance_;
class Session;
struct SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SuiAuthRequest;
struct SuiAuthRequestDefaultTypeInternal;
extern SuiAuthRequestDefaultTypeInternal _SuiAuthRequest_default_instance_;
class SuiSession;
struct SuiSessionDefaultTypeInternal;
extern SuiSessionDefaultTypeInternal _SuiSession_default_instance_;
class WalletAddressRequest;
struct WalletAddressRequestDefaultTypeInternal;
extern WalletAddressRequestDefaultTypeInternal _WalletAddressRequest_default_instance_;
class WalletAddressResponse;
struct WalletAddressResponseDefaultTypeInternal;
extern WalletAddressResponseDefaultTypeInternal _WalletAddressResponse_default_instance_;
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::auth::GuestAuthRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::GuestAuthRequest>(Arena*);
template<> ::game::battlemon::auth::Session* Arena::CreateMaybeMessage<::game::battlemon::auth::Session>(Arena*);
template<> ::game::battlemon::auth::SuiAuthRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::SuiAuthRequest>(Arena*);
template<> ::game::battlemon::auth::SuiSession* Arena::CreateMaybeMessage<::game::battlemon::auth::SuiSession>(Arena*);
template<> ::game::battlemon::auth::WalletAddressRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::WalletAddressRequest>(Arena*);
template<> ::game::battlemon::auth::WalletAddressResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::WalletAddressResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace auth {

// ===================================================================

class SuiAuthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.SuiAuthRequest) */ {
 public:
  inline SuiAuthRequest() : SuiAuthRequest(nullptr) {}
  ~SuiAuthRequest() override;
  explicit PROTOBUF_CONSTEXPR SuiAuthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuiAuthRequest(const SuiAuthRequest& from);
  SuiAuthRequest(SuiAuthRequest&& from) noexcept
    : SuiAuthRequest() {
    *this = ::std::move(from);
  }

  inline SuiAuthRequest& operator=(const SuiAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuiAuthRequest& operator=(SuiAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuiAuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuiAuthRequest* internal_default_instance() {
    return reinterpret_cast<const SuiAuthRequest*>(
               &_SuiAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SuiAuthRequest& a, SuiAuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SuiAuthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuiAuthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuiAuthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuiAuthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuiAuthRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuiAuthRequest& from) {
    SuiAuthRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuiAuthRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.SuiAuthRequest";
  }
  protected:
  explicit SuiAuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.SuiAuthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class GuestAuthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.battlemon.auth.GuestAuthRequest) */ {
 public:
  inline GuestAuthRequest() : GuestAuthRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR GuestAuthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuestAuthRequest(const GuestAuthRequest& from);
  GuestAuthRequest(GuestAuthRequest&& from) noexcept
    : GuestAuthRequest() {
    *this = ::std::move(from);
  }

  inline GuestAuthRequest& operator=(const GuestAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuestAuthRequest& operator=(GuestAuthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuestAuthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuestAuthRequest* internal_default_instance() {
    return reinterpret_cast<const GuestAuthRequest*>(
               &_GuestAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GuestAuthRequest& a, GuestAuthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GuestAuthRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuestAuthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuestAuthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuestAuthRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GuestAuthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GuestAuthRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.GuestAuthRequest";
  }
  protected:
  explicit GuestAuthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.GuestAuthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class Session final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.Session) */ {
 public:
  inline Session() : Session(nullptr) {}
  ~Session() override;
  explicit PROTOBUF_CONSTEXPR Session(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Session& default_instance() {
    return *internal_default_instance();
  }
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Session* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Session& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Session& from) {
    Session::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.Session";
  }
  protected:
  explicit Session(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 1,
  };
  // string jwt = 1;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.Session)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class SuiSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.SuiSession) */ {
 public:
  inline SuiSession() : SuiSession(nullptr) {}
  ~SuiSession() override;
  explicit PROTOBUF_CONSTEXPR SuiSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SuiSession(const SuiSession& from);
  SuiSession(SuiSession&& from) noexcept
    : SuiSession() {
    *this = ::std::move(from);
  }

  inline SuiSession& operator=(const SuiSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline SuiSession& operator=(SuiSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SuiSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const SuiSession* internal_default_instance() {
    return reinterpret_cast<const SuiSession*>(
               &_SuiSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SuiSession& a, SuiSession& b) {
    a.Swap(&b);
  }
  inline void Swap(SuiSession* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SuiSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SuiSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SuiSession>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SuiSession& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SuiSession& from) {
    SuiSession::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SuiSession* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.SuiSession";
  }
  protected:
  explicit SuiSession(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletAddressFieldNumber = 2,
    kSessionFieldNumber = 1,
  };
  // string wallet_address = 2;
  void clear_wallet_address();
  const std::string& wallet_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_address();
  PROTOBUF_NODISCARD std::string* release_wallet_address();
  void set_allocated_wallet_address(std::string* wallet_address);
  private:
  const std::string& _internal_wallet_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_address(const std::string& value);
  std::string* _internal_mutable_wallet_address();
  public:

  // .game.battlemon.auth.Session session = 1;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::game::battlemon::auth::Session& session() const;
  PROTOBUF_NODISCARD ::game::battlemon::auth::Session* release_session();
  ::game::battlemon::auth::Session* mutable_session();
  void set_allocated_session(::game::battlemon::auth::Session* session);
  private:
  const ::game::battlemon::auth::Session& _internal_session() const;
  ::game::battlemon::auth::Session* _internal_mutable_session();
  public:
  void unsafe_arena_set_allocated_session(
      ::game::battlemon::auth::Session* session);
  ::game::battlemon::auth::Session* unsafe_arena_release_session();

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.SuiSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_address_;
    ::game::battlemon::auth::Session* session_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class WalletAddressRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.WalletAddressRequest) */ {
 public:
  inline WalletAddressRequest() : WalletAddressRequest(nullptr) {}
  ~WalletAddressRequest() override;
  explicit PROTOBUF_CONSTEXPR WalletAddressRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletAddressRequest(const WalletAddressRequest& from);
  WalletAddressRequest(WalletAddressRequest&& from) noexcept
    : WalletAddressRequest() {
    *this = ::std::move(from);
  }

  inline WalletAddressRequest& operator=(const WalletAddressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletAddressRequest& operator=(WalletAddressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletAddressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletAddressRequest* internal_default_instance() {
    return reinterpret_cast<const WalletAddressRequest*>(
               &_WalletAddressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WalletAddressRequest& a, WalletAddressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletAddressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletAddressRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletAddressRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletAddressRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletAddressRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletAddressRequest& from) {
    WalletAddressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletAddressRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.WalletAddressRequest";
  }
  protected:
  explicit WalletAddressRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIdFieldNumber = 1,
  };
  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_client_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.WalletAddressRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// -------------------------------------------------------------------

class WalletAddressResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.WalletAddressResponse) */ {
 public:
  inline WalletAddressResponse() : WalletAddressResponse(nullptr) {}
  ~WalletAddressResponse() override;
  explicit PROTOBUF_CONSTEXPR WalletAddressResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WalletAddressResponse(const WalletAddressResponse& from);
  WalletAddressResponse(WalletAddressResponse&& from) noexcept
    : WalletAddressResponse() {
    *this = ::std::move(from);
  }

  inline WalletAddressResponse& operator=(const WalletAddressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletAddressResponse& operator=(WalletAddressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WalletAddressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WalletAddressResponse* internal_default_instance() {
    return reinterpret_cast<const WalletAddressResponse*>(
               &_WalletAddressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WalletAddressResponse& a, WalletAddressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletAddressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletAddressResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WalletAddressResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WalletAddressResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WalletAddressResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const WalletAddressResponse& from) {
    WalletAddressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletAddressResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.WalletAddressResponse";
  }
  protected:
  explicit WalletAddressResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletAddressFieldNumber = 1,
  };
  // string wallet_address = 1;
  void clear_wallet_address();
  const std::string& wallet_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wallet_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wallet_address();
  PROTOBUF_NODISCARD std::string* release_wallet_address();
  void set_allocated_wallet_address(std::string* wallet_address);
  private:
  const std::string& _internal_wallet_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wallet_address(const std::string& value);
  std::string* _internal_mutable_wallet_address();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.WalletAddressResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_auth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SuiAuthRequest

// string client_id = 1;
inline void SuiAuthRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& SuiAuthRequest::client_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.SuiAuthRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuiAuthRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.SuiAuthRequest.client_id)
}
inline std::string* SuiAuthRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.SuiAuthRequest.client_id)
  return _s;
}
inline const std::string& SuiAuthRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void SuiAuthRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SuiAuthRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SuiAuthRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.SuiAuthRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void SuiAuthRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.SuiAuthRequest.client_id)
}

// -------------------------------------------------------------------

// GuestAuthRequest

// -------------------------------------------------------------------

// Session

// string jwt = 1;
inline void Session::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& Session::jwt() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.Session.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Session::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.Session.jwt)
}
inline std::string* Session::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.Session.jwt)
  return _s;
}
inline const std::string& Session::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void Session::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* Session::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* Session::release_jwt() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.Session.jwt)
  return _impl_.jwt_.Release();
}
inline void Session::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.Session.jwt)
}

// -------------------------------------------------------------------

// SuiSession

// .game.battlemon.auth.Session session = 1;
inline bool SuiSession::_internal_has_session() const {
  return this != internal_default_instance() && _impl_.session_ != nullptr;
}
inline bool SuiSession::has_session() const {
  return _internal_has_session();
}
inline void SuiSession::clear_session() {
  if (GetArenaForAllocation() == nullptr && _impl_.session_ != nullptr) {
    delete _impl_.session_;
  }
  _impl_.session_ = nullptr;
}
inline const ::game::battlemon::auth::Session& SuiSession::_internal_session() const {
  const ::game::battlemon::auth::Session* p = _impl_.session_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::auth::Session&>(
      ::game::battlemon::auth::_Session_default_instance_);
}
inline const ::game::battlemon::auth::Session& SuiSession::session() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.SuiSession.session)
  return _internal_session();
}
inline void SuiSession::unsafe_arena_set_allocated_session(
    ::game::battlemon::auth::Session* session) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.session_);
  }
  _impl_.session_ = session;
  if (session) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.auth.SuiSession.session)
}
inline ::game::battlemon::auth::Session* SuiSession::release_session() {
  
  ::game::battlemon::auth::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::auth::Session* SuiSession::unsafe_arena_release_session() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.SuiSession.session)
  
  ::game::battlemon::auth::Session* temp = _impl_.session_;
  _impl_.session_ = nullptr;
  return temp;
}
inline ::game::battlemon::auth::Session* SuiSession::_internal_mutable_session() {
  
  if (_impl_.session_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::auth::Session>(GetArenaForAllocation());
    _impl_.session_ = p;
  }
  return _impl_.session_;
}
inline ::game::battlemon::auth::Session* SuiSession::mutable_session() {
  ::game::battlemon::auth::Session* _msg = _internal_mutable_session();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.SuiSession.session)
  return _msg;
}
inline void SuiSession::set_allocated_session(::game::battlemon::auth::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.session_;
  }
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session);
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.session_ = session;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.SuiSession.session)
}

// string wallet_address = 2;
inline void SuiSession::clear_wallet_address() {
  _impl_.wallet_address_.ClearToEmpty();
}
inline const std::string& SuiSession::wallet_address() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.SuiSession.wallet_address)
  return _internal_wallet_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SuiSession::set_wallet_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wallet_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.SuiSession.wallet_address)
}
inline std::string* SuiSession::mutable_wallet_address() {
  std::string* _s = _internal_mutable_wallet_address();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.SuiSession.wallet_address)
  return _s;
}
inline const std::string& SuiSession::_internal_wallet_address() const {
  return _impl_.wallet_address_.Get();
}
inline void SuiSession::_internal_set_wallet_address(const std::string& value) {
  
  _impl_.wallet_address_.Set(value, GetArenaForAllocation());
}
inline std::string* SuiSession::_internal_mutable_wallet_address() {
  
  return _impl_.wallet_address_.Mutable(GetArenaForAllocation());
}
inline std::string* SuiSession::release_wallet_address() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.SuiSession.wallet_address)
  return _impl_.wallet_address_.Release();
}
inline void SuiSession::set_allocated_wallet_address(std::string* wallet_address) {
  if (wallet_address != nullptr) {
    
  } else {
    
  }
  _impl_.wallet_address_.SetAllocated(wallet_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wallet_address_.IsDefault()) {
    _impl_.wallet_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.SuiSession.wallet_address)
}

// -------------------------------------------------------------------

// WalletAddressRequest

// string client_id = 1;
inline void WalletAddressRequest::clear_client_id() {
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& WalletAddressRequest::client_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.WalletAddressRequest.client_id)
  return _internal_client_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletAddressRequest::set_client_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.client_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.WalletAddressRequest.client_id)
}
inline std::string* WalletAddressRequest::mutable_client_id() {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.WalletAddressRequest.client_id)
  return _s;
}
inline const std::string& WalletAddressRequest::_internal_client_id() const {
  return _impl_.client_id_.Get();
}
inline void WalletAddressRequest::_internal_set_client_id(const std::string& value) {
  
  _impl_.client_id_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletAddressRequest::_internal_mutable_client_id() {
  
  return _impl_.client_id_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletAddressRequest::release_client_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.WalletAddressRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void WalletAddressRequest::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  _impl_.client_id_.SetAllocated(client_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.client_id_.IsDefault()) {
    _impl_.client_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.WalletAddressRequest.client_id)
}

// -------------------------------------------------------------------

// WalletAddressResponse

// string wallet_address = 1;
inline void WalletAddressResponse::clear_wallet_address() {
  _impl_.wallet_address_.ClearToEmpty();
}
inline const std::string& WalletAddressResponse::wallet_address() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _internal_wallet_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WalletAddressResponse::set_wallet_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wallet_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.WalletAddressResponse.wallet_address)
}
inline std::string* WalletAddressResponse::mutable_wallet_address() {
  std::string* _s = _internal_mutable_wallet_address();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _s;
}
inline const std::string& WalletAddressResponse::_internal_wallet_address() const {
  return _impl_.wallet_address_.Get();
}
inline void WalletAddressResponse::_internal_set_wallet_address(const std::string& value) {
  
  _impl_.wallet_address_.Set(value, GetArenaForAllocation());
}
inline std::string* WalletAddressResponse::_internal_mutable_wallet_address() {
  
  return _impl_.wallet_address_.Mutable(GetArenaForAllocation());
}
inline std::string* WalletAddressResponse::release_wallet_address() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.WalletAddressResponse.wallet_address)
  return _impl_.wallet_address_.Release();
}
inline void WalletAddressResponse::set_allocated_wallet_address(std::string* wallet_address) {
  if (wallet_address != nullptr) {
    
  } else {
    
  }
  _impl_.wallet_address_.SetAllocated(wallet_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wallet_address_.IsDefault()) {
    _impl_.wallet_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.WalletAddressResponse.wallet_address)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace auth
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_auth_2eproto
