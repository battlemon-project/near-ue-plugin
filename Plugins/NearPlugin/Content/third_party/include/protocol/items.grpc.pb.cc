// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: items.proto

#include "items.pb.h"
#include "items.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace battlemon {
namespace items {

static const char* ItemsService_method_names[] = {
  "/game.battlemon.items.ItemsService/GetItems",
  "/game.battlemon.items.ItemsService/GetBundles",
  "/game.battlemon.items.ItemsService/EditBundle",
  "/game.battlemon.items.ItemsService/AttachBundle",
  "/game.battlemon.items.ItemsService/DetachBundle",
};

std::unique_ptr< ItemsService::Stub> ItemsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ItemsService::Stub> stub(new ItemsService::Stub(channel, options));
  return stub;
}

ItemsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetItems_(ItemsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetBundles_(ItemsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_EditBundle_(ItemsService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AttachBundle_(ItemsService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DetachBundle_(ItemsService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ItemsService::Stub::GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::game::battlemon::items::ItemsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetItems_, context, request, response);
}

void ItemsService::Stub::async::GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItems_, context, request, response, std::move(f));
}

void ItemsService::Stub::async::GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetItems_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>* ItemsService::Stub::PrepareAsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::items::ItemsResponse, ::game::battlemon::items::ItemsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetItems_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>* ItemsService::Stub::AsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetItemsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ItemsService::Stub::GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::game::battlemon::items::GetBundlesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetBundles_, context, request, response);
}

void ItemsService::Stub::async::GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBundles_, context, request, response, std::move(f));
}

void ItemsService::Stub::async::GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetBundles_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>* ItemsService::Stub::PrepareAsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::items::GetBundlesResponse, ::game::battlemon::items::GetBundlesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetBundles_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>* ItemsService::Stub::AsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetBundlesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ItemsService::Stub::EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::game::battlemon::items::WeaponBundle* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EditBundle_, context, request, response);
}

void ItemsService::Stub::async::EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditBundle_, context, request, response, std::move(f));
}

void ItemsService::Stub::async::EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EditBundle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>* ItemsService::Stub::PrepareAsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::items::WeaponBundle, ::game::battlemon::items::EditBundleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EditBundle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>* ItemsService::Stub::AsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEditBundleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ItemsService::Stub::AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::game::battlemon::common::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AttachBundle_, context, request, response);
}

void ItemsService::Stub::async::AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AttachBundle_, context, request, response, std::move(f));
}

void ItemsService::Stub::async::AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AttachBundle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* ItemsService::Stub::PrepareAsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::common::Empty, ::game::battlemon::items::AttachBundleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AttachBundle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* ItemsService::Stub::AsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAttachBundleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ItemsService::Stub::DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::game::battlemon::common::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DetachBundle_, context, request, response);
}

void ItemsService::Stub::async::DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetachBundle_, context, request, response, std::move(f));
}

void ItemsService::Stub::async::DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DetachBundle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* ItemsService::Stub::PrepareAsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::common::Empty, ::game::battlemon::items::DetachBundleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DetachBundle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* ItemsService::Stub::AsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDetachBundleRaw(context, request, cq);
  result->StartCall();
  return result;
}

ItemsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemsService::Service, ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::ItemsRequest* req,
             ::game::battlemon::items::ItemsResponse* resp) {
               return service->GetItems(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemsService::Service, ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::GetBundlesRequest* req,
             ::game::battlemon::items::GetBundlesResponse* resp) {
               return service->GetBundles(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemsService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemsService::Service, ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::EditBundleRequest* req,
             ::game::battlemon::items::WeaponBundle* resp) {
               return service->EditBundle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemsService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemsService::Service, ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::AttachBundleRequest* req,
             ::game::battlemon::common::Empty* resp) {
               return service->AttachBundle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ItemsService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ItemsService::Service, ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::DetachBundleRequest* req,
             ::game::battlemon::common::Empty* resp) {
               return service->DetachBundle(ctx, req, resp);
             }, this)));
}

ItemsService::Service::~Service() {
}

::grpc::Status ItemsService::Service::GetItems(::grpc::ServerContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemsService::Service::GetBundles(::grpc::ServerContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemsService::Service::EditBundle(::grpc::ServerContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemsService::Service::AttachBundle(::grpc::ServerContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ItemsService::Service::DetachBundle(::grpc::ServerContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace battlemon
}  // namespace items

