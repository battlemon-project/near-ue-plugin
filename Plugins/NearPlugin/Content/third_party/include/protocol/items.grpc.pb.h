// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: items.proto
#ifndef GRPC_items_2eproto__INCLUDED
#define GRPC_items_2eproto__INCLUDED

#include "items.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace battlemon {
namespace items {

class ItemsService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.battlemon.items.ItemsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::game::battlemon::items::ItemsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>> AsyncGetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>>(AsyncGetItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>> PrepareAsyncGetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>>(PrepareAsyncGetItemsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::game::battlemon::items::GetBundlesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>> AsyncGetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>>(AsyncGetBundlesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>> PrepareAsyncGetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>>(PrepareAsyncGetBundlesRaw(context, request, cq));
    }
    // the first call creates 10 default bundles
    virtual ::grpc::Status EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::game::battlemon::items::WeaponBundle* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>> AsyncEditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>>(AsyncEditBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>> PrepareAsyncEditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>>(PrepareAsyncEditBundleRaw(context, request, cq));
    }
    virtual ::grpc::Status AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncAttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncAttachBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncAttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncAttachBundleRaw(context, request, cq));
    }
    virtual ::grpc::Status DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncDetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncDetachBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncDetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncDetachBundleRaw(context, request, cq));
    }
    // в бою лимон или нет
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // the first call creates 10 default bundles
      virtual void EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // в бою лимон или нет
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>* AsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::ItemsResponse>* PrepareAsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>* AsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::GetBundlesResponse>* PrepareAsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>* AsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::WeaponBundle>* PrepareAsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::game::battlemon::items::ItemsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>> AsyncGetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>>(AsyncGetItemsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>> PrepareAsyncGetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>>(PrepareAsyncGetItemsRaw(context, request, cq));
    }
    ::grpc::Status GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::game::battlemon::items::GetBundlesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>> AsyncGetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>>(AsyncGetBundlesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>> PrepareAsyncGetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>>(PrepareAsyncGetBundlesRaw(context, request, cq));
    }
    ::grpc::Status EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::game::battlemon::items::WeaponBundle* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>> AsyncEditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>>(AsyncEditBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>> PrepareAsyncEditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>>(PrepareAsyncEditBundleRaw(context, request, cq));
    }
    ::grpc::Status AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncAttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncAttachBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncAttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncAttachBundleRaw(context, request, cq));
    }
    ::grpc::Status DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncDetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncDetachBundleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncDetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncDetachBundleRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetItems(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetBundles(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, std::function<void(::grpc::Status)>) override;
      void EditBundle(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void AttachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void DetachBundle(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>* AsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::ItemsResponse>* PrepareAsyncGetItemsRaw(::grpc::ClientContext* context, const ::game::battlemon::items::ItemsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>* AsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::GetBundlesResponse>* PrepareAsyncGetBundlesRaw(::grpc::ClientContext* context, const ::game::battlemon::items::GetBundlesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>* AsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::WeaponBundle>* PrepareAsyncEditBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::EditBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncAttachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::AttachBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncDetachBundleRaw(::grpc::ClientContext* context, const ::game::battlemon::items::DetachBundleRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetItems_;
    const ::grpc::internal::RpcMethod rpcmethod_GetBundles_;
    const ::grpc::internal::RpcMethod rpcmethod_EditBundle_;
    const ::grpc::internal::RpcMethod rpcmethod_AttachBundle_;
    const ::grpc::internal::RpcMethod rpcmethod_DetachBundle_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetItems(::grpc::ServerContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response);
    virtual ::grpc::Status GetBundles(::grpc::ServerContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response);
    // the first call creates 10 default bundles
    virtual ::grpc::Status EditBundle(::grpc::ServerContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response);
    virtual ::grpc::Status AttachBundle(::grpc::ServerContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response);
    virtual ::grpc::Status DetachBundle(::grpc::ServerContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response);
    // в бою лимон или нет
  };
  template <class BaseClass>
  class WithAsyncMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetItems() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetItems(::grpc::ServerContext* context, ::game::battlemon::items::ItemsRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::items::ItemsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetBundles() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBundles(::grpc::ServerContext* context, ::game::battlemon::items::GetBundlesRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::items::GetBundlesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EditBundle() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditBundle(::grpc::ServerContext* context, ::game::battlemon::items::EditBundleRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::items::WeaponBundle>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AttachBundle() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttachBundle(::grpc::ServerContext* context, ::game::battlemon::items::AttachBundleRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DetachBundle() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetachBundle(::grpc::ServerContext* context, ::game::battlemon::items::DetachBundleRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetItems<WithAsyncMethod_GetBundles<WithAsyncMethod_EditBundle<WithAsyncMethod_AttachBundle<WithAsyncMethod_DetachBundle<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetItems() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::ItemsRequest* request, ::game::battlemon::items::ItemsResponse* response) { return this->GetItems(context, request, response); }));}
    void SetMessageAllocatorFor_GetItems(
        ::grpc::MessageAllocator< ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetItems(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetBundles() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::GetBundlesRequest* request, ::game::battlemon::items::GetBundlesResponse* response) { return this->GetBundles(context, request, response); }));}
    void SetMessageAllocatorFor_GetBundles(
        ::grpc::MessageAllocator< ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EditBundle() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::EditBundleRequest* request, ::game::battlemon::items::WeaponBundle* response) { return this->EditBundle(context, request, response); }));}
    void SetMessageAllocatorFor_EditBundle(
        ::grpc::MessageAllocator< ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AttachBundle() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::AttachBundleRequest* request, ::game::battlemon::common::Empty* response) { return this->AttachBundle(context, request, response); }));}
    void SetMessageAllocatorFor_AttachBundle(
        ::grpc::MessageAllocator< ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AttachBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DetachBundle() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::DetachBundleRequest* request, ::game::battlemon::common::Empty* response) { return this->DetachBundle(context, request, response); }));}
    void SetMessageAllocatorFor_DetachBundle(
        ::grpc::MessageAllocator< ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetachBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetItems<WithCallbackMethod_GetBundles<WithCallbackMethod_EditBundle<WithCallbackMethod_AttachBundle<WithCallbackMethod_DetachBundle<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetItems() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetBundles() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EditBundle() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AttachBundle() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DetachBundle() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetItems() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetItems(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetBundles() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetBundles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EditBundle() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEditBundle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AttachBundle() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAttachBundle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DetachBundle() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDetachBundle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetItems() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetItems(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetItems(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetBundles() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetBundles(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetBundles(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EditBundle() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EditBundle(context, request, response); }));
    }
    ~WithRawCallbackMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EditBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AttachBundle() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AttachBundle(context, request, response); }));
    }
    ~WithRawCallbackMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AttachBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DetachBundle() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DetachBundle(context, request, response); }));
    }
    ~WithRawCallbackMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DetachBundle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetItems : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetItems() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::ItemsRequest, ::game::battlemon::items::ItemsResponse>* streamer) {
                       return this->StreamedGetItems(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetItems() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetItems(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::ItemsRequest* /*request*/, ::game::battlemon::items::ItemsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetItems(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::ItemsRequest,::game::battlemon::items::ItemsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetBundles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetBundles() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::GetBundlesRequest, ::game::battlemon::items::GetBundlesResponse>* streamer) {
                       return this->StreamedGetBundles(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetBundles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetBundles(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::GetBundlesRequest* /*request*/, ::game::battlemon::items::GetBundlesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetBundles(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::GetBundlesRequest,::game::battlemon::items::GetBundlesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EditBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EditBundle() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::EditBundleRequest, ::game::battlemon::items::WeaponBundle>* streamer) {
                       return this->StreamedEditBundle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EditBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EditBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::EditBundleRequest* /*request*/, ::game::battlemon::items::WeaponBundle* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEditBundle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::EditBundleRequest,::game::battlemon::items::WeaponBundle>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AttachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AttachBundle() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::AttachBundleRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedAttachBundle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AttachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AttachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::AttachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAttachBundle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::AttachBundleRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DetachBundle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DetachBundle() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::DetachBundleRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedDetachBundle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DetachBundle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DetachBundle(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::DetachBundleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDetachBundle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::DetachBundleRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetItems<WithStreamedUnaryMethod_GetBundles<WithStreamedUnaryMethod_EditBundle<WithStreamedUnaryMethod_AttachBundle<WithStreamedUnaryMethod_DetachBundle<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetItems<WithStreamedUnaryMethod_GetBundles<WithStreamedUnaryMethod_EditBundle<WithStreamedUnaryMethod_AttachBundle<WithStreamedUnaryMethod_DetachBundle<Service > > > > > StreamedService;
};

}  // namespace items
}  // namespace battlemon
}  // namespace game


#endif  // GRPC_items_2eproto__INCLUDED
