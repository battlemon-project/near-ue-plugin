// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internalItems.proto

#include "internalItems.pb.h"
#include "internalItems.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace battlemon {
namespace items {
namespace internal {

static const char* InternalItemsService_method_names[] = {
  "/game.battlemon.items.internal.InternalItemsService/IsOwner",
  "/game.battlemon.items.internal.InternalItemsService/InternalGetLemonsInfo",
};

std::unique_ptr< InternalItemsService::Stub> InternalItemsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InternalItemsService::Stub> stub(new InternalItemsService::Stub(channel, options));
  return stub;
}

InternalItemsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_IsOwner_(InternalItemsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InternalGetLemonsInfo_(InternalItemsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InternalItemsService::Stub::IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::game::battlemon::items::internal::IsOwnerResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_IsOwner_, context, request, response);
}

void InternalItemsService::Stub::async::IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsOwner_, context, request, response, std::move(f));
}

void InternalItemsService::Stub::async::IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_IsOwner_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>* InternalItemsService::Stub::PrepareAsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::items::internal::IsOwnerResponse, ::game::battlemon::items::internal::IsOwnerRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_IsOwner_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>* InternalItemsService::Stub::AsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncIsOwnerRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InternalItemsService::Stub::InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InternalGetLemonsInfo_, context, request, response);
}

void InternalItemsService::Stub::async::InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InternalGetLemonsInfo_, context, request, response, std::move(f));
}

void InternalItemsService::Stub::async::InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InternalGetLemonsInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* InternalItemsService::Stub::PrepareAsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::items::internal::InternalLemonsInfoResponse, ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InternalGetLemonsInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* InternalItemsService::Stub::AsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInternalGetLemonsInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

InternalItemsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalItemsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalItemsService::Service, ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::internal::IsOwnerRequest* req,
             ::game::battlemon::items::internal::IsOwnerResponse* resp) {
               return service->IsOwner(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalItemsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalItemsService::Service, ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalItemsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::items::internal::InternalLemonsInfoRequest* req,
             ::game::battlemon::items::internal::InternalLemonsInfoResponse* resp) {
               return service->InternalGetLemonsInfo(ctx, req, resp);
             }, this)));
}

InternalItemsService::Service::~Service() {
}

::grpc::Status InternalItemsService::Service::IsOwner(::grpc::ServerContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InternalItemsService::Service::InternalGetLemonsInfo(::grpc::ServerContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace battlemon
}  // namespace items
}  // namespace internal

