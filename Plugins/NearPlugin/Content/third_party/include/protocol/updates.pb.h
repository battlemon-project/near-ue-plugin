// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: updates.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_updates_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_updates_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
#include "items.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_updates_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_updates_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_updates_2eproto;
namespace game {
namespace battlemon {
namespace updates {
class RoomInfo;
struct RoomInfoDefaultTypeInternal;
extern RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
class RoomNeedAccept;
struct RoomNeedAcceptDefaultTypeInternal;
extern RoomNeedAcceptDefaultTypeInternal _RoomNeedAccept_default_instance_;
class RoomPlayer;
struct RoomPlayerDefaultTypeInternal;
extern RoomPlayerDefaultTypeInternal _RoomPlayer_default_instance_;
class Update;
struct UpdateDefaultTypeInternal;
extern UpdateDefaultTypeInternal _Update_default_instance_;
class UpdateMessage;
struct UpdateMessageDefaultTypeInternal;
extern UpdateMessageDefaultTypeInternal _UpdateMessage_default_instance_;
}  // namespace updates
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::updates::RoomInfo* Arena::CreateMaybeMessage<::game::battlemon::updates::RoomInfo>(Arena*);
template<> ::game::battlemon::updates::RoomNeedAccept* Arena::CreateMaybeMessage<::game::battlemon::updates::RoomNeedAccept>(Arena*);
template<> ::game::battlemon::updates::RoomPlayer* Arena::CreateMaybeMessage<::game::battlemon::updates::RoomPlayer>(Arena*);
template<> ::game::battlemon::updates::Update* Arena::CreateMaybeMessage<::game::battlemon::updates::Update>(Arena*);
template<> ::game::battlemon::updates::UpdateMessage* Arena::CreateMaybeMessage<::game::battlemon::updates::UpdateMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace updates {

// ===================================================================

class Update final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.updates.Update) */ {
 public:
  inline Update() : Update(nullptr) {}
  ~Update() override;
  explicit PROTOBUF_CONSTEXPR Update(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Update(const Update& from);
  Update(Update&& from) noexcept
    : Update() {
    *this = ::std::move(from);
  }

  inline Update& operator=(const Update& from) {
    CopyFrom(from);
    return *this;
  }
  inline Update& operator=(Update&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Update& default_instance() {
    return *internal_default_instance();
  }
  static inline const Update* internal_default_instance() {
    return reinterpret_cast<const Update*>(
               &_Update_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Update& a, Update& b) {
    a.Swap(&b);
  }
  inline void Swap(Update* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Update* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Update* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Update>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Update& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Update& from) {
    Update::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Update* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.updates.Update";
  }
  protected:
  explicit Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kMessageFieldNumber = 3,
    kTimestampFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string message = 3;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // int64 timestamp = 2;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.updates.Update)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updates_2eproto;
};
// -------------------------------------------------------------------

class UpdateMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.updates.UpdateMessage) */ {
 public:
  inline UpdateMessage() : UpdateMessage(nullptr) {}
  ~UpdateMessage() override;
  explicit PROTOBUF_CONSTEXPR UpdateMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateMessage(const UpdateMessage& from);
  UpdateMessage(UpdateMessage&& from) noexcept
    : UpdateMessage() {
    *this = ::std::move(from);
  }

  inline UpdateMessage& operator=(const UpdateMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessage& operator=(UpdateMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateMessage& default_instance() {
    return *internal_default_instance();
  }
  enum UpdateCase {
    kRoomNeedAccept = 1,
    kRoomAcceptingCanceled = 2,
    kRoomFound = 3,
    kRoomTeammates = 4,
    kRoomReady = 5,
    kUserIsAlreadyInLine = 6,
    kUserIsAlreadyInBattle = 7,
    kUserOutOfLine = 8,
    UPDATE_NOT_SET = 0,
  };

  static inline const UpdateMessage* internal_default_instance() {
    return reinterpret_cast<const UpdateMessage*>(
               &_UpdateMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateMessage& a, UpdateMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateMessage& from) {
    UpdateMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.updates.UpdateMessage";
  }
  protected:
  explicit UpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomNeedAcceptFieldNumber = 1,
    kRoomAcceptingCanceledFieldNumber = 2,
    kRoomFoundFieldNumber = 3,
    kRoomTeammatesFieldNumber = 4,
    kRoomReadyFieldNumber = 5,
    kUserIsAlreadyInLineFieldNumber = 6,
    kUserIsAlreadyInBattleFieldNumber = 7,
    kUserOutOfLineFieldNumber = 8,
  };
  // .game.battlemon.updates.RoomNeedAccept room_need_accept = 1;
  bool has_room_need_accept() const;
  private:
  bool _internal_has_room_need_accept() const;
  public:
  void clear_room_need_accept();
  const ::game::battlemon::updates::RoomNeedAccept& room_need_accept() const;
  PROTOBUF_NODISCARD ::game::battlemon::updates::RoomNeedAccept* release_room_need_accept();
  ::game::battlemon::updates::RoomNeedAccept* mutable_room_need_accept();
  void set_allocated_room_need_accept(::game::battlemon::updates::RoomNeedAccept* room_need_accept);
  private:
  const ::game::battlemon::updates::RoomNeedAccept& _internal_room_need_accept() const;
  ::game::battlemon::updates::RoomNeedAccept* _internal_mutable_room_need_accept();
  public:
  void unsafe_arena_set_allocated_room_need_accept(
      ::game::battlemon::updates::RoomNeedAccept* room_need_accept);
  ::game::battlemon::updates::RoomNeedAccept* unsafe_arena_release_room_need_accept();

  // .game.battlemon.common.Empty room_accepting_canceled = 2;
  bool has_room_accepting_canceled() const;
  private:
  bool _internal_has_room_accepting_canceled() const;
  public:
  void clear_room_accepting_canceled();
  const ::game::battlemon::common::Empty& room_accepting_canceled() const;
  PROTOBUF_NODISCARD ::game::battlemon::common::Empty* release_room_accepting_canceled();
  ::game::battlemon::common::Empty* mutable_room_accepting_canceled();
  void set_allocated_room_accepting_canceled(::game::battlemon::common::Empty* room_accepting_canceled);
  private:
  const ::game::battlemon::common::Empty& _internal_room_accepting_canceled() const;
  ::game::battlemon::common::Empty* _internal_mutable_room_accepting_canceled();
  public:
  void unsafe_arena_set_allocated_room_accepting_canceled(
      ::game::battlemon::common::Empty* room_accepting_canceled);
  ::game::battlemon::common::Empty* unsafe_arena_release_room_accepting_canceled();

  // .game.battlemon.updates.RoomInfo room_found = 3;
  bool has_room_found() const;
  private:
  bool _internal_has_room_found() const;
  public:
  void clear_room_found();
  const ::game::battlemon::updates::RoomInfo& room_found() const;
  PROTOBUF_NODISCARD ::game::battlemon::updates::RoomInfo* release_room_found();
  ::game::battlemon::updates::RoomInfo* mutable_room_found();
  void set_allocated_room_found(::game::battlemon::updates::RoomInfo* room_found);
  private:
  const ::game::battlemon::updates::RoomInfo& _internal_room_found() const;
  ::game::battlemon::updates::RoomInfo* _internal_mutable_room_found();
  public:
  void unsafe_arena_set_allocated_room_found(
      ::game::battlemon::updates::RoomInfo* room_found);
  ::game::battlemon::updates::RoomInfo* unsafe_arena_release_room_found();

  // .game.battlemon.updates.RoomInfo room_teammates = 4;
  bool has_room_teammates() const;
  private:
  bool _internal_has_room_teammates() const;
  public:
  void clear_room_teammates();
  const ::game::battlemon::updates::RoomInfo& room_teammates() const;
  PROTOBUF_NODISCARD ::game::battlemon::updates::RoomInfo* release_room_teammates();
  ::game::battlemon::updates::RoomInfo* mutable_room_teammates();
  void set_allocated_room_teammates(::game::battlemon::updates::RoomInfo* room_teammates);
  private:
  const ::game::battlemon::updates::RoomInfo& _internal_room_teammates() const;
  ::game::battlemon::updates::RoomInfo* _internal_mutable_room_teammates();
  public:
  void unsafe_arena_set_allocated_room_teammates(
      ::game::battlemon::updates::RoomInfo* room_teammates);
  ::game::battlemon::updates::RoomInfo* unsafe_arena_release_room_teammates();

  // .game.battlemon.updates.RoomInfo room_ready = 5;
  bool has_room_ready() const;
  private:
  bool _internal_has_room_ready() const;
  public:
  void clear_room_ready();
  const ::game::battlemon::updates::RoomInfo& room_ready() const;
  PROTOBUF_NODISCARD ::game::battlemon::updates::RoomInfo* release_room_ready();
  ::game::battlemon::updates::RoomInfo* mutable_room_ready();
  void set_allocated_room_ready(::game::battlemon::updates::RoomInfo* room_ready);
  private:
  const ::game::battlemon::updates::RoomInfo& _internal_room_ready() const;
  ::game::battlemon::updates::RoomInfo* _internal_mutable_room_ready();
  public:
  void unsafe_arena_set_allocated_room_ready(
      ::game::battlemon::updates::RoomInfo* room_ready);
  ::game::battlemon::updates::RoomInfo* unsafe_arena_release_room_ready();

  // .game.battlemon.common.Empty user_is_already_in_line = 6;
  bool has_user_is_already_in_line() const;
  private:
  bool _internal_has_user_is_already_in_line() const;
  public:
  void clear_user_is_already_in_line();
  const ::game::battlemon::common::Empty& user_is_already_in_line() const;
  PROTOBUF_NODISCARD ::game::battlemon::common::Empty* release_user_is_already_in_line();
  ::game::battlemon::common::Empty* mutable_user_is_already_in_line();
  void set_allocated_user_is_already_in_line(::game::battlemon::common::Empty* user_is_already_in_line);
  private:
  const ::game::battlemon::common::Empty& _internal_user_is_already_in_line() const;
  ::game::battlemon::common::Empty* _internal_mutable_user_is_already_in_line();
  public:
  void unsafe_arena_set_allocated_user_is_already_in_line(
      ::game::battlemon::common::Empty* user_is_already_in_line);
  ::game::battlemon::common::Empty* unsafe_arena_release_user_is_already_in_line();

  // .game.battlemon.updates.RoomInfo user_is_already_in_battle = 7;
  bool has_user_is_already_in_battle() const;
  private:
  bool _internal_has_user_is_already_in_battle() const;
  public:
  void clear_user_is_already_in_battle();
  const ::game::battlemon::updates::RoomInfo& user_is_already_in_battle() const;
  PROTOBUF_NODISCARD ::game::battlemon::updates::RoomInfo* release_user_is_already_in_battle();
  ::game::battlemon::updates::RoomInfo* mutable_user_is_already_in_battle();
  void set_allocated_user_is_already_in_battle(::game::battlemon::updates::RoomInfo* user_is_already_in_battle);
  private:
  const ::game::battlemon::updates::RoomInfo& _internal_user_is_already_in_battle() const;
  ::game::battlemon::updates::RoomInfo* _internal_mutable_user_is_already_in_battle();
  public:
  void unsafe_arena_set_allocated_user_is_already_in_battle(
      ::game::battlemon::updates::RoomInfo* user_is_already_in_battle);
  ::game::battlemon::updates::RoomInfo* unsafe_arena_release_user_is_already_in_battle();

  // .game.battlemon.common.Empty user_out_of_line = 8;
  bool has_user_out_of_line() const;
  private:
  bool _internal_has_user_out_of_line() const;
  public:
  void clear_user_out_of_line();
  const ::game::battlemon::common::Empty& user_out_of_line() const;
  PROTOBUF_NODISCARD ::game::battlemon::common::Empty* release_user_out_of_line();
  ::game::battlemon::common::Empty* mutable_user_out_of_line();
  void set_allocated_user_out_of_line(::game::battlemon::common::Empty* user_out_of_line);
  private:
  const ::game::battlemon::common::Empty& _internal_user_out_of_line() const;
  ::game::battlemon::common::Empty* _internal_mutable_user_out_of_line();
  public:
  void unsafe_arena_set_allocated_user_out_of_line(
      ::game::battlemon::common::Empty* user_out_of_line);
  ::game::battlemon::common::Empty* unsafe_arena_release_user_out_of_line();

  void clear_update();
  UpdateCase update_case() const;
  // @@protoc_insertion_point(class_scope:game.battlemon.updates.UpdateMessage)
 private:
  class _Internal;
  void set_has_room_need_accept();
  void set_has_room_accepting_canceled();
  void set_has_room_found();
  void set_has_room_teammates();
  void set_has_room_ready();
  void set_has_user_is_already_in_line();
  void set_has_user_is_already_in_battle();
  void set_has_user_out_of_line();

  inline bool has_update() const;
  inline void clear_has_update();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union UpdateUnion {
      constexpr UpdateUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::game::battlemon::updates::RoomNeedAccept* room_need_accept_;
      ::game::battlemon::common::Empty* room_accepting_canceled_;
      ::game::battlemon::updates::RoomInfo* room_found_;
      ::game::battlemon::updates::RoomInfo* room_teammates_;
      ::game::battlemon::updates::RoomInfo* room_ready_;
      ::game::battlemon::common::Empty* user_is_already_in_line_;
      ::game::battlemon::updates::RoomInfo* user_is_already_in_battle_;
      ::game::battlemon::common::Empty* user_out_of_line_;
    } update_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updates_2eproto;
};
// -------------------------------------------------------------------

class RoomNeedAccept final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.updates.RoomNeedAccept) */ {
 public:
  inline RoomNeedAccept() : RoomNeedAccept(nullptr) {}
  ~RoomNeedAccept() override;
  explicit PROTOBUF_CONSTEXPR RoomNeedAccept(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomNeedAccept(const RoomNeedAccept& from);
  RoomNeedAccept(RoomNeedAccept&& from) noexcept
    : RoomNeedAccept() {
    *this = ::std::move(from);
  }

  inline RoomNeedAccept& operator=(const RoomNeedAccept& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomNeedAccept& operator=(RoomNeedAccept&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomNeedAccept& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomNeedAccept* internal_default_instance() {
    return reinterpret_cast<const RoomNeedAccept*>(
               &_RoomNeedAccept_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RoomNeedAccept& a, RoomNeedAccept& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomNeedAccept* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomNeedAccept* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomNeedAccept* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomNeedAccept>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomNeedAccept& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomNeedAccept& from) {
    RoomNeedAccept::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomNeedAccept* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.updates.RoomNeedAccept";
  }
  protected:
  explicit RoomNeedAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kManualAcceptFieldNumber = 1,
    kTimeToAcceptFieldNumber = 2,
  };
  // bool manual_accept = 1;
  void clear_manual_accept();
  bool manual_accept() const;
  void set_manual_accept(bool value);
  private:
  bool _internal_manual_accept() const;
  void _internal_set_manual_accept(bool value);
  public:

  // int32 time_to_accept = 2;
  void clear_time_to_accept();
  int32_t time_to_accept() const;
  void set_time_to_accept(int32_t value);
  private:
  int32_t _internal_time_to_accept() const;
  void _internal_set_time_to_accept(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.updates.RoomNeedAccept)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool manual_accept_;
    int32_t time_to_accept_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updates_2eproto;
};
// -------------------------------------------------------------------

class RoomInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.updates.RoomInfo) */ {
 public:
  inline RoomInfo() : RoomInfo(nullptr) {}
  ~RoomInfo() override;
  explicit PROTOBUF_CONSTEXPR RoomInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfo(const RoomInfo& from);
  RoomInfo(RoomInfo&& from) noexcept
    : RoomInfo() {
    *this = ::std::move(from);
  }

  inline RoomInfo& operator=(const RoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfo& operator=(RoomInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfo* internal_default_instance() {
    return reinterpret_cast<const RoomInfo*>(
               &_RoomInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomInfo& a, RoomInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfo& from) {
    RoomInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.updates.RoomInfo";
  }
  protected:
  explicit RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kServerIpFieldNumber = 2,
  };
  // repeated .game.battlemon.updates.RoomPlayer players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::battlemon::updates::RoomPlayer* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::updates::RoomPlayer >*
      mutable_players();
  private:
  const ::game::battlemon::updates::RoomPlayer& _internal_players(int index) const;
  ::game::battlemon::updates::RoomPlayer* _internal_add_players();
  public:
  const ::game::battlemon::updates::RoomPlayer& players(int index) const;
  ::game::battlemon::updates::RoomPlayer* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::updates::RoomPlayer >&
      players() const;

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string server_ip = 2;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.updates.RoomInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::updates::RoomPlayer > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updates_2eproto;
};
// -------------------------------------------------------------------

class RoomPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.updates.RoomPlayer) */ {
 public:
  inline RoomPlayer() : RoomPlayer(nullptr) {}
  ~RoomPlayer() override;
  explicit PROTOBUF_CONSTEXPR RoomPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomPlayer(const RoomPlayer& from);
  RoomPlayer(RoomPlayer&& from) noexcept
    : RoomPlayer() {
    *this = ::std::move(from);
  }

  inline RoomPlayer& operator=(const RoomPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomPlayer& operator=(RoomPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomPlayer* internal_default_instance() {
    return reinterpret_cast<const RoomPlayer*>(
               &_RoomPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomPlayer& a, RoomPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomPlayer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomPlayer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomPlayer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomPlayer& from) {
    RoomPlayer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomPlayer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.updates.RoomPlayer";
  }
  protected:
  explicit RoomPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLemonFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .game.battlemon.items.Item lemon = 2;
  bool has_lemon() const;
  private:
  bool _internal_has_lemon() const;
  public:
  void clear_lemon();
  const ::game::battlemon::items::Item& lemon() const;
  PROTOBUF_NODISCARD ::game::battlemon::items::Item* release_lemon();
  ::game::battlemon::items::Item* mutable_lemon();
  void set_allocated_lemon(::game::battlemon::items::Item* lemon);
  private:
  const ::game::battlemon::items::Item& _internal_lemon() const;
  ::game::battlemon::items::Item* _internal_mutable_lemon();
  public:
  void unsafe_arena_set_allocated_lemon(
      ::game::battlemon::items::Item* lemon);
  ::game::battlemon::items::Item* unsafe_arena_release_lemon();

  // @@protoc_insertion_point(class_scope:game.battlemon.updates.RoomPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::game::battlemon::items::Item* lemon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_updates_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Update

// string id = 1;
inline void Update::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Update::id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.Update.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Update::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.updates.Update.id)
}
inline std::string* Update::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.Update.id)
  return _s;
}
inline const std::string& Update::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Update::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Update::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Update::release_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.Update.id)
  return _impl_.id_.Release();
}
inline void Update::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.Update.id)
}

// int64 timestamp = 2;
inline void Update::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t Update::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t Update::timestamp() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.Update.timestamp)
  return _internal_timestamp();
}
inline void Update::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void Update::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:game.battlemon.updates.Update.timestamp)
}

// string message = 3;
inline void Update::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& Update::message() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.Update.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Update::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.updates.Update.message)
}
inline std::string* Update::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.Update.message)
  return _s;
}
inline const std::string& Update::_internal_message() const {
  return _impl_.message_.Get();
}
inline void Update::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* Update::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* Update::release_message() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.Update.message)
  return _impl_.message_.Release();
}
inline void Update::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.Update.message)
}

// -------------------------------------------------------------------

// UpdateMessage

// .game.battlemon.updates.RoomNeedAccept room_need_accept = 1;
inline bool UpdateMessage::_internal_has_room_need_accept() const {
  return update_case() == kRoomNeedAccept;
}
inline bool UpdateMessage::has_room_need_accept() const {
  return _internal_has_room_need_accept();
}
inline void UpdateMessage::set_has_room_need_accept() {
  _impl_._oneof_case_[0] = kRoomNeedAccept;
}
inline void UpdateMessage::clear_room_need_accept() {
  if (_internal_has_room_need_accept()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.room_need_accept_;
    }
    clear_has_update();
  }
}
inline ::game::battlemon::updates::RoomNeedAccept* UpdateMessage::release_room_need_accept() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.room_need_accept)
  if (_internal_has_room_need_accept()) {
    clear_has_update();
    ::game::battlemon::updates::RoomNeedAccept* temp = _impl_.update_.room_need_accept_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.room_need_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::updates::RoomNeedAccept& UpdateMessage::_internal_room_need_accept() const {
  return _internal_has_room_need_accept()
      ? *_impl_.update_.room_need_accept_
      : reinterpret_cast< ::game::battlemon::updates::RoomNeedAccept&>(::game::battlemon::updates::_RoomNeedAccept_default_instance_);
}
inline const ::game::battlemon::updates::RoomNeedAccept& UpdateMessage::room_need_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.room_need_accept)
  return _internal_room_need_accept();
}
inline ::game::battlemon::updates::RoomNeedAccept* UpdateMessage::unsafe_arena_release_room_need_accept() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.room_need_accept)
  if (_internal_has_room_need_accept()) {
    clear_has_update();
    ::game::battlemon::updates::RoomNeedAccept* temp = _impl_.update_.room_need_accept_;
    _impl_.update_.room_need_accept_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_room_need_accept(::game::battlemon::updates::RoomNeedAccept* room_need_accept) {
  clear_update();
  if (room_need_accept) {
    set_has_room_need_accept();
    _impl_.update_.room_need_accept_ = room_need_accept;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.room_need_accept)
}
inline ::game::battlemon::updates::RoomNeedAccept* UpdateMessage::_internal_mutable_room_need_accept() {
  if (!_internal_has_room_need_accept()) {
    clear_update();
    set_has_room_need_accept();
    _impl_.update_.room_need_accept_ = CreateMaybeMessage< ::game::battlemon::updates::RoomNeedAccept >(GetArenaForAllocation());
  }
  return _impl_.update_.room_need_accept_;
}
inline ::game::battlemon::updates::RoomNeedAccept* UpdateMessage::mutable_room_need_accept() {
  ::game::battlemon::updates::RoomNeedAccept* _msg = _internal_mutable_room_need_accept();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.room_need_accept)
  return _msg;
}

// .game.battlemon.common.Empty room_accepting_canceled = 2;
inline bool UpdateMessage::_internal_has_room_accepting_canceled() const {
  return update_case() == kRoomAcceptingCanceled;
}
inline bool UpdateMessage::has_room_accepting_canceled() const {
  return _internal_has_room_accepting_canceled();
}
inline void UpdateMessage::set_has_room_accepting_canceled() {
  _impl_._oneof_case_[0] = kRoomAcceptingCanceled;
}
inline ::game::battlemon::common::Empty* UpdateMessage::release_room_accepting_canceled() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
  if (_internal_has_room_accepting_canceled()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.room_accepting_canceled_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.room_accepting_canceled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::common::Empty& UpdateMessage::_internal_room_accepting_canceled() const {
  return _internal_has_room_accepting_canceled()
      ? *_impl_.update_.room_accepting_canceled_
      : reinterpret_cast< ::game::battlemon::common::Empty&>(::game::battlemon::common::_Empty_default_instance_);
}
inline const ::game::battlemon::common::Empty& UpdateMessage::room_accepting_canceled() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
  return _internal_room_accepting_canceled();
}
inline ::game::battlemon::common::Empty* UpdateMessage::unsafe_arena_release_room_accepting_canceled() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
  if (_internal_has_room_accepting_canceled()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.room_accepting_canceled_;
    _impl_.update_.room_accepting_canceled_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_room_accepting_canceled(::game::battlemon::common::Empty* room_accepting_canceled) {
  clear_update();
  if (room_accepting_canceled) {
    set_has_room_accepting_canceled();
    _impl_.update_.room_accepting_canceled_ = room_accepting_canceled;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
}
inline ::game::battlemon::common::Empty* UpdateMessage::_internal_mutable_room_accepting_canceled() {
  if (!_internal_has_room_accepting_canceled()) {
    clear_update();
    set_has_room_accepting_canceled();
    _impl_.update_.room_accepting_canceled_ = CreateMaybeMessage< ::game::battlemon::common::Empty >(GetArenaForAllocation());
  }
  return _impl_.update_.room_accepting_canceled_;
}
inline ::game::battlemon::common::Empty* UpdateMessage::mutable_room_accepting_canceled() {
  ::game::battlemon::common::Empty* _msg = _internal_mutable_room_accepting_canceled();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
  return _msg;
}

// .game.battlemon.updates.RoomInfo room_found = 3;
inline bool UpdateMessage::_internal_has_room_found() const {
  return update_case() == kRoomFound;
}
inline bool UpdateMessage::has_room_found() const {
  return _internal_has_room_found();
}
inline void UpdateMessage::set_has_room_found() {
  _impl_._oneof_case_[0] = kRoomFound;
}
inline void UpdateMessage::clear_room_found() {
  if (_internal_has_room_found()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.room_found_;
    }
    clear_has_update();
  }
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::release_room_found() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.room_found)
  if (_internal_has_room_found()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_found_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.room_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::_internal_room_found() const {
  return _internal_has_room_found()
      ? *_impl_.update_.room_found_
      : reinterpret_cast< ::game::battlemon::updates::RoomInfo&>(::game::battlemon::updates::_RoomInfo_default_instance_);
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::room_found() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.room_found)
  return _internal_room_found();
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::unsafe_arena_release_room_found() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.room_found)
  if (_internal_has_room_found()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_found_;
    _impl_.update_.room_found_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_room_found(::game::battlemon::updates::RoomInfo* room_found) {
  clear_update();
  if (room_found) {
    set_has_room_found();
    _impl_.update_.room_found_ = room_found;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.room_found)
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::_internal_mutable_room_found() {
  if (!_internal_has_room_found()) {
    clear_update();
    set_has_room_found();
    _impl_.update_.room_found_ = CreateMaybeMessage< ::game::battlemon::updates::RoomInfo >(GetArenaForAllocation());
  }
  return _impl_.update_.room_found_;
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::mutable_room_found() {
  ::game::battlemon::updates::RoomInfo* _msg = _internal_mutable_room_found();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.room_found)
  return _msg;
}

// .game.battlemon.updates.RoomInfo room_teammates = 4;
inline bool UpdateMessage::_internal_has_room_teammates() const {
  return update_case() == kRoomTeammates;
}
inline bool UpdateMessage::has_room_teammates() const {
  return _internal_has_room_teammates();
}
inline void UpdateMessage::set_has_room_teammates() {
  _impl_._oneof_case_[0] = kRoomTeammates;
}
inline void UpdateMessage::clear_room_teammates() {
  if (_internal_has_room_teammates()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.room_teammates_;
    }
    clear_has_update();
  }
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::release_room_teammates() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.room_teammates)
  if (_internal_has_room_teammates()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_teammates_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.room_teammates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::_internal_room_teammates() const {
  return _internal_has_room_teammates()
      ? *_impl_.update_.room_teammates_
      : reinterpret_cast< ::game::battlemon::updates::RoomInfo&>(::game::battlemon::updates::_RoomInfo_default_instance_);
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::room_teammates() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.room_teammates)
  return _internal_room_teammates();
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::unsafe_arena_release_room_teammates() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.room_teammates)
  if (_internal_has_room_teammates()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_teammates_;
    _impl_.update_.room_teammates_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_room_teammates(::game::battlemon::updates::RoomInfo* room_teammates) {
  clear_update();
  if (room_teammates) {
    set_has_room_teammates();
    _impl_.update_.room_teammates_ = room_teammates;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.room_teammates)
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::_internal_mutable_room_teammates() {
  if (!_internal_has_room_teammates()) {
    clear_update();
    set_has_room_teammates();
    _impl_.update_.room_teammates_ = CreateMaybeMessage< ::game::battlemon::updates::RoomInfo >(GetArenaForAllocation());
  }
  return _impl_.update_.room_teammates_;
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::mutable_room_teammates() {
  ::game::battlemon::updates::RoomInfo* _msg = _internal_mutable_room_teammates();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.room_teammates)
  return _msg;
}

// .game.battlemon.updates.RoomInfo room_ready = 5;
inline bool UpdateMessage::_internal_has_room_ready() const {
  return update_case() == kRoomReady;
}
inline bool UpdateMessage::has_room_ready() const {
  return _internal_has_room_ready();
}
inline void UpdateMessage::set_has_room_ready() {
  _impl_._oneof_case_[0] = kRoomReady;
}
inline void UpdateMessage::clear_room_ready() {
  if (_internal_has_room_ready()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.room_ready_;
    }
    clear_has_update();
  }
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::release_room_ready() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.room_ready)
  if (_internal_has_room_ready()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_ready_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.room_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::_internal_room_ready() const {
  return _internal_has_room_ready()
      ? *_impl_.update_.room_ready_
      : reinterpret_cast< ::game::battlemon::updates::RoomInfo&>(::game::battlemon::updates::_RoomInfo_default_instance_);
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::room_ready() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.room_ready)
  return _internal_room_ready();
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::unsafe_arena_release_room_ready() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.room_ready)
  if (_internal_has_room_ready()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.room_ready_;
    _impl_.update_.room_ready_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_room_ready(::game::battlemon::updates::RoomInfo* room_ready) {
  clear_update();
  if (room_ready) {
    set_has_room_ready();
    _impl_.update_.room_ready_ = room_ready;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.room_ready)
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::_internal_mutable_room_ready() {
  if (!_internal_has_room_ready()) {
    clear_update();
    set_has_room_ready();
    _impl_.update_.room_ready_ = CreateMaybeMessage< ::game::battlemon::updates::RoomInfo >(GetArenaForAllocation());
  }
  return _impl_.update_.room_ready_;
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::mutable_room_ready() {
  ::game::battlemon::updates::RoomInfo* _msg = _internal_mutable_room_ready();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.room_ready)
  return _msg;
}

// .game.battlemon.common.Empty user_is_already_in_line = 6;
inline bool UpdateMessage::_internal_has_user_is_already_in_line() const {
  return update_case() == kUserIsAlreadyInLine;
}
inline bool UpdateMessage::has_user_is_already_in_line() const {
  return _internal_has_user_is_already_in_line();
}
inline void UpdateMessage::set_has_user_is_already_in_line() {
  _impl_._oneof_case_[0] = kUserIsAlreadyInLine;
}
inline ::game::battlemon::common::Empty* UpdateMessage::release_user_is_already_in_line() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
  if (_internal_has_user_is_already_in_line()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.user_is_already_in_line_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.user_is_already_in_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::common::Empty& UpdateMessage::_internal_user_is_already_in_line() const {
  return _internal_has_user_is_already_in_line()
      ? *_impl_.update_.user_is_already_in_line_
      : reinterpret_cast< ::game::battlemon::common::Empty&>(::game::battlemon::common::_Empty_default_instance_);
}
inline const ::game::battlemon::common::Empty& UpdateMessage::user_is_already_in_line() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
  return _internal_user_is_already_in_line();
}
inline ::game::battlemon::common::Empty* UpdateMessage::unsafe_arena_release_user_is_already_in_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
  if (_internal_has_user_is_already_in_line()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.user_is_already_in_line_;
    _impl_.update_.user_is_already_in_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_user_is_already_in_line(::game::battlemon::common::Empty* user_is_already_in_line) {
  clear_update();
  if (user_is_already_in_line) {
    set_has_user_is_already_in_line();
    _impl_.update_.user_is_already_in_line_ = user_is_already_in_line;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
}
inline ::game::battlemon::common::Empty* UpdateMessage::_internal_mutable_user_is_already_in_line() {
  if (!_internal_has_user_is_already_in_line()) {
    clear_update();
    set_has_user_is_already_in_line();
    _impl_.update_.user_is_already_in_line_ = CreateMaybeMessage< ::game::battlemon::common::Empty >(GetArenaForAllocation());
  }
  return _impl_.update_.user_is_already_in_line_;
}
inline ::game::battlemon::common::Empty* UpdateMessage::mutable_user_is_already_in_line() {
  ::game::battlemon::common::Empty* _msg = _internal_mutable_user_is_already_in_line();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
  return _msg;
}

// .game.battlemon.updates.RoomInfo user_is_already_in_battle = 7;
inline bool UpdateMessage::_internal_has_user_is_already_in_battle() const {
  return update_case() == kUserIsAlreadyInBattle;
}
inline bool UpdateMessage::has_user_is_already_in_battle() const {
  return _internal_has_user_is_already_in_battle();
}
inline void UpdateMessage::set_has_user_is_already_in_battle() {
  _impl_._oneof_case_[0] = kUserIsAlreadyInBattle;
}
inline void UpdateMessage::clear_user_is_already_in_battle() {
  if (_internal_has_user_is_already_in_battle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.user_is_already_in_battle_;
    }
    clear_has_update();
  }
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::release_user_is_already_in_battle() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
  if (_internal_has_user_is_already_in_battle()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.user_is_already_in_battle_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.user_is_already_in_battle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::_internal_user_is_already_in_battle() const {
  return _internal_has_user_is_already_in_battle()
      ? *_impl_.update_.user_is_already_in_battle_
      : reinterpret_cast< ::game::battlemon::updates::RoomInfo&>(::game::battlemon::updates::_RoomInfo_default_instance_);
}
inline const ::game::battlemon::updates::RoomInfo& UpdateMessage::user_is_already_in_battle() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
  return _internal_user_is_already_in_battle();
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::unsafe_arena_release_user_is_already_in_battle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
  if (_internal_has_user_is_already_in_battle()) {
    clear_has_update();
    ::game::battlemon::updates::RoomInfo* temp = _impl_.update_.user_is_already_in_battle_;
    _impl_.update_.user_is_already_in_battle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_user_is_already_in_battle(::game::battlemon::updates::RoomInfo* user_is_already_in_battle) {
  clear_update();
  if (user_is_already_in_battle) {
    set_has_user_is_already_in_battle();
    _impl_.update_.user_is_already_in_battle_ = user_is_already_in_battle;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::_internal_mutable_user_is_already_in_battle() {
  if (!_internal_has_user_is_already_in_battle()) {
    clear_update();
    set_has_user_is_already_in_battle();
    _impl_.update_.user_is_already_in_battle_ = CreateMaybeMessage< ::game::battlemon::updates::RoomInfo >(GetArenaForAllocation());
  }
  return _impl_.update_.user_is_already_in_battle_;
}
inline ::game::battlemon::updates::RoomInfo* UpdateMessage::mutable_user_is_already_in_battle() {
  ::game::battlemon::updates::RoomInfo* _msg = _internal_mutable_user_is_already_in_battle();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
  return _msg;
}

// .game.battlemon.common.Empty user_out_of_line = 8;
inline bool UpdateMessage::_internal_has_user_out_of_line() const {
  return update_case() == kUserOutOfLine;
}
inline bool UpdateMessage::has_user_out_of_line() const {
  return _internal_has_user_out_of_line();
}
inline void UpdateMessage::set_has_user_out_of_line() {
  _impl_._oneof_case_[0] = kUserOutOfLine;
}
inline ::game::battlemon::common::Empty* UpdateMessage::release_user_out_of_line() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.UpdateMessage.user_out_of_line)
  if (_internal_has_user_out_of_line()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.user_out_of_line_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.update_.user_out_of_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::game::battlemon::common::Empty& UpdateMessage::_internal_user_out_of_line() const {
  return _internal_has_user_out_of_line()
      ? *_impl_.update_.user_out_of_line_
      : reinterpret_cast< ::game::battlemon::common::Empty&>(::game::battlemon::common::_Empty_default_instance_);
}
inline const ::game::battlemon::common::Empty& UpdateMessage::user_out_of_line() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.UpdateMessage.user_out_of_line)
  return _internal_user_out_of_line();
}
inline ::game::battlemon::common::Empty* UpdateMessage::unsafe_arena_release_user_out_of_line() {
  // @@protoc_insertion_point(field_unsafe_arena_release:game.battlemon.updates.UpdateMessage.user_out_of_line)
  if (_internal_has_user_out_of_line()) {
    clear_has_update();
    ::game::battlemon::common::Empty* temp = _impl_.update_.user_out_of_line_;
    _impl_.update_.user_out_of_line_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateMessage::unsafe_arena_set_allocated_user_out_of_line(::game::battlemon::common::Empty* user_out_of_line) {
  clear_update();
  if (user_out_of_line) {
    set_has_user_out_of_line();
    _impl_.update_.user_out_of_line_ = user_out_of_line;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.UpdateMessage.user_out_of_line)
}
inline ::game::battlemon::common::Empty* UpdateMessage::_internal_mutable_user_out_of_line() {
  if (!_internal_has_user_out_of_line()) {
    clear_update();
    set_has_user_out_of_line();
    _impl_.update_.user_out_of_line_ = CreateMaybeMessage< ::game::battlemon::common::Empty >(GetArenaForAllocation());
  }
  return _impl_.update_.user_out_of_line_;
}
inline ::game::battlemon::common::Empty* UpdateMessage::mutable_user_out_of_line() {
  ::game::battlemon::common::Empty* _msg = _internal_mutable_user_out_of_line();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.UpdateMessage.user_out_of_line)
  return _msg;
}

inline bool UpdateMessage::has_update() const {
  return update_case() != UPDATE_NOT_SET;
}
inline void UpdateMessage::clear_has_update() {
  _impl_._oneof_case_[0] = UPDATE_NOT_SET;
}
inline UpdateMessage::UpdateCase UpdateMessage::update_case() const {
  return UpdateMessage::UpdateCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// RoomNeedAccept

// bool manual_accept = 1;
inline void RoomNeedAccept::clear_manual_accept() {
  _impl_.manual_accept_ = false;
}
inline bool RoomNeedAccept::_internal_manual_accept() const {
  return _impl_.manual_accept_;
}
inline bool RoomNeedAccept::manual_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomNeedAccept.manual_accept)
  return _internal_manual_accept();
}
inline void RoomNeedAccept::_internal_set_manual_accept(bool value) {
  
  _impl_.manual_accept_ = value;
}
inline void RoomNeedAccept::set_manual_accept(bool value) {
  _internal_set_manual_accept(value);
  // @@protoc_insertion_point(field_set:game.battlemon.updates.RoomNeedAccept.manual_accept)
}

// int32 time_to_accept = 2;
inline void RoomNeedAccept::clear_time_to_accept() {
  _impl_.time_to_accept_ = 0;
}
inline int32_t RoomNeedAccept::_internal_time_to_accept() const {
  return _impl_.time_to_accept_;
}
inline int32_t RoomNeedAccept::time_to_accept() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomNeedAccept.time_to_accept)
  return _internal_time_to_accept();
}
inline void RoomNeedAccept::_internal_set_time_to_accept(int32_t value) {
  
  _impl_.time_to_accept_ = value;
}
inline void RoomNeedAccept::set_time_to_accept(int32_t value) {
  _internal_set_time_to_accept(value);
  // @@protoc_insertion_point(field_set:game.battlemon.updates.RoomNeedAccept.time_to_accept)
}

// -------------------------------------------------------------------

// RoomInfo

// string room_id = 1;
inline void RoomInfo::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& RoomInfo::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomInfo.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.updates.RoomInfo.room_id)
}
inline std::string* RoomInfo::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.RoomInfo.room_id)
  return _s;
}
inline const std::string& RoomInfo::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void RoomInfo::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.RoomInfo.room_id)
  return _impl_.room_id_.Release();
}
inline void RoomInfo::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.RoomInfo.room_id)
}

// string server_ip = 2;
inline void RoomInfo::clear_server_ip() {
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& RoomInfo::server_ip() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomInfo.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfo::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.updates.RoomInfo.server_ip)
}
inline std::string* RoomInfo::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.RoomInfo.server_ip)
  return _s;
}
inline const std::string& RoomInfo::_internal_server_ip() const {
  return _impl_.server_ip_.Get();
}
inline void RoomInfo::_internal_set_server_ip(const std::string& value) {
  
  _impl_.server_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfo::_internal_mutable_server_ip() {
  
  return _impl_.server_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfo::release_server_ip() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.RoomInfo.server_ip)
  return _impl_.server_ip_.Release();
}
inline void RoomInfo::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  _impl_.server_ip_.SetAllocated(server_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_ip_.IsDefault()) {
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.RoomInfo.server_ip)
}

// repeated .game.battlemon.updates.RoomPlayer players = 3;
inline int RoomInfo::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int RoomInfo::players_size() const {
  return _internal_players_size();
}
inline void RoomInfo::clear_players() {
  _impl_.players_.Clear();
}
inline ::game::battlemon::updates::RoomPlayer* RoomInfo::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.RoomInfo.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::updates::RoomPlayer >*
RoomInfo::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.updates.RoomInfo.players)
  return &_impl_.players_;
}
inline const ::game::battlemon::updates::RoomPlayer& RoomInfo::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::game::battlemon::updates::RoomPlayer& RoomInfo::players(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomInfo.players)
  return _internal_players(index);
}
inline ::game::battlemon::updates::RoomPlayer* RoomInfo::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::game::battlemon::updates::RoomPlayer* RoomInfo::add_players() {
  ::game::battlemon::updates::RoomPlayer* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:game.battlemon.updates.RoomInfo.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::updates::RoomPlayer >&
RoomInfo::players() const {
  // @@protoc_insertion_point(field_list:game.battlemon.updates.RoomInfo.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// RoomPlayer

// string user_id = 1;
inline void RoomPlayer::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& RoomPlayer::user_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomPlayer.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomPlayer::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.updates.RoomPlayer.user_id)
}
inline std::string* RoomPlayer::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.RoomPlayer.user_id)
  return _s;
}
inline const std::string& RoomPlayer::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void RoomPlayer::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomPlayer::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomPlayer::release_user_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.RoomPlayer.user_id)
  return _impl_.user_id_.Release();
}
inline void RoomPlayer::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.RoomPlayer.user_id)
}

// .game.battlemon.items.Item lemon = 2;
inline bool RoomPlayer::_internal_has_lemon() const {
  return this != internal_default_instance() && _impl_.lemon_ != nullptr;
}
inline bool RoomPlayer::has_lemon() const {
  return _internal_has_lemon();
}
inline const ::game::battlemon::items::Item& RoomPlayer::_internal_lemon() const {
  const ::game::battlemon::items::Item* p = _impl_.lemon_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::items::Item&>(
      ::game::battlemon::items::_Item_default_instance_);
}
inline const ::game::battlemon::items::Item& RoomPlayer::lemon() const {
  // @@protoc_insertion_point(field_get:game.battlemon.updates.RoomPlayer.lemon)
  return _internal_lemon();
}
inline void RoomPlayer::unsafe_arena_set_allocated_lemon(
    ::game::battlemon::items::Item* lemon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  _impl_.lemon_ = lemon;
  if (lemon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.updates.RoomPlayer.lemon)
}
inline ::game::battlemon::items::Item* RoomPlayer::release_lemon() {
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::items::Item* RoomPlayer::unsafe_arena_release_lemon() {
  // @@protoc_insertion_point(field_release:game.battlemon.updates.RoomPlayer.lemon)
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
  return temp;
}
inline ::game::battlemon::items::Item* RoomPlayer::_internal_mutable_lemon() {
  
  if (_impl_.lemon_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::items::Item>(GetArenaForAllocation());
    _impl_.lemon_ = p;
  }
  return _impl_.lemon_;
}
inline ::game::battlemon::items::Item* RoomPlayer::mutable_lemon() {
  ::game::battlemon::items::Item* _msg = _internal_mutable_lemon();
  // @@protoc_insertion_point(field_mutable:game.battlemon.updates.RoomPlayer.lemon)
  return _msg;
}
inline void RoomPlayer::set_allocated_lemon(::game::battlemon::items::Item* lemon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  if (lemon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lemon));
    if (message_arena != submessage_arena) {
      lemon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lemon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lemon_ = lemon;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.RoomPlayer.lemon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace updates
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_updates_2eproto
