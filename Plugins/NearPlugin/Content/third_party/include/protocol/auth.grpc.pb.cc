// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: auth.proto

#include "auth.pb.h"
#include "auth.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace battlemon {
namespace auth {

static const char* AuthService_method_names[] = {
  "/game.battlemon.auth.AuthService/SendCode",
  "/game.battlemon.auth.AuthService/VerifyCode",
  "/game.battlemon.auth.AuthService/GetWalletAddress",
};

std::unique_ptr< AuthService::Stub> AuthService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< AuthService::Stub> stub(new AuthService::Stub(channel, options));
  return stub;
}

AuthService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendCode_(AuthService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_VerifyCode_(AuthService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetWalletAddress_(AuthService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status AuthService::Stub::SendCode(::grpc::ClientContext* context, const ::game::battlemon::auth::SendCodeRequest& request, ::game::battlemon::auth::SendCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::auth::SendCodeRequest, ::game::battlemon::auth::SendCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendCode_, context, request, response);
}

void AuthService::Stub::async::SendCode(::grpc::ClientContext* context, const ::game::battlemon::auth::SendCodeRequest* request, ::game::battlemon::auth::SendCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::auth::SendCodeRequest, ::game::battlemon::auth::SendCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCode_, context, request, response, std::move(f));
}

void AuthService::Stub::async::SendCode(::grpc::ClientContext* context, const ::game::battlemon::auth::SendCodeRequest* request, ::game::battlemon::auth::SendCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SendCodeResponse>* AuthService::Stub::PrepareAsyncSendCodeRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SendCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::auth::SendCodeResponse, ::game::battlemon::auth::SendCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::SendCodeResponse>* AuthService::Stub::AsyncSendCodeRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::SendCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthService::Stub::VerifyCode(::grpc::ClientContext* context, const ::game::battlemon::auth::VerifyCodeRequest& request, ::game::battlemon::auth::VerifyCodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::auth::VerifyCodeRequest, ::game::battlemon::auth::VerifyCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_VerifyCode_, context, request, response);
}

void AuthService::Stub::async::VerifyCode(::grpc::ClientContext* context, const ::game::battlemon::auth::VerifyCodeRequest* request, ::game::battlemon::auth::VerifyCodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::auth::VerifyCodeRequest, ::game::battlemon::auth::VerifyCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyCode_, context, request, response, std::move(f));
}

void AuthService::Stub::async::VerifyCode(::grpc::ClientContext* context, const ::game::battlemon::auth::VerifyCodeRequest* request, ::game::battlemon::auth::VerifyCodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_VerifyCode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::VerifyCodeResponse>* AuthService::Stub::PrepareAsyncVerifyCodeRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::VerifyCodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::auth::VerifyCodeResponse, ::game::battlemon::auth::VerifyCodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_VerifyCode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::VerifyCodeResponse>* AuthService::Stub::AsyncVerifyCodeRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::VerifyCodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncVerifyCodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status AuthService::Stub::GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::game::battlemon::auth::WalletAddressResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetWalletAddress_, context, request, response);
}

void AuthService::Stub::async::GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWalletAddress_, context, request, response, std::move(f));
}

void AuthService::Stub::async::GetWalletAddress(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetWalletAddress_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>* AuthService::Stub::PrepareAsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::auth::WalletAddressResponse, ::game::battlemon::auth::WalletAddressRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetWalletAddress_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::auth::WalletAddressResponse>* AuthService::Stub::AsyncGetWalletAddressRaw(::grpc::ClientContext* context, const ::game::battlemon::auth::WalletAddressRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetWalletAddressRaw(context, request, cq);
  result->StartCall();
  return result;
}

AuthService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::game::battlemon::auth::SendCodeRequest, ::game::battlemon::auth::SendCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::auth::SendCodeRequest* req,
             ::game::battlemon::auth::SendCodeResponse* resp) {
               return service->SendCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::game::battlemon::auth::VerifyCodeRequest, ::game::battlemon::auth::VerifyCodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::auth::VerifyCodeRequest* req,
             ::game::battlemon::auth::VerifyCodeResponse* resp) {
               return service->VerifyCode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      AuthService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< AuthService::Service, ::game::battlemon::auth::WalletAddressRequest, ::game::battlemon::auth::WalletAddressResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](AuthService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::auth::WalletAddressRequest* req,
             ::game::battlemon::auth::WalletAddressResponse* resp) {
               return service->GetWalletAddress(ctx, req, resp);
             }, this)));
}

AuthService::Service::~Service() {
}

::grpc::Status AuthService::Service::SendCode(::grpc::ServerContext* context, const ::game::battlemon::auth::SendCodeRequest* request, ::game::battlemon::auth::SendCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::VerifyCode(::grpc::ServerContext* context, const ::game::battlemon::auth::VerifyCodeRequest* request, ::game::battlemon::auth::VerifyCodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status AuthService::Service::GetWalletAddress(::grpc::ServerContext* context, const ::game::battlemon::auth::WalletAddressRequest* request, ::game::battlemon::auth::WalletAddressResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace battlemon
}  // namespace auth

