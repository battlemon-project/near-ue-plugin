// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: items.proto

#include "items.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace items {
PROTOBUF_CONSTEXPR ItemsRequest::ItemsRequest(
    ::_pbi::ConstantInitialized) {}
struct ItemsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemsRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemsRequestDefaultTypeInternal() {}
  union {
    ItemsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemsRequestDefaultTypeInternal _ItemsRequest_default_instance_;
PROTOBUF_CONSTEXPR ItemsResponse::ItemsResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ItemsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemsResponseDefaultTypeInternal() {}
  union {
    ItemsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemsResponseDefaultTypeInternal _ItemsResponse_default_instance_;
PROTOBUF_CONSTEXPR Item::Item(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.token_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.media_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.owner_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.in_fight_)*/false
  , /*decltype(_impl_.model_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ItemDefaultTypeInternal() {}
  union {
    Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ItemDefaultTypeInternal _Item_default_instance_;
PROTOBUF_CONSTEXPR LemonModel::LemonModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attached_bundles_)*/{}
  , /*decltype(_impl_.exo_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.eyes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.head_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.teeth_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.face_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cap_)*/nullptr
  , /*decltype(_impl_.cloth_)*/nullptr
  , /*decltype(_impl_.fire_arm_)*/nullptr
  , /*decltype(_impl_.cold_arm_)*/nullptr
  , /*decltype(_impl_.back_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LemonModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LemonModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LemonModelDefaultTypeInternal() {}
  union {
    LemonModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LemonModelDefaultTypeInternal _LemonModel_default_instance_;
PROTOBUF_CONSTEXPR OutfitModel::OutfitModel(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.flavour_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.token_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OutfitModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OutfitModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OutfitModelDefaultTypeInternal() {}
  union {
    OutfitModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OutfitModelDefaultTypeInternal _OutfitModel_default_instance_;
PROTOBUF_CONSTEXPR WeaponBundle::WeaponBundle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_num_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WeaponBundleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeaponBundleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeaponBundleDefaultTypeInternal() {}
  union {
    WeaponBundle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeaponBundleDefaultTypeInternal _WeaponBundle_default_instance_;
PROTOBUF_CONSTEXPR WeaponBundleItem::WeaponBundleItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skin_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_type_)*/0
  , /*decltype(_impl_.slot_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WeaponBundleItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WeaponBundleItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WeaponBundleItemDefaultTypeInternal() {}
  union {
    WeaponBundleItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WeaponBundleItemDefaultTypeInternal _WeaponBundleItem_default_instance_;
PROTOBUF_CONSTEXPR GetBundlesRequest::GetBundlesRequest(
    ::_pbi::ConstantInitialized) {}
struct GetBundlesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBundlesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBundlesRequestDefaultTypeInternal() {}
  union {
    GetBundlesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBundlesRequestDefaultTypeInternal _GetBundlesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetBundlesResponse::GetBundlesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bundles_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetBundlesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBundlesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBundlesResponseDefaultTypeInternal() {}
  union {
    GetBundlesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBundlesResponseDefaultTypeInternal _GetBundlesResponse_default_instance_;
PROTOBUF_CONSTEXPR EditBundleRequest::EditBundleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EditBundleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditBundleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditBundleRequestDefaultTypeInternal() {}
  union {
    EditBundleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditBundleRequestDefaultTypeInternal _EditBundleRequest_default_instance_;
PROTOBUF_CONSTEXPR AttachBundleRequest::AttachBundleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lemon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AttachBundleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AttachBundleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AttachBundleRequestDefaultTypeInternal() {}
  union {
    AttachBundleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AttachBundleRequestDefaultTypeInternal _AttachBundleRequest_default_instance_;
PROTOBUF_CONSTEXPR DetachBundleRequest::DetachBundleRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lemon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bundle_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DetachBundleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DetachBundleRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DetachBundleRequestDefaultTypeInternal() {}
  union {
    DetachBundleRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DetachBundleRequestDefaultTypeInternal _DetachBundleRequest_default_instance_;
}  // namespace items
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_items_2eproto[12];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_items_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_items_2eproto = nullptr;

const uint32_t TableStruct_items_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::ItemsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::ItemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::ItemsResponse, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_.media_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_.in_fight_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::Item, _impl_.model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.cap_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.cloth_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.exo_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.eyes_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.head_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.teeth_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.face_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.fire_arm_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.cold_arm_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.back_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::LemonModel, _impl_.attached_bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::OutfitModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::OutfitModel, _impl_.flavour_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::OutfitModel, _impl_.token_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::OutfitModel, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundle, _impl_.bundle_num_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundle, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundle, _impl_.title_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundle, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundleItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundleItem, _impl_.item_type_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundleItem, _impl_.skin_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::WeaponBundleItem, _impl_.slot_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::GetBundlesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::GetBundlesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::GetBundlesResponse, _impl_.bundles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::EditBundleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::EditBundleRequest, _impl_.bundle_num_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::EditBundleRequest, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::EditBundleRequest, _impl_.title_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::AttachBundleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::AttachBundleRequest, _impl_.bundle_num_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::AttachBundleRequest, _impl_.lemon_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::DetachBundleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::DetachBundleRequest, _impl_.bundle_num_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::items::DetachBundleRequest, _impl_.lemon_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::items::ItemsRequest)},
  { 6, -1, -1, sizeof(::game::battlemon::items::ItemsResponse)},
  { 13, -1, -1, sizeof(::game::battlemon::items::Item)},
  { 26, -1, -1, sizeof(::game::battlemon::items::LemonModel)},
  { 43, -1, -1, sizeof(::game::battlemon::items::OutfitModel)},
  { 52, -1, -1, sizeof(::game::battlemon::items::WeaponBundle)},
  { 62, -1, -1, sizeof(::game::battlemon::items::WeaponBundleItem)},
  { 71, -1, -1, sizeof(::game::battlemon::items::GetBundlesRequest)},
  { 77, -1, -1, sizeof(::game::battlemon::items::GetBundlesResponse)},
  { 84, -1, -1, sizeof(::game::battlemon::items::EditBundleRequest)},
  { 93, -1, -1, sizeof(::game::battlemon::items::AttachBundleRequest)},
  { 101, -1, -1, sizeof(::game::battlemon::items::DetachBundleRequest)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::items::_ItemsRequest_default_instance_._instance,
  &::game::battlemon::items::_ItemsResponse_default_instance_._instance,
  &::game::battlemon::items::_Item_default_instance_._instance,
  &::game::battlemon::items::_LemonModel_default_instance_._instance,
  &::game::battlemon::items::_OutfitModel_default_instance_._instance,
  &::game::battlemon::items::_WeaponBundle_default_instance_._instance,
  &::game::battlemon::items::_WeaponBundleItem_default_instance_._instance,
  &::game::battlemon::items::_GetBundlesRequest_default_instance_._instance,
  &::game::battlemon::items::_GetBundlesResponse_default_instance_._instance,
  &::game::battlemon::items::_EditBundleRequest_default_instance_._instance,
  &::game::battlemon::items::_AttachBundleRequest_default_instance_._instance,
  &::game::battlemon::items::_DetachBundleRequest_default_instance_._instance,
};

const char descriptor_table_protodef_items_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013items.proto\022\024game.battlemon.items\032\014com"
  "mon.proto\"\016\n\014ItemsRequest\":\n\rItemsRespon"
  "se\022)\n\005items\030\001 \003(\0132\032.game.battlemon.items"
  ".Item\"\274\001\n\004Item\022\020\n\010token_id\030\001 \001(\t\022\r\n\005medi"
  "a\030\002 \001(\t\022\020\n\010owner_id\030\003 \001(\t\022\020\n\010in_fight\030\004 "
  "\001(\010\0221\n\005lemon\030\005 \001(\0132 .game.battlemon.item"
  "s.LemonModelH\000\0223\n\006outfit\030\006 \001(\0132!.game.ba"
  "ttlemon.items.OutfitModelH\000B\007\n\005model\"\215\003\n"
  "\nLemonModel\022.\n\003cap\030\001 \001(\0132!.game.battlemo"
  "n.items.OutfitModel\0220\n\005cloth\030\002 \001(\0132!.gam"
  "e.battlemon.items.OutfitModel\022\013\n\003exo\030\003 \001"
  "(\t\022\014\n\004eyes\030\004 \001(\t\022\014\n\004head\030\005 \001(\t\022\r\n\005teeth\030"
  "\006 \001(\t\022\014\n\004face\030\007 \001(\t\0223\n\010fire_arm\030\010 \001(\0132!."
  "game.battlemon.items.OutfitModel\0223\n\010cold"
  "_arm\030\t \001(\0132!.game.battlemon.items.Outfit"
  "Model\022/\n\004back\030\n \001(\0132!.game.battlemon.ite"
  "ms.OutfitModel\022<\n\020attached_bundles\030\013 \003(\013"
  "2\".game.battlemon.items.WeaponBundle\"`\n\013"
  "OutfitModel\022\017\n\007flavour\030\001 \001(\t\022\020\n\010token_id"
  "\030\002 \001(\t\022.\n\004kind\030\003 \001(\0162 .game.battlemon.it"
  "ems.OutfitKind\"w\n\014WeaponBundle\022\022\n\nbundle"
  "_num\030\001 \001(\005\0225\n\005items\030\002 \003(\0132&.game.battlem"
  "on.items.WeaponBundleItem\022\r\n\005title\030\003 \001(\t"
  "\022\r\n\005level\030\004 \001(\005\"\236\001\n\020WeaponBundleItem\022=\n\t"
  "item_type\030\001 \001(\0162*.game.battlemon.items.W"
  "eaponBundleItemType\022\014\n\004skin\030\002 \001(\t\022=\n\tslo"
  "t_type\030\003 \001(\0162*.game.battlemon.items.Weap"
  "onBundleSlotType\"\023\n\021GetBundlesRequest\"I\n"
  "\022GetBundlesResponse\0223\n\007bundles\030\001 \003(\0132\".g"
  "ame.battlemon.items.WeaponBundle\"m\n\021Edit"
  "BundleRequest\022\022\n\nbundle_num\030\001 \001(\005\0225\n\005ite"
  "ms\030\002 \003(\0132&.game.battlemon.items.WeaponBu"
  "ndleItem\022\r\n\005title\030\003 \001(\t\";\n\023AttachBundleR"
  "equest\022\022\n\nbundle_num\030\001 \001(\005\022\020\n\010lemon_id\030\002"
  " \001(\t\";\n\023DetachBundleRequest\022\022\n\nbundle_nu"
  "m\030\001 \001(\005\022\020\n\010lemon_id\030\002 \001(\t*F\n\nOutfitKind\022"
  "\007\n\003CAP\020\000\022\t\n\005CLOTH\020\001\022\014\n\010FIRE_ARM\020\002\022\014\n\010COL"
  "D_ARM\020\003\022\010\n\004BACK\020\004*\253\001\n\024WeaponBundleItemTy"
  "pe\022\027\n\023BUNDLE_ITEM_PRIMARY\020\000\022\031\n\025BUNDLE_IT"
  "EM_SECONDARY\020\001\022\025\n\021BUNDLE_ITEM_MELEE\020\002\022\030\n"
  "\024BUNDLE_ITEM_TACTICAL\020\003\022\030\n\024BUNDLE_ITEM_M"
  "ILITARY\020\004\022\024\n\020BUNDLE_ITEM_PERK\020\005*\215\002\n\024Weap"
  "onBundleSlotType\022\027\n\023BUNDLE_SLOT_PRIMARY\020"
  "\000\022\031\n\025BUNDLE_SLOT_SECONDARY\020\001\022\025\n\021BUNDLE_S"
  "LOT_MELEE\020\002\022\034\n\030BUNDLE_SLOT_TACTICAL_ONE\020"
  "\003\022\034\n\030BUNDLE_SLOT_TACTICAL_TWO\020\004\022\034\n\030BUNDL"
  "E_SLOT_MILITARY_ONE\020\005\022\034\n\030BUNDLE_SLOT_MIL"
  "ITARY_TWO\020\006\022\030\n\024BUNDLE_SLOT_PERK_ONE\020\007\022\030\n"
  "\024BUNDLE_SLOT_PERK_TWO\020\0102\321\003\n\014ItemsService"
  "\022S\n\010GetItems\022\".game.battlemon.items.Item"
  "sRequest\032#.game.battlemon.items.ItemsRes"
  "ponse\022_\n\nGetBundles\022\'.game.battlemon.ite"
  "ms.GetBundlesRequest\032(.game.battlemon.it"
  "ems.GetBundlesResponse\022Y\n\nEditBundle\022\'.g"
  "ame.battlemon.items.EditBundleRequest\032\"."
  "game.battlemon.items.WeaponBundle\022W\n\014Att"
  "achBundle\022).game.battlemon.items.AttachB"
  "undleRequest\032\034.game.battlemon.common.Emp"
  "ty\022W\n\014DetachBundle\022).game.battlemon.item"
  "s.DetachBundleRequest\032\034.game.battlemon.c"
  "ommon.EmptyB\nZ\010servicesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_items_2eproto_deps[1] = {
  &::descriptor_table_common_2eproto,
};
static ::_pbi::once_flag descriptor_table_items_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_items_2eproto = {
    false, false, 2431, descriptor_table_protodef_items_2eproto,
    "items.proto",
    &descriptor_table_items_2eproto_once, descriptor_table_items_2eproto_deps, 1, 12,
    schemas, file_default_instances, TableStruct_items_2eproto::offsets,
    file_level_metadata_items_2eproto, file_level_enum_descriptors_items_2eproto,
    file_level_service_descriptors_items_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_items_2eproto_getter() {
  return &descriptor_table_items_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_items_2eproto(&descriptor_table_items_2eproto);
namespace game {
namespace battlemon {
namespace items {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OutfitKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2eproto);
  return file_level_enum_descriptors_items_2eproto[0];
}
bool OutfitKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponBundleItemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2eproto);
  return file_level_enum_descriptors_items_2eproto[1];
}
bool WeaponBundleItemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WeaponBundleSlotType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_items_2eproto);
  return file_level_enum_descriptors_items_2eproto[2];
}
bool WeaponBundleSlotType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ItemsRequest::_Internal {
 public:
};

ItemsRequest::ItemsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.ItemsRequest)
}
ItemsRequest::ItemsRequest(const ItemsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ItemsRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.ItemsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ItemsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[0]);
}

// ===================================================================

class ItemsResponse::_Internal {
 public:
};

ItemsResponse::ItemsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.ItemsResponse)
}
ItemsResponse::ItemsResponse(const ItemsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ItemsResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.ItemsResponse)
}

inline void ItemsResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ItemsResponse::~ItemsResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.ItemsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ItemsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ItemsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ItemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.ItemsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.battlemon.items.Item items = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.ItemsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.battlemon.items.Item items = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.ItemsResponse)
  return target;
}

size_t ItemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.ItemsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.Item items = 1;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ItemsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemsResponse::GetClassData() const { return &_class_data_; }


void ItemsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ItemsResponse*>(&to_msg);
  auto& from = static_cast<const ItemsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.ItemsResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemsResponse::CopyFrom(const ItemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.ItemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemsResponse::IsInitialized() const {
  return true;
}

void ItemsResponse::InternalSwap(ItemsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[1]);
}

// ===================================================================

class Item::_Internal {
 public:
  static const ::game::battlemon::items::LemonModel& lemon(const Item* msg);
  static const ::game::battlemon::items::OutfitModel& outfit(const Item* msg);
};

const ::game::battlemon::items::LemonModel&
Item::_Internal::lemon(const Item* msg) {
  return *msg->_impl_.model_.lemon_;
}
const ::game::battlemon::items::OutfitModel&
Item::_Internal::outfit(const Item* msg) {
  return *msg->_impl_.model_.outfit_;
}
void Item::set_allocated_lemon(::game::battlemon::items::LemonModel* lemon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (lemon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lemon);
    if (message_arena != submessage_arena) {
      lemon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lemon, submessage_arena);
    }
    set_has_lemon();
    _impl_.model_.lemon_ = lemon;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.Item.lemon)
}
void Item::set_allocated_outfit(::game::battlemon::items::OutfitModel* outfit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_model();
  if (outfit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(outfit);
    if (message_arena != submessage_arena) {
      outfit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outfit, submessage_arena);
    }
    set_has_outfit();
    _impl_.model_.outfit_ = outfit;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.Item.outfit)
}
Item::Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.Item)
}
Item::Item(const Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Item* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){}
    , decltype(_impl_.media_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.in_fight_){}
    , decltype(_impl_.model_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.token_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    _this->_impl_.token_id_.Set(from._internal_token_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.media_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_media().empty()) {
    _this->_impl_.media_.Set(from._internal_media(), 
      _this->GetArenaForAllocation());
  }
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_owner_id().empty()) {
    _this->_impl_.owner_id_.Set(from._internal_owner_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.in_fight_ = from._impl_.in_fight_;
  clear_has_model();
  switch (from.model_case()) {
    case kLemon: {
      _this->_internal_mutable_lemon()->::game::battlemon::items::LemonModel::MergeFrom(
          from._internal_lemon());
      break;
    }
    case kOutfit: {
      _this->_internal_mutable_outfit()->::game::battlemon::items::OutfitModel::MergeFrom(
          from._internal_outfit());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.Item)
}

inline void Item::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.token_id_){}
    , decltype(_impl_.media_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.in_fight_){false}
    , decltype(_impl_.model_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.token_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.media_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.media_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.owner_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.owner_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_model();
}

Item::~Item() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.Item)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.token_id_.Destroy();
  _impl_.media_.Destroy();
  _impl_.owner_id_.Destroy();
  if (has_model()) {
    clear_model();
  }
}

void Item::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Item::clear_model() {
// @@protoc_insertion_point(one_of_clear_start:game.battlemon.items.Item)
  switch (model_case()) {
    case kLemon: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.model_.lemon_;
      }
      break;
    }
    case kOutfit: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.model_.outfit_;
      }
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MODEL_NOT_SET;
}


void Item::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.token_id_.ClearToEmpty();
  _impl_.media_.ClearToEmpty();
  _impl_.owner_id_.ClearToEmpty();
  _impl_.in_fight_ = false;
  clear_model();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Item::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string token_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_token_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.Item.token_id"));
        } else
          goto handle_unusual;
        continue;
      // string media = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_media();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.Item.media"));
        } else
          goto handle_unusual;
        continue;
      // string owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_owner_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.Item.owner_id"));
        } else
          goto handle_unusual;
        continue;
      // bool in_fight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.in_fight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.LemonModel lemon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lemon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitModel outfit = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_outfit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string token_id = 1;
  if (!this->_internal_token_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_id().data(), static_cast<int>(this->_internal_token_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.Item.token_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token_id(), target);
  }

  // string media = 2;
  if (!this->_internal_media().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_media().data(), static_cast<int>(this->_internal_media().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.Item.media");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_media(), target);
  }

  // string owner_id = 3;
  if (!this->_internal_owner_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_owner_id().data(), static_cast<int>(this->_internal_owner_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.Item.owner_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_owner_id(), target);
  }

  // bool in_fight = 4;
  if (this->_internal_in_fight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_in_fight(), target);
  }

  // .game.battlemon.items.LemonModel lemon = 5;
  if (_internal_has_lemon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::lemon(this),
        _Internal::lemon(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.items.OutfitModel outfit = 6;
  if (_internal_has_outfit()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::outfit(this),
        _Internal::outfit(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.Item)
  return target;
}

size_t Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token_id = 1;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_id());
  }

  // string media = 2;
  if (!this->_internal_media().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_media());
  }

  // string owner_id = 3;
  if (!this->_internal_owner_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_owner_id());
  }

  // bool in_fight = 4;
  if (this->_internal_in_fight() != 0) {
    total_size += 1 + 1;
  }

  switch (model_case()) {
    // .game.battlemon.items.LemonModel lemon = 5;
    case kLemon: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_.lemon_);
      break;
    }
    // .game.battlemon.items.OutfitModel outfit = 6;
    case kOutfit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.model_.outfit_);
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Item::GetClassData() const { return &_class_data_; }


void Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Item*>(&to_msg);
  auto& from = static_cast<const Item&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.Item)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_token_id().empty()) {
    _this->_internal_set_token_id(from._internal_token_id());
  }
  if (!from._internal_media().empty()) {
    _this->_internal_set_media(from._internal_media());
  }
  if (!from._internal_owner_id().empty()) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_in_fight() != 0) {
    _this->_internal_set_in_fight(from._internal_in_fight());
  }
  switch (from.model_case()) {
    case kLemon: {
      _this->_internal_mutable_lemon()->::game::battlemon::items::LemonModel::MergeFrom(
          from._internal_lemon());
      break;
    }
    case kOutfit: {
      _this->_internal_mutable_outfit()->::game::battlemon::items::OutfitModel::MergeFrom(
          from._internal_outfit());
      break;
    }
    case MODEL_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Item::CopyFrom(const Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Item::IsInitialized() const {
  return true;
}

void Item::InternalSwap(Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_id_, lhs_arena,
      &other->_impl_.token_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.media_, lhs_arena,
      &other->_impl_.media_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.owner_id_, lhs_arena,
      &other->_impl_.owner_id_, rhs_arena
  );
  swap(_impl_.in_fight_, other->_impl_.in_fight_);
  swap(_impl_.model_, other->_impl_.model_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Item::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[2]);
}

// ===================================================================

class LemonModel::_Internal {
 public:
  static const ::game::battlemon::items::OutfitModel& cap(const LemonModel* msg);
  static const ::game::battlemon::items::OutfitModel& cloth(const LemonModel* msg);
  static const ::game::battlemon::items::OutfitModel& fire_arm(const LemonModel* msg);
  static const ::game::battlemon::items::OutfitModel& cold_arm(const LemonModel* msg);
  static const ::game::battlemon::items::OutfitModel& back(const LemonModel* msg);
};

const ::game::battlemon::items::OutfitModel&
LemonModel::_Internal::cap(const LemonModel* msg) {
  return *msg->_impl_.cap_;
}
const ::game::battlemon::items::OutfitModel&
LemonModel::_Internal::cloth(const LemonModel* msg) {
  return *msg->_impl_.cloth_;
}
const ::game::battlemon::items::OutfitModel&
LemonModel::_Internal::fire_arm(const LemonModel* msg) {
  return *msg->_impl_.fire_arm_;
}
const ::game::battlemon::items::OutfitModel&
LemonModel::_Internal::cold_arm(const LemonModel* msg) {
  return *msg->_impl_.cold_arm_;
}
const ::game::battlemon::items::OutfitModel&
LemonModel::_Internal::back(const LemonModel* msg) {
  return *msg->_impl_.back_;
}
LemonModel::LemonModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.LemonModel)
}
LemonModel::LemonModel(const LemonModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LemonModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attached_bundles_){from._impl_.attached_bundles_}
    , decltype(_impl_.exo_){}
    , decltype(_impl_.eyes_){}
    , decltype(_impl_.head_){}
    , decltype(_impl_.teeth_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.cap_){nullptr}
    , decltype(_impl_.cloth_){nullptr}
    , decltype(_impl_.fire_arm_){nullptr}
    , decltype(_impl_.cold_arm_){nullptr}
    , decltype(_impl_.back_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.exo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exo().empty()) {
    _this->_impl_.exo_.Set(from._internal_exo(), 
      _this->GetArenaForAllocation());
  }
  _impl_.eyes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eyes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_eyes().empty()) {
    _this->_impl_.eyes_.Set(from._internal_eyes(), 
      _this->GetArenaForAllocation());
  }
  _impl_.head_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_head().empty()) {
    _this->_impl_.head_.Set(from._internal_head(), 
      _this->GetArenaForAllocation());
  }
  _impl_.teeth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teeth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_teeth().empty()) {
    _this->_impl_.teeth_.Set(from._internal_teeth(), 
      _this->GetArenaForAllocation());
  }
  _impl_.face_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_face().empty()) {
    _this->_impl_.face_.Set(from._internal_face(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_cap()) {
    _this->_impl_.cap_ = new ::game::battlemon::items::OutfitModel(*from._impl_.cap_);
  }
  if (from._internal_has_cloth()) {
    _this->_impl_.cloth_ = new ::game::battlemon::items::OutfitModel(*from._impl_.cloth_);
  }
  if (from._internal_has_fire_arm()) {
    _this->_impl_.fire_arm_ = new ::game::battlemon::items::OutfitModel(*from._impl_.fire_arm_);
  }
  if (from._internal_has_cold_arm()) {
    _this->_impl_.cold_arm_ = new ::game::battlemon::items::OutfitModel(*from._impl_.cold_arm_);
  }
  if (from._internal_has_back()) {
    _this->_impl_.back_ = new ::game::battlemon::items::OutfitModel(*from._impl_.back_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.LemonModel)
}

inline void LemonModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attached_bundles_){arena}
    , decltype(_impl_.exo_){}
    , decltype(_impl_.eyes_){}
    , decltype(_impl_.head_){}
    , decltype(_impl_.teeth_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.cap_){nullptr}
    , decltype(_impl_.cloth_){nullptr}
    , decltype(_impl_.fire_arm_){nullptr}
    , decltype(_impl_.cold_arm_){nullptr}
    , decltype(_impl_.back_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.exo_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.exo_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.eyes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.eyes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.head_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.head_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.teeth_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.teeth_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.face_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LemonModel::~LemonModel() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.LemonModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LemonModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attached_bundles_.~RepeatedPtrField();
  _impl_.exo_.Destroy();
  _impl_.eyes_.Destroy();
  _impl_.head_.Destroy();
  _impl_.teeth_.Destroy();
  _impl_.face_.Destroy();
  if (this != internal_default_instance()) delete _impl_.cap_;
  if (this != internal_default_instance()) delete _impl_.cloth_;
  if (this != internal_default_instance()) delete _impl_.fire_arm_;
  if (this != internal_default_instance()) delete _impl_.cold_arm_;
  if (this != internal_default_instance()) delete _impl_.back_;
}

void LemonModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LemonModel::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.LemonModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attached_bundles_.Clear();
  _impl_.exo_.ClearToEmpty();
  _impl_.eyes_.ClearToEmpty();
  _impl_.head_.ClearToEmpty();
  _impl_.teeth_.ClearToEmpty();
  _impl_.face_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.cap_ != nullptr) {
    delete _impl_.cap_;
  }
  _impl_.cap_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cloth_ != nullptr) {
    delete _impl_.cloth_;
  }
  _impl_.cloth_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.fire_arm_ != nullptr) {
    delete _impl_.fire_arm_;
  }
  _impl_.fire_arm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cold_arm_ != nullptr) {
    delete _impl_.cold_arm_;
  }
  _impl_.cold_arm_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.back_ != nullptr) {
    delete _impl_.back_;
  }
  _impl_.back_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LemonModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.items.OutfitModel cap = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cap(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitModel cloth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cloth(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string exo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_exo();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.LemonModel.exo"));
        } else
          goto handle_unusual;
        continue;
      // string eyes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_eyes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.LemonModel.eyes"));
        } else
          goto handle_unusual;
        continue;
      // string head = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_head();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.LemonModel.head"));
        } else
          goto handle_unusual;
        continue;
      // string teeth = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_teeth();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.LemonModel.teeth"));
        } else
          goto handle_unusual;
        continue;
      // string face = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_face();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.LemonModel.face"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitModel fire_arm = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_fire_arm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitModel cold_arm = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cold_arm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitModel back = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_back(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.items.WeaponBundle attached_bundles = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attached_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LemonModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.LemonModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.items.OutfitModel cap = 1;
  if (this->_internal_has_cap()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cap(this),
        _Internal::cap(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.items.OutfitModel cloth = 2;
  if (this->_internal_has_cloth()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cloth(this),
        _Internal::cloth(this).GetCachedSize(), target, stream);
  }

  // string exo = 3;
  if (!this->_internal_exo().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exo().data(), static_cast<int>(this->_internal_exo().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.LemonModel.exo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_exo(), target);
  }

  // string eyes = 4;
  if (!this->_internal_eyes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_eyes().data(), static_cast<int>(this->_internal_eyes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.LemonModel.eyes");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_eyes(), target);
  }

  // string head = 5;
  if (!this->_internal_head().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_head().data(), static_cast<int>(this->_internal_head().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.LemonModel.head");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_head(), target);
  }

  // string teeth = 6;
  if (!this->_internal_teeth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_teeth().data(), static_cast<int>(this->_internal_teeth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.LemonModel.teeth");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_teeth(), target);
  }

  // string face = 7;
  if (!this->_internal_face().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face().data(), static_cast<int>(this->_internal_face().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.LemonModel.face");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_face(), target);
  }

  // .game.battlemon.items.OutfitModel fire_arm = 8;
  if (this->_internal_has_fire_arm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::fire_arm(this),
        _Internal::fire_arm(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.items.OutfitModel cold_arm = 9;
  if (this->_internal_has_cold_arm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::cold_arm(this),
        _Internal::cold_arm(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.items.OutfitModel back = 10;
  if (this->_internal_has_back()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::back(this),
        _Internal::back(this).GetCachedSize(), target, stream);
  }

  // repeated .game.battlemon.items.WeaponBundle attached_bundles = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attached_bundles_size()); i < n; i++) {
    const auto& repfield = this->_internal_attached_bundles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.LemonModel)
  return target;
}

size_t LemonModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.LemonModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.WeaponBundle attached_bundles = 11;
  total_size += 1UL * this->_internal_attached_bundles_size();
  for (const auto& msg : this->_impl_.attached_bundles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string exo = 3;
  if (!this->_internal_exo().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exo());
  }

  // string eyes = 4;
  if (!this->_internal_eyes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eyes());
  }

  // string head = 5;
  if (!this->_internal_head().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_head());
  }

  // string teeth = 6;
  if (!this->_internal_teeth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_teeth());
  }

  // string face = 7;
  if (!this->_internal_face().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face());
  }

  // .game.battlemon.items.OutfitModel cap = 1;
  if (this->_internal_has_cap()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cap_);
  }

  // .game.battlemon.items.OutfitModel cloth = 2;
  if (this->_internal_has_cloth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cloth_);
  }

  // .game.battlemon.items.OutfitModel fire_arm = 8;
  if (this->_internal_has_fire_arm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.fire_arm_);
  }

  // .game.battlemon.items.OutfitModel cold_arm = 9;
  if (this->_internal_has_cold_arm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cold_arm_);
  }

  // .game.battlemon.items.OutfitModel back = 10;
  if (this->_internal_has_back()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.back_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LemonModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LemonModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LemonModel::GetClassData() const { return &_class_data_; }


void LemonModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LemonModel*>(&to_msg);
  auto& from = static_cast<const LemonModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.LemonModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attached_bundles_.MergeFrom(from._impl_.attached_bundles_);
  if (!from._internal_exo().empty()) {
    _this->_internal_set_exo(from._internal_exo());
  }
  if (!from._internal_eyes().empty()) {
    _this->_internal_set_eyes(from._internal_eyes());
  }
  if (!from._internal_head().empty()) {
    _this->_internal_set_head(from._internal_head());
  }
  if (!from._internal_teeth().empty()) {
    _this->_internal_set_teeth(from._internal_teeth());
  }
  if (!from._internal_face().empty()) {
    _this->_internal_set_face(from._internal_face());
  }
  if (from._internal_has_cap()) {
    _this->_internal_mutable_cap()->::game::battlemon::items::OutfitModel::MergeFrom(
        from._internal_cap());
  }
  if (from._internal_has_cloth()) {
    _this->_internal_mutable_cloth()->::game::battlemon::items::OutfitModel::MergeFrom(
        from._internal_cloth());
  }
  if (from._internal_has_fire_arm()) {
    _this->_internal_mutable_fire_arm()->::game::battlemon::items::OutfitModel::MergeFrom(
        from._internal_fire_arm());
  }
  if (from._internal_has_cold_arm()) {
    _this->_internal_mutable_cold_arm()->::game::battlemon::items::OutfitModel::MergeFrom(
        from._internal_cold_arm());
  }
  if (from._internal_has_back()) {
    _this->_internal_mutable_back()->::game::battlemon::items::OutfitModel::MergeFrom(
        from._internal_back());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LemonModel::CopyFrom(const LemonModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.LemonModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LemonModel::IsInitialized() const {
  return true;
}

void LemonModel::InternalSwap(LemonModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attached_bundles_.InternalSwap(&other->_impl_.attached_bundles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.exo_, lhs_arena,
      &other->_impl_.exo_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.eyes_, lhs_arena,
      &other->_impl_.eyes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.head_, lhs_arena,
      &other->_impl_.head_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.teeth_, lhs_arena,
      &other->_impl_.teeth_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.face_, lhs_arena,
      &other->_impl_.face_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LemonModel, _impl_.back_)
      + sizeof(LemonModel::_impl_.back_)
      - PROTOBUF_FIELD_OFFSET(LemonModel, _impl_.cap_)>(
          reinterpret_cast<char*>(&_impl_.cap_),
          reinterpret_cast<char*>(&other->_impl_.cap_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LemonModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[3]);
}

// ===================================================================

class OutfitModel::_Internal {
 public:
};

OutfitModel::OutfitModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.OutfitModel)
}
OutfitModel::OutfitModel(const OutfitModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OutfitModel* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.flavour_){}
    , decltype(_impl_.token_id_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.flavour_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flavour_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_flavour().empty()) {
    _this->_impl_.flavour_.Set(from._internal_flavour(), 
      _this->GetArenaForAllocation());
  }
  _impl_.token_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_token_id().empty()) {
    _this->_impl_.token_id_.Set(from._internal_token_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.kind_ = from._impl_.kind_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.OutfitModel)
}

inline void OutfitModel::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.flavour_){}
    , decltype(_impl_.token_id_){}
    , decltype(_impl_.kind_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.flavour_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.flavour_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.token_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OutfitModel::~OutfitModel() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.OutfitModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OutfitModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.flavour_.Destroy();
  _impl_.token_id_.Destroy();
}

void OutfitModel::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OutfitModel::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.OutfitModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.flavour_.ClearToEmpty();
  _impl_.token_id_.ClearToEmpty();
  _impl_.kind_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OutfitModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string flavour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_flavour();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.OutfitModel.flavour"));
        } else
          goto handle_unusual;
        continue;
      // string token_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_token_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.OutfitModel.token_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.OutfitKind kind = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::game::battlemon::items::OutfitKind>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OutfitModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.OutfitModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string flavour = 1;
  if (!this->_internal_flavour().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_flavour().data(), static_cast<int>(this->_internal_flavour().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.OutfitModel.flavour");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_flavour(), target);
  }

  // string token_id = 2;
  if (!this->_internal_token_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token_id().data(), static_cast<int>(this->_internal_token_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.OutfitModel.token_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_token_id(), target);
  }

  // .game.battlemon.items.OutfitKind kind = 3;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_kind(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.OutfitModel)
  return target;
}

size_t OutfitModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.OutfitModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string flavour = 1;
  if (!this->_internal_flavour().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_flavour());
  }

  // string token_id = 2;
  if (!this->_internal_token_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token_id());
  }

  // .game.battlemon.items.OutfitKind kind = 3;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OutfitModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OutfitModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OutfitModel::GetClassData() const { return &_class_data_; }


void OutfitModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OutfitModel*>(&to_msg);
  auto& from = static_cast<const OutfitModel&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.OutfitModel)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_flavour().empty()) {
    _this->_internal_set_flavour(from._internal_flavour());
  }
  if (!from._internal_token_id().empty()) {
    _this->_internal_set_token_id(from._internal_token_id());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OutfitModel::CopyFrom(const OutfitModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.OutfitModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutfitModel::IsInitialized() const {
  return true;
}

void OutfitModel::InternalSwap(OutfitModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.flavour_, lhs_arena,
      &other->_impl_.flavour_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.token_id_, lhs_arena,
      &other->_impl_.token_id_, rhs_arena
  );
  swap(_impl_.kind_, other->_impl_.kind_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OutfitModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[4]);
}

// ===================================================================

class WeaponBundle::_Internal {
 public:
};

WeaponBundle::WeaponBundle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.WeaponBundle)
}
WeaponBundle::WeaponBundle(const WeaponBundle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeaponBundle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.bundle_num_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bundle_num_, &from._impl_.bundle_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.bundle_num_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.WeaponBundle)
}

inline void WeaponBundle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.bundle_num_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WeaponBundle::~WeaponBundle() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.WeaponBundle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeaponBundle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void WeaponBundle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeaponBundle::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.WeaponBundle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.title_.ClearToEmpty();
  ::memset(&_impl_.bundle_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.bundle_num_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponBundle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bundle_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bundle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.items.WeaponBundleItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.WeaponBundle.title"));
        } else
          goto handle_unusual;
        continue;
      // int32 level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WeaponBundle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.WeaponBundle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bundle_num(), target);
  }

  // repeated .game.battlemon.items.WeaponBundleItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.WeaponBundle.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.WeaponBundle)
  return target;
}

size_t WeaponBundle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.WeaponBundle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.WeaponBundleItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bundle_num());
  }

  // int32 level = 4;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeaponBundle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeaponBundle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeaponBundle::GetClassData() const { return &_class_data_; }


void WeaponBundle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeaponBundle*>(&to_msg);
  auto& from = static_cast<const WeaponBundle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.WeaponBundle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_bundle_num() != 0) {
    _this->_internal_set_bundle_num(from._internal_bundle_num());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeaponBundle::CopyFrom(const WeaponBundle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.WeaponBundle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponBundle::IsInitialized() const {
  return true;
}

void WeaponBundle::InternalSwap(WeaponBundle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponBundle, _impl_.level_)
      + sizeof(WeaponBundle::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(WeaponBundle, _impl_.bundle_num_)>(
          reinterpret_cast<char*>(&_impl_.bundle_num_),
          reinterpret_cast<char*>(&other->_impl_.bundle_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponBundle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[5]);
}

// ===================================================================

class WeaponBundleItem::_Internal {
 public:
};

WeaponBundleItem::WeaponBundleItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.WeaponBundleItem)
}
WeaponBundleItem::WeaponBundleItem(const WeaponBundleItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WeaponBundleItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skin_){}
    , decltype(_impl_.item_type_){}
    , decltype(_impl_.slot_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_skin().empty()) {
    _this->_impl_.skin_.Set(from._internal_skin(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.item_type_, &from._impl_.item_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_type_) -
    reinterpret_cast<char*>(&_impl_.item_type_)) + sizeof(_impl_.slot_type_));
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.WeaponBundleItem)
}

inline void WeaponBundleItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skin_){}
    , decltype(_impl_.item_type_){0}
    , decltype(_impl_.slot_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.skin_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.skin_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WeaponBundleItem::~WeaponBundleItem() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.WeaponBundleItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WeaponBundleItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skin_.Destroy();
}

void WeaponBundleItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WeaponBundleItem::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.WeaponBundleItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skin_.ClearToEmpty();
  ::memset(&_impl_.item_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_type_) -
      reinterpret_cast<char*>(&_impl_.item_type_)) + sizeof(_impl_.slot_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WeaponBundleItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.items.WeaponBundleItemType item_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_item_type(static_cast<::game::battlemon::items::WeaponBundleItemType>(val));
        } else
          goto handle_unusual;
        continue;
      // string skin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_skin();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.WeaponBundleItem.skin"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.WeaponBundleSlotType slot_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slot_type(static_cast<::game::battlemon::items::WeaponBundleSlotType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WeaponBundleItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.WeaponBundleItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.items.WeaponBundleItemType item_type = 1;
  if (this->_internal_item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_item_type(), target);
  }

  // string skin = 2;
  if (!this->_internal_skin().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_skin().data(), static_cast<int>(this->_internal_skin().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.WeaponBundleItem.skin");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_skin(), target);
  }

  // .game.battlemon.items.WeaponBundleSlotType slot_type = 3;
  if (this->_internal_slot_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_slot_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.WeaponBundleItem)
  return target;
}

size_t WeaponBundleItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.WeaponBundleItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string skin = 2;
  if (!this->_internal_skin().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_skin());
  }

  // .game.battlemon.items.WeaponBundleItemType item_type = 1;
  if (this->_internal_item_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_item_type());
  }

  // .game.battlemon.items.WeaponBundleSlotType slot_type = 3;
  if (this->_internal_slot_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_slot_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WeaponBundleItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WeaponBundleItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WeaponBundleItem::GetClassData() const { return &_class_data_; }


void WeaponBundleItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WeaponBundleItem*>(&to_msg);
  auto& from = static_cast<const WeaponBundleItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.WeaponBundleItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_skin().empty()) {
    _this->_internal_set_skin(from._internal_skin());
  }
  if (from._internal_item_type() != 0) {
    _this->_internal_set_item_type(from._internal_item_type());
  }
  if (from._internal_slot_type() != 0) {
    _this->_internal_set_slot_type(from._internal_slot_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WeaponBundleItem::CopyFrom(const WeaponBundleItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.WeaponBundleItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponBundleItem::IsInitialized() const {
  return true;
}

void WeaponBundleItem::InternalSwap(WeaponBundleItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.skin_, lhs_arena,
      &other->_impl_.skin_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WeaponBundleItem, _impl_.slot_type_)
      + sizeof(WeaponBundleItem::_impl_.slot_type_)
      - PROTOBUF_FIELD_OFFSET(WeaponBundleItem, _impl_.item_type_)>(
          reinterpret_cast<char*>(&_impl_.item_type_),
          reinterpret_cast<char*>(&other->_impl_.item_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WeaponBundleItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[6]);
}

// ===================================================================

class GetBundlesRequest::_Internal {
 public:
};

GetBundlesRequest::GetBundlesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.GetBundlesRequest)
}
GetBundlesRequest::GetBundlesRequest(const GetBundlesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  GetBundlesRequest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.GetBundlesRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBundlesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBundlesRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetBundlesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[7]);
}

// ===================================================================

class GetBundlesResponse::_Internal {
 public:
};

GetBundlesResponse::GetBundlesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.GetBundlesResponse)
}
GetBundlesResponse::GetBundlesResponse(const GetBundlesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetBundlesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bundles_){from._impl_.bundles_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.GetBundlesResponse)
}

inline void GetBundlesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bundles_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetBundlesResponse::~GetBundlesResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.GetBundlesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetBundlesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bundles_.~RepeatedPtrField();
}

void GetBundlesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetBundlesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.GetBundlesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bundles_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetBundlesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .game.battlemon.items.WeaponBundle bundles = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bundles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetBundlesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.GetBundlesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .game.battlemon.items.WeaponBundle bundles = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bundles_size()); i < n; i++) {
    const auto& repfield = this->_internal_bundles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.GetBundlesResponse)
  return target;
}

size_t GetBundlesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.GetBundlesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.WeaponBundle bundles = 1;
  total_size += 1UL * this->_internal_bundles_size();
  for (const auto& msg : this->_impl_.bundles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetBundlesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetBundlesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetBundlesResponse::GetClassData() const { return &_class_data_; }


void GetBundlesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetBundlesResponse*>(&to_msg);
  auto& from = static_cast<const GetBundlesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.GetBundlesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bundles_.MergeFrom(from._impl_.bundles_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetBundlesResponse::CopyFrom(const GetBundlesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.GetBundlesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetBundlesResponse::IsInitialized() const {
  return true;
}

void GetBundlesResponse::InternalSwap(GetBundlesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bundles_.InternalSwap(&other->_impl_.bundles_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetBundlesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[8]);
}

// ===================================================================

class EditBundleRequest::_Internal {
 public:
};

EditBundleRequest::EditBundleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.EditBundleRequest)
}
EditBundleRequest::EditBundleRequest(const EditBundleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EditBundleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.title_){}
    , decltype(_impl_.bundle_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    _this->_impl_.title_.Set(from._internal_title(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bundle_num_ = from._impl_.bundle_num_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.EditBundleRequest)
}

inline void EditBundleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.title_){}
    , decltype(_impl_.bundle_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EditBundleRequest::~EditBundleRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.EditBundleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EditBundleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.title_.Destroy();
}

void EditBundleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EditBundleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.EditBundleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.title_.ClearToEmpty();
  _impl_.bundle_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EditBundleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bundle_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bundle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.items.WeaponBundleItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string title = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.EditBundleRequest.title"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EditBundleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.EditBundleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bundle_num(), target);
  }

  // repeated .game.battlemon.items.WeaponBundleItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.EditBundleRequest.title");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_title(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.EditBundleRequest)
  return target;
}

size_t EditBundleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.EditBundleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.items.WeaponBundleItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 3;
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bundle_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EditBundleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EditBundleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EditBundleRequest::GetClassData() const { return &_class_data_; }


void EditBundleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EditBundleRequest*>(&to_msg);
  auto& from = static_cast<const EditBundleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.EditBundleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_title().empty()) {
    _this->_internal_set_title(from._internal_title());
  }
  if (from._internal_bundle_num() != 0) {
    _this->_internal_set_bundle_num(from._internal_bundle_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EditBundleRequest::CopyFrom(const EditBundleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.EditBundleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EditBundleRequest::IsInitialized() const {
  return true;
}

void EditBundleRequest::InternalSwap(EditBundleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.title_, lhs_arena,
      &other->_impl_.title_, rhs_arena
  );
  swap(_impl_.bundle_num_, other->_impl_.bundle_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EditBundleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[9]);
}

// ===================================================================

class AttachBundleRequest::_Internal {
 public:
};

AttachBundleRequest::AttachBundleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.AttachBundleRequest)
}
AttachBundleRequest::AttachBundleRequest(const AttachBundleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AttachBundleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , decltype(_impl_.bundle_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lemon_id().empty()) {
    _this->_impl_.lemon_id_.Set(from._internal_lemon_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bundle_num_ = from._impl_.bundle_num_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.AttachBundleRequest)
}

inline void AttachBundleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , decltype(_impl_.bundle_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AttachBundleRequest::~AttachBundleRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.AttachBundleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AttachBundleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lemon_id_.Destroy();
}

void AttachBundleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AttachBundleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.AttachBundleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lemon_id_.ClearToEmpty();
  _impl_.bundle_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AttachBundleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bundle_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bundle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lemon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lemon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.AttachBundleRequest.lemon_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AttachBundleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.AttachBundleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bundle_num(), target);
  }

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lemon_id().data(), static_cast<int>(this->_internal_lemon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.AttachBundleRequest.lemon_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lemon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.AttachBundleRequest)
  return target;
}

size_t AttachBundleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.AttachBundleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lemon_id());
  }

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bundle_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AttachBundleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AttachBundleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AttachBundleRequest::GetClassData() const { return &_class_data_; }


void AttachBundleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AttachBundleRequest*>(&to_msg);
  auto& from = static_cast<const AttachBundleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.AttachBundleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lemon_id().empty()) {
    _this->_internal_set_lemon_id(from._internal_lemon_id());
  }
  if (from._internal_bundle_num() != 0) {
    _this->_internal_set_bundle_num(from._internal_bundle_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AttachBundleRequest::CopyFrom(const AttachBundleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.AttachBundleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachBundleRequest::IsInitialized() const {
  return true;
}

void AttachBundleRequest::InternalSwap(AttachBundleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lemon_id_, lhs_arena,
      &other->_impl_.lemon_id_, rhs_arena
  );
  swap(_impl_.bundle_num_, other->_impl_.bundle_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AttachBundleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[10]);
}

// ===================================================================

class DetachBundleRequest::_Internal {
 public:
};

DetachBundleRequest::DetachBundleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.items.DetachBundleRequest)
}
DetachBundleRequest::DetachBundleRequest(const DetachBundleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DetachBundleRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , decltype(_impl_.bundle_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lemon_id().empty()) {
    _this->_impl_.lemon_id_.Set(from._internal_lemon_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.bundle_num_ = from._impl_.bundle_num_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.items.DetachBundleRequest)
}

inline void DetachBundleRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lemon_id_){}
    , decltype(_impl_.bundle_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DetachBundleRequest::~DetachBundleRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.items.DetachBundleRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DetachBundleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lemon_id_.Destroy();
}

void DetachBundleRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DetachBundleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.items.DetachBundleRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lemon_id_.ClearToEmpty();
  _impl_.bundle_num_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DetachBundleRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bundle_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bundle_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lemon_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lemon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.items.DetachBundleRequest.lemon_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DetachBundleRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.items.DetachBundleRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bundle_num(), target);
  }

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lemon_id().data(), static_cast<int>(this->_internal_lemon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.items.DetachBundleRequest.lemon_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_lemon_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.items.DetachBundleRequest)
  return target;
}

size_t DetachBundleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.items.DetachBundleRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string lemon_id = 2;
  if (!this->_internal_lemon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lemon_id());
  }

  // int32 bundle_num = 1;
  if (this->_internal_bundle_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bundle_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DetachBundleRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DetachBundleRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DetachBundleRequest::GetClassData() const { return &_class_data_; }


void DetachBundleRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DetachBundleRequest*>(&to_msg);
  auto& from = static_cast<const DetachBundleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.items.DetachBundleRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_lemon_id().empty()) {
    _this->_internal_set_lemon_id(from._internal_lemon_id());
  }
  if (from._internal_bundle_num() != 0) {
    _this->_internal_set_bundle_num(from._internal_bundle_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DetachBundleRequest::CopyFrom(const DetachBundleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.items.DetachBundleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachBundleRequest::IsInitialized() const {
  return true;
}

void DetachBundleRequest::InternalSwap(DetachBundleRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lemon_id_, lhs_arena,
      &other->_impl_.lemon_id_, rhs_arena
  );
  swap(_impl_.bundle_num_, other->_impl_.bundle_num_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DetachBundleRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_items_2eproto_getter, &descriptor_table_items_2eproto_once,
      file_level_metadata_items_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace items
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::items::ItemsRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::ItemsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::ItemsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::ItemsResponse*
Arena::CreateMaybeMessage< ::game::battlemon::items::ItemsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::ItemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::Item*
Arena::CreateMaybeMessage< ::game::battlemon::items::Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::Item >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::LemonModel*
Arena::CreateMaybeMessage< ::game::battlemon::items::LemonModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::LemonModel >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::OutfitModel*
Arena::CreateMaybeMessage< ::game::battlemon::items::OutfitModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::OutfitModel >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::WeaponBundle*
Arena::CreateMaybeMessage< ::game::battlemon::items::WeaponBundle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::WeaponBundle >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::WeaponBundleItem*
Arena::CreateMaybeMessage< ::game::battlemon::items::WeaponBundleItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::WeaponBundleItem >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::GetBundlesRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::GetBundlesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::GetBundlesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::GetBundlesResponse*
Arena::CreateMaybeMessage< ::game::battlemon::items::GetBundlesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::GetBundlesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::EditBundleRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::EditBundleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::EditBundleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::AttachBundleRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::AttachBundleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::AttachBundleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::items::DetachBundleRequest*
Arena::CreateMaybeMessage< ::game::battlemon::items::DetachBundleRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::items::DetachBundleRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
