// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internalMm.proto

#include "internalMm.pb.h"
#include "internalMm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {
namespace battlemon {
namespace mm {
namespace internal {

static const char* InternalMMService_method_names[] = {
  "/game.battlemon.mm.internal.InternalMMService/UserLeftBattle",
  "/game.battlemon.mm.internal.InternalMMService/SaveBattleResult",
  "/game.battlemon.mm.internal.InternalMMService/GetRoomInfo",
  "/game.battlemon.mm.internal.InternalMMService/CreateRoomWithPlayers",
  "/game.battlemon.mm.internal.InternalMMService/DedicatedServerIsReady",
};

std::unique_ptr< InternalMMService::Stub> InternalMMService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< InternalMMService::Stub> stub(new InternalMMService::Stub(channel, options));
  return stub;
}

InternalMMService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UserLeftBattle_(InternalMMService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveBattleResult_(InternalMMService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoomInfo_(InternalMMService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRoomWithPlayers_(InternalMMService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DedicatedServerIsReady_(InternalMMService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status InternalMMService::Stub::UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::game::battlemon::common::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UserLeftBattle_, context, request, response);
}

void InternalMMService::Stub::async::UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLeftBattle_, context, request, response, std::move(f));
}

void InternalMMService::Stub::async::UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UserLeftBattle_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::PrepareAsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::common::Empty, ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UserLeftBattle_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::AsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUserLeftBattleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InternalMMService::Stub::SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::game::battlemon::common::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveBattleResult_, context, request, response);
}

void InternalMMService::Stub::async::SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveBattleResult_, context, request, response, std::move(f));
}

void InternalMMService::Stub::async::SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveBattleResult_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::PrepareAsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::common::Empty, ::game::battlemon::mm::internal::SaveBattleResultRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveBattleResult_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::AsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveBattleResultRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InternalMMService::Stub::GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoomInfo_, context, request, response);
}

void InternalMMService::Stub::async::GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomInfo_, context, request, response, std::move(f));
}

void InternalMMService::Stub::async::GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoomInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* InternalMMService::Stub::PrepareAsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::mm::internal::RoomInfoResponse, ::game::battlemon::mm::internal::RoomInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoomInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* InternalMMService::Stub::AsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRoomInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InternalMMService::Stub::CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRoomWithPlayers_, context, request, response);
}

void InternalMMService::Stub::async::CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoomWithPlayers_, context, request, response, std::move(f));
}

void InternalMMService::Stub::async::CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoomWithPlayers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* InternalMMService::Stub::PrepareAsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::mm::internal::RoomInfoResponse, ::game::battlemon::mm::internal::CreateRoomRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRoomWithPlayers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* InternalMMService::Stub::AsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRoomWithPlayersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status InternalMMService::Stub::DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::game::battlemon::common::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DedicatedServerIsReady_, context, request, response);
}

void InternalMMService::Stub::async::DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DedicatedServerIsReady_, context, request, response, std::move(f));
}

void InternalMMService::Stub::async::DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DedicatedServerIsReady_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::PrepareAsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::game::battlemon::common::Empty, ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DedicatedServerIsReady_, context, request);
}

::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* InternalMMService::Stub::AsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDedicatedServerIsReadyRaw(context, request, cq);
  result->StartCall();
  return result;
}

InternalMMService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalMMService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalMMService::Service, ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalMMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* req,
             ::game::battlemon::common::Empty* resp) {
               return service->UserLeftBattle(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalMMService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalMMService::Service, ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalMMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::mm::internal::SaveBattleResultRequest* req,
             ::game::battlemon::common::Empty* resp) {
               return service->SaveBattleResult(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalMMService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalMMService::Service, ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalMMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::mm::internal::RoomInfoRequest* req,
             ::game::battlemon::mm::internal::RoomInfoResponse* resp) {
               return service->GetRoomInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalMMService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalMMService::Service, ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalMMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::mm::internal::CreateRoomRequest* req,
             ::game::battlemon::mm::internal::RoomInfoResponse* resp) {
               return service->CreateRoomWithPlayers(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      InternalMMService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< InternalMMService::Service, ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](InternalMMService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* req,
             ::game::battlemon::common::Empty* resp) {
               return service->DedicatedServerIsReady(ctx, req, resp);
             }, this)));
}

InternalMMService::Service::~Service() {
}

::grpc::Status InternalMMService::Service::UserLeftBattle(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InternalMMService::Service::SaveBattleResult(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InternalMMService::Service::GetRoomInfo(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InternalMMService::Service::CreateRoomWithPlayers(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status InternalMMService::Service::DedicatedServerIsReady(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game
}  // namespace battlemon
}  // namespace mm
}  // namespace internal

