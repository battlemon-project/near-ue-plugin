// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalMm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internalMm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internalMm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "mm.pb.h"
#include "common.pb.h"
#include "items.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internalMm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internalMm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internalMm_2eproto;
namespace game {
namespace battlemon {
namespace mm {
namespace internal {
class CreateRoomRequest;
struct CreateRoomRequestDefaultTypeInternal;
extern CreateRoomRequestDefaultTypeInternal _CreateRoomRequest_default_instance_;
class DedicatedServerIsReadyRequest;
struct DedicatedServerIsReadyRequestDefaultTypeInternal;
extern DedicatedServerIsReadyRequestDefaultTypeInternal _DedicatedServerIsReadyRequest_default_instance_;
class InternalPlayerResult;
struct InternalPlayerResultDefaultTypeInternal;
extern InternalPlayerResultDefaultTypeInternal _InternalPlayerResult_default_instance_;
class InternalUserLeftBattleRequest;
struct InternalUserLeftBattleRequestDefaultTypeInternal;
extern InternalUserLeftBattleRequestDefaultTypeInternal _InternalUserLeftBattleRequest_default_instance_;
class RoomInfoRequest;
struct RoomInfoRequestDefaultTypeInternal;
extern RoomInfoRequestDefaultTypeInternal _RoomInfoRequest_default_instance_;
class RoomInfoResponse;
struct RoomInfoResponseDefaultTypeInternal;
extern RoomInfoResponseDefaultTypeInternal _RoomInfoResponse_default_instance_;
class RoomPlayerInfo;
struct RoomPlayerInfoDefaultTypeInternal;
extern RoomPlayerInfoDefaultTypeInternal _RoomPlayerInfo_default_instance_;
class SaveBattleResultRequest;
struct SaveBattleResultRequestDefaultTypeInternal;
extern SaveBattleResultRequestDefaultTypeInternal _SaveBattleResultRequest_default_instance_;
}  // namespace internal
}  // namespace mm
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::mm::internal::CreateRoomRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::CreateRoomRequest>(Arena*);
template<> ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::DedicatedServerIsReadyRequest>(Arena*);
template<> ::game::battlemon::mm::internal::InternalPlayerResult* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::InternalPlayerResult>(Arena*);
template<> ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::InternalUserLeftBattleRequest>(Arena*);
template<> ::game::battlemon::mm::internal::RoomInfoRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::RoomInfoRequest>(Arena*);
template<> ::game::battlemon::mm::internal::RoomInfoResponse* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::RoomInfoResponse>(Arena*);
template<> ::game::battlemon::mm::internal::RoomPlayerInfo* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::RoomPlayerInfo>(Arena*);
template<> ::game::battlemon::mm::internal::SaveBattleResultRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::internal::SaveBattleResultRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace mm {
namespace internal {

// ===================================================================

class InternalUserLeftBattleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.InternalUserLeftBattleRequest) */ {
 public:
  inline InternalUserLeftBattleRequest() : InternalUserLeftBattleRequest(nullptr) {}
  ~InternalUserLeftBattleRequest() override;
  explicit PROTOBUF_CONSTEXPR InternalUserLeftBattleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalUserLeftBattleRequest(const InternalUserLeftBattleRequest& from);
  InternalUserLeftBattleRequest(InternalUserLeftBattleRequest&& from) noexcept
    : InternalUserLeftBattleRequest() {
    *this = ::std::move(from);
  }

  inline InternalUserLeftBattleRequest& operator=(const InternalUserLeftBattleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalUserLeftBattleRequest& operator=(InternalUserLeftBattleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalUserLeftBattleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalUserLeftBattleRequest* internal_default_instance() {
    return reinterpret_cast<const InternalUserLeftBattleRequest*>(
               &_InternalUserLeftBattleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternalUserLeftBattleRequest& a, InternalUserLeftBattleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalUserLeftBattleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalUserLeftBattleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalUserLeftBattleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalUserLeftBattleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalUserLeftBattleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalUserLeftBattleRequest& from) {
    InternalUserLeftBattleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalUserLeftBattleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.InternalUserLeftBattleRequest";
  }
  protected:
  explicit InternalUserLeftBattleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kRoomIdFieldNumber = 2,
    kIsAccidentFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string room_id = 2;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // bool is_accident = 3;
  void clear_is_accident();
  bool is_accident() const;
  void set_is_accident(bool value);
  private:
  bool _internal_is_accident() const;
  void _internal_set_is_accident(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.InternalUserLeftBattleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    bool is_accident_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class SaveBattleResultRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.SaveBattleResultRequest) */ {
 public:
  inline SaveBattleResultRequest() : SaveBattleResultRequest(nullptr) {}
  ~SaveBattleResultRequest() override;
  explicit PROTOBUF_CONSTEXPR SaveBattleResultRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveBattleResultRequest(const SaveBattleResultRequest& from);
  SaveBattleResultRequest(SaveBattleResultRequest&& from) noexcept
    : SaveBattleResultRequest() {
    *this = ::std::move(from);
  }

  inline SaveBattleResultRequest& operator=(const SaveBattleResultRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveBattleResultRequest& operator=(SaveBattleResultRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveBattleResultRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveBattleResultRequest* internal_default_instance() {
    return reinterpret_cast<const SaveBattleResultRequest*>(
               &_SaveBattleResultRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SaveBattleResultRequest& a, SaveBattleResultRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveBattleResultRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveBattleResultRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SaveBattleResultRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SaveBattleResultRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SaveBattleResultRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SaveBattleResultRequest& from) {
    SaveBattleResultRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveBattleResultRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.SaveBattleResultRequest";
  }
  protected:
  explicit SaveBattleResultRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 2,
    kRoomIdFieldNumber = 1,
    kOttFieldNumber = 3,
  };
  // repeated .game.battlemon.mm.internal.InternalPlayerResult results = 2;
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::game::battlemon::mm::internal::InternalPlayerResult* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::InternalPlayerResult >*
      mutable_results();
  private:
  const ::game::battlemon::mm::internal::InternalPlayerResult& _internal_results(int index) const;
  ::game::battlemon::mm::internal::InternalPlayerResult* _internal_add_results();
  public:
  const ::game::battlemon::mm::internal::InternalPlayerResult& results(int index) const;
  ::game::battlemon::mm::internal::InternalPlayerResult* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::InternalPlayerResult >&
      results() const;

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string ott = 3;
  void clear_ott();
  const std::string& ott() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ott(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ott();
  PROTOBUF_NODISCARD std::string* release_ott();
  void set_allocated_ott(std::string* ott);
  private:
  const std::string& _internal_ott() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ott(const std::string& value);
  std::string* _internal_mutable_ott();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.SaveBattleResultRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::InternalPlayerResult > results_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ott_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class InternalPlayerResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.InternalPlayerResult) */ {
 public:
  inline InternalPlayerResult() : InternalPlayerResult(nullptr) {}
  ~InternalPlayerResult() override;
  explicit PROTOBUF_CONSTEXPR InternalPlayerResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalPlayerResult(const InternalPlayerResult& from);
  InternalPlayerResult(InternalPlayerResult&& from) noexcept
    : InternalPlayerResult() {
    *this = ::std::move(from);
  }

  inline InternalPlayerResult& operator=(const InternalPlayerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalPlayerResult& operator=(InternalPlayerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalPlayerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalPlayerResult* internal_default_instance() {
    return reinterpret_cast<const InternalPlayerResult*>(
               &_InternalPlayerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternalPlayerResult& a, InternalPlayerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalPlayerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalPlayerResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalPlayerResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalPlayerResult>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalPlayerResult& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalPlayerResult& from) {
    InternalPlayerResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalPlayerResult* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.InternalPlayerResult";
  }
  protected:
  explicit InternalPlayerResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kPlaceFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 place = 2;
  void clear_place();
  int32_t place() const;
  void set_place(int32_t value);
  private:
  int32_t _internal_place() const;
  void _internal_set_place(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.InternalPlayerResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int32_t place_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.RoomInfoRequest) */ {
 public:
  inline RoomInfoRequest() : RoomInfoRequest(nullptr) {}
  ~RoomInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR RoomInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfoRequest(const RoomInfoRequest& from);
  RoomInfoRequest(RoomInfoRequest&& from) noexcept
    : RoomInfoRequest() {
    *this = ::std::move(from);
  }

  inline RoomInfoRequest& operator=(const RoomInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoRequest& operator=(RoomInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfoRequest* internal_default_instance() {
    return reinterpret_cast<const RoomInfoRequest*>(
               &_RoomInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RoomInfoRequest& a, RoomInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfoRequest& from) {
    RoomInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.RoomInfoRequest";
  }
  protected:
  explicit RoomInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kOttFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string ott = 2;
  void clear_ott();
  const std::string& ott() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ott(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ott();
  PROTOBUF_NODISCARD std::string* release_ott();
  void set_allocated_ott(std::string* ott);
  private:
  const std::string& _internal_ott() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ott(const std::string& value);
  std::string* _internal_mutable_ott();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.RoomInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ott_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class RoomInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.RoomInfoResponse) */ {
 public:
  inline RoomInfoResponse() : RoomInfoResponse(nullptr) {}
  ~RoomInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR RoomInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomInfoResponse(const RoomInfoResponse& from);
  RoomInfoResponse(RoomInfoResponse&& from) noexcept
    : RoomInfoResponse() {
    *this = ::std::move(from);
  }

  inline RoomInfoResponse& operator=(const RoomInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomInfoResponse& operator=(RoomInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomInfoResponse* internal_default_instance() {
    return reinterpret_cast<const RoomInfoResponse*>(
               &_RoomInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RoomInfoResponse& a, RoomInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomInfoResponse& from) {
    RoomInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.RoomInfoResponse";
  }
  protected:
  explicit RoomInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 3,
    kRoomIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // repeated .game.battlemon.mm.internal.RoomPlayerInfo players = 3;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::game::battlemon::mm::internal::RoomPlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::RoomPlayerInfo >*
      mutable_players();
  private:
  const ::game::battlemon::mm::internal::RoomPlayerInfo& _internal_players(int index) const;
  ::game::battlemon::mm::internal::RoomPlayerInfo* _internal_add_players();
  public:
  const ::game::battlemon::mm::internal::RoomPlayerInfo& players(int index) const;
  ::game::battlemon::mm::internal::RoomPlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::RoomPlayerInfo >&
      players() const;

  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // .game.battlemon.mm.GameMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::game::battlemon::mm::GameMode& mode() const;
  PROTOBUF_NODISCARD ::game::battlemon::mm::GameMode* release_mode();
  ::game::battlemon::mm::GameMode* mutable_mode();
  void set_allocated_mode(::game::battlemon::mm::GameMode* mode);
  private:
  const ::game::battlemon::mm::GameMode& _internal_mode() const;
  ::game::battlemon::mm::GameMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::game::battlemon::mm::GameMode* mode);
  ::game::battlemon::mm::GameMode* unsafe_arena_release_mode();

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.RoomInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::RoomPlayerInfo > players_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::game::battlemon::mm::GameMode* mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class RoomPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.RoomPlayerInfo) */ {
 public:
  inline RoomPlayerInfo() : RoomPlayerInfo(nullptr) {}
  ~RoomPlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoomPlayerInfo(const RoomPlayerInfo& from);
  RoomPlayerInfo(RoomPlayerInfo&& from) noexcept
    : RoomPlayerInfo() {
    *this = ::std::move(from);
  }

  inline RoomPlayerInfo& operator=(const RoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoomPlayerInfo& operator=(RoomPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RoomPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoomPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const RoomPlayerInfo*>(
               &_RoomPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RoomPlayerInfo& a, RoomPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RoomPlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoomPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RoomPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RoomPlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RoomPlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RoomPlayerInfo& from) {
    RoomPlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomPlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.RoomPlayerInfo";
  }
  protected:
  explicit RoomPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLemonFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .game.battlemon.items.Item lemon = 2;
  bool has_lemon() const;
  private:
  bool _internal_has_lemon() const;
  public:
  void clear_lemon();
  const ::game::battlemon::items::Item& lemon() const;
  PROTOBUF_NODISCARD ::game::battlemon::items::Item* release_lemon();
  ::game::battlemon::items::Item* mutable_lemon();
  void set_allocated_lemon(::game::battlemon::items::Item* lemon);
  private:
  const ::game::battlemon::items::Item& _internal_lemon() const;
  ::game::battlemon::items::Item* _internal_mutable_lemon();
  public:
  void unsafe_arena_set_allocated_lemon(
      ::game::battlemon::items::Item* lemon);
  ::game::battlemon::items::Item* unsafe_arena_release_lemon();

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.RoomPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::game::battlemon::items::Item* lemon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class CreateRoomRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.CreateRoomRequest) */ {
 public:
  inline CreateRoomRequest() : CreateRoomRequest(nullptr) {}
  ~CreateRoomRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRoomRequest(const CreateRoomRequest& from);
  CreateRoomRequest(CreateRoomRequest&& from) noexcept
    : CreateRoomRequest() {
    *this = ::std::move(from);
  }

  inline CreateRoomRequest& operator=(const CreateRoomRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRoomRequest& operator=(CreateRoomRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRoomRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRoomRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRoomRequest*>(
               &_CreateRoomRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CreateRoomRequest& a, CreateRoomRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRoomRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRoomRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRoomRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRoomRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRoomRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRoomRequest& from) {
    CreateRoomRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.CreateRoomRequest";
  }
  protected:
  explicit CreateRoomRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 2,
    kPrevRoomIdFieldNumber = 3,
    kOttFieldNumber = 4,
    kModeFieldNumber = 1,
  };
  // repeated string user_ids = 2;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // string prev_room_id = 3;
  void clear_prev_room_id();
  const std::string& prev_room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prev_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prev_room_id();
  PROTOBUF_NODISCARD std::string* release_prev_room_id();
  void set_allocated_prev_room_id(std::string* prev_room_id);
  private:
  const std::string& _internal_prev_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_room_id(const std::string& value);
  std::string* _internal_mutable_prev_room_id();
  public:

  // string ott = 4;
  void clear_ott();
  const std::string& ott() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ott(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ott();
  PROTOBUF_NODISCARD std::string* release_ott();
  void set_allocated_ott(std::string* ott);
  private:
  const std::string& _internal_ott() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ott(const std::string& value);
  std::string* _internal_mutable_ott();
  public:

  // .game.battlemon.mm.GameMode mode = 1;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::game::battlemon::mm::GameMode& mode() const;
  PROTOBUF_NODISCARD ::game::battlemon::mm::GameMode* release_mode();
  ::game::battlemon::mm::GameMode* mutable_mode();
  void set_allocated_mode(::game::battlemon::mm::GameMode* mode);
  private:
  const ::game::battlemon::mm::GameMode& _internal_mode() const;
  ::game::battlemon::mm::GameMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::game::battlemon::mm::GameMode* mode);
  ::game::battlemon::mm::GameMode* unsafe_arena_release_mode();

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.CreateRoomRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prev_room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ott_;
    ::game::battlemon::mm::GameMode* mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// -------------------------------------------------------------------

class DedicatedServerIsReadyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.internal.DedicatedServerIsReadyRequest) */ {
 public:
  inline DedicatedServerIsReadyRequest() : DedicatedServerIsReadyRequest(nullptr) {}
  ~DedicatedServerIsReadyRequest() override;
  explicit PROTOBUF_CONSTEXPR DedicatedServerIsReadyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DedicatedServerIsReadyRequest(const DedicatedServerIsReadyRequest& from);
  DedicatedServerIsReadyRequest(DedicatedServerIsReadyRequest&& from) noexcept
    : DedicatedServerIsReadyRequest() {
    *this = ::std::move(from);
  }

  inline DedicatedServerIsReadyRequest& operator=(const DedicatedServerIsReadyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DedicatedServerIsReadyRequest& operator=(DedicatedServerIsReadyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DedicatedServerIsReadyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DedicatedServerIsReadyRequest* internal_default_instance() {
    return reinterpret_cast<const DedicatedServerIsReadyRequest*>(
               &_DedicatedServerIsReadyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DedicatedServerIsReadyRequest& a, DedicatedServerIsReadyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DedicatedServerIsReadyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DedicatedServerIsReadyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DedicatedServerIsReadyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DedicatedServerIsReadyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DedicatedServerIsReadyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const DedicatedServerIsReadyRequest& from) {
    DedicatedServerIsReadyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DedicatedServerIsReadyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.internal.DedicatedServerIsReadyRequest";
  }
  protected:
  explicit DedicatedServerIsReadyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoomIdFieldNumber = 1,
    kOttFieldNumber = 2,
  };
  // string room_id = 1;
  void clear_room_id();
  const std::string& room_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room_id();
  PROTOBUF_NODISCARD std::string* release_room_id();
  void set_allocated_room_id(std::string* room_id);
  private:
  const std::string& _internal_room_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room_id(const std::string& value);
  std::string* _internal_mutable_room_id();
  public:

  // string ott = 2;
  void clear_ott();
  const std::string& ott() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ott(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ott();
  PROTOBUF_NODISCARD std::string* release_ott();
  void set_allocated_ott(std::string* ott);
  private:
  const std::string& _internal_ott() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ott(const std::string& value);
  std::string* _internal_mutable_ott();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.internal.DedicatedServerIsReadyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ott_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalMm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalUserLeftBattleRequest

// string user_id = 1;
inline void InternalUserLeftBattleRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& InternalUserLeftBattleRequest::user_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.InternalUserLeftBattleRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalUserLeftBattleRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.InternalUserLeftBattleRequest.user_id)
}
inline std::string* InternalUserLeftBattleRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.InternalUserLeftBattleRequest.user_id)
  return _s;
}
inline const std::string& InternalUserLeftBattleRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void InternalUserLeftBattleRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalUserLeftBattleRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalUserLeftBattleRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.InternalUserLeftBattleRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void InternalUserLeftBattleRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.InternalUserLeftBattleRequest.user_id)
}

// string room_id = 2;
inline void InternalUserLeftBattleRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& InternalUserLeftBattleRequest::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalUserLeftBattleRequest::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id)
}
inline std::string* InternalUserLeftBattleRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id)
  return _s;
}
inline const std::string& InternalUserLeftBattleRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void InternalUserLeftBattleRequest::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalUserLeftBattleRequest::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalUserLeftBattleRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void InternalUserLeftBattleRequest::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.InternalUserLeftBattleRequest.room_id)
}

// bool is_accident = 3;
inline void InternalUserLeftBattleRequest::clear_is_accident() {
  _impl_.is_accident_ = false;
}
inline bool InternalUserLeftBattleRequest::_internal_is_accident() const {
  return _impl_.is_accident_;
}
inline bool InternalUserLeftBattleRequest::is_accident() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.InternalUserLeftBattleRequest.is_accident)
  return _internal_is_accident();
}
inline void InternalUserLeftBattleRequest::_internal_set_is_accident(bool value) {
  
  _impl_.is_accident_ = value;
}
inline void InternalUserLeftBattleRequest::set_is_accident(bool value) {
  _internal_set_is_accident(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.InternalUserLeftBattleRequest.is_accident)
}

// -------------------------------------------------------------------

// SaveBattleResultRequest

// string room_id = 1;
inline void SaveBattleResultRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& SaveBattleResultRequest::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.SaveBattleResultRequest.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveBattleResultRequest::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.SaveBattleResultRequest.room_id)
}
inline std::string* SaveBattleResultRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.SaveBattleResultRequest.room_id)
  return _s;
}
inline const std::string& SaveBattleResultRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void SaveBattleResultRequest::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveBattleResultRequest::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveBattleResultRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.SaveBattleResultRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void SaveBattleResultRequest::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.SaveBattleResultRequest.room_id)
}

// repeated .game.battlemon.mm.internal.InternalPlayerResult results = 2;
inline int SaveBattleResultRequest::_internal_results_size() const {
  return _impl_.results_.size();
}
inline int SaveBattleResultRequest::results_size() const {
  return _internal_results_size();
}
inline void SaveBattleResultRequest::clear_results() {
  _impl_.results_.Clear();
}
inline ::game::battlemon::mm::internal::InternalPlayerResult* SaveBattleResultRequest::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.SaveBattleResultRequest.results)
  return _impl_.results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::InternalPlayerResult >*
SaveBattleResultRequest::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.mm.internal.SaveBattleResultRequest.results)
  return &_impl_.results_;
}
inline const ::game::battlemon::mm::internal::InternalPlayerResult& SaveBattleResultRequest::_internal_results(int index) const {
  return _impl_.results_.Get(index);
}
inline const ::game::battlemon::mm::internal::InternalPlayerResult& SaveBattleResultRequest::results(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.SaveBattleResultRequest.results)
  return _internal_results(index);
}
inline ::game::battlemon::mm::internal::InternalPlayerResult* SaveBattleResultRequest::_internal_add_results() {
  return _impl_.results_.Add();
}
inline ::game::battlemon::mm::internal::InternalPlayerResult* SaveBattleResultRequest::add_results() {
  ::game::battlemon::mm::internal::InternalPlayerResult* _add = _internal_add_results();
  // @@protoc_insertion_point(field_add:game.battlemon.mm.internal.SaveBattleResultRequest.results)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::InternalPlayerResult >&
SaveBattleResultRequest::results() const {
  // @@protoc_insertion_point(field_list:game.battlemon.mm.internal.SaveBattleResultRequest.results)
  return _impl_.results_;
}

// string ott = 3;
inline void SaveBattleResultRequest::clear_ott() {
  _impl_.ott_.ClearToEmpty();
}
inline const std::string& SaveBattleResultRequest::ott() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.SaveBattleResultRequest.ott)
  return _internal_ott();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveBattleResultRequest::set_ott(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ott_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.SaveBattleResultRequest.ott)
}
inline std::string* SaveBattleResultRequest::mutable_ott() {
  std::string* _s = _internal_mutable_ott();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.SaveBattleResultRequest.ott)
  return _s;
}
inline const std::string& SaveBattleResultRequest::_internal_ott() const {
  return _impl_.ott_.Get();
}
inline void SaveBattleResultRequest::_internal_set_ott(const std::string& value) {
  
  _impl_.ott_.Set(value, GetArenaForAllocation());
}
inline std::string* SaveBattleResultRequest::_internal_mutable_ott() {
  
  return _impl_.ott_.Mutable(GetArenaForAllocation());
}
inline std::string* SaveBattleResultRequest::release_ott() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.SaveBattleResultRequest.ott)
  return _impl_.ott_.Release();
}
inline void SaveBattleResultRequest::set_allocated_ott(std::string* ott) {
  if (ott != nullptr) {
    
  } else {
    
  }
  _impl_.ott_.SetAllocated(ott, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ott_.IsDefault()) {
    _impl_.ott_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.SaveBattleResultRequest.ott)
}

// -------------------------------------------------------------------

// InternalPlayerResult

// string user_id = 1;
inline void InternalPlayerResult::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& InternalPlayerResult::user_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.InternalPlayerResult.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalPlayerResult::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.InternalPlayerResult.user_id)
}
inline std::string* InternalPlayerResult::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.InternalPlayerResult.user_id)
  return _s;
}
inline const std::string& InternalPlayerResult::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void InternalPlayerResult::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalPlayerResult::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalPlayerResult::release_user_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.InternalPlayerResult.user_id)
  return _impl_.user_id_.Release();
}
inline void InternalPlayerResult::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.InternalPlayerResult.user_id)
}

// int32 place = 2;
inline void InternalPlayerResult::clear_place() {
  _impl_.place_ = 0;
}
inline int32_t InternalPlayerResult::_internal_place() const {
  return _impl_.place_;
}
inline int32_t InternalPlayerResult::place() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.InternalPlayerResult.place)
  return _internal_place();
}
inline void InternalPlayerResult::_internal_set_place(int32_t value) {
  
  _impl_.place_ = value;
}
inline void InternalPlayerResult::set_place(int32_t value) {
  _internal_set_place(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.InternalPlayerResult.place)
}

// -------------------------------------------------------------------

// RoomInfoRequest

// string room_id = 1;
inline void RoomInfoRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& RoomInfoRequest::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomInfoRequest.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoRequest::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.RoomInfoRequest.room_id)
}
inline std::string* RoomInfoRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomInfoRequest.room_id)
  return _s;
}
inline const std::string& RoomInfoRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void RoomInfoRequest::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfoRequest::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfoRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomInfoRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void RoomInfoRequest::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomInfoRequest.room_id)
}

// string ott = 2;
inline void RoomInfoRequest::clear_ott() {
  _impl_.ott_.ClearToEmpty();
}
inline const std::string& RoomInfoRequest::ott() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomInfoRequest.ott)
  return _internal_ott();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoRequest::set_ott(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ott_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.RoomInfoRequest.ott)
}
inline std::string* RoomInfoRequest::mutable_ott() {
  std::string* _s = _internal_mutable_ott();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomInfoRequest.ott)
  return _s;
}
inline const std::string& RoomInfoRequest::_internal_ott() const {
  return _impl_.ott_.Get();
}
inline void RoomInfoRequest::_internal_set_ott(const std::string& value) {
  
  _impl_.ott_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfoRequest::_internal_mutable_ott() {
  
  return _impl_.ott_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfoRequest::release_ott() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomInfoRequest.ott)
  return _impl_.ott_.Release();
}
inline void RoomInfoRequest::set_allocated_ott(std::string* ott) {
  if (ott != nullptr) {
    
  } else {
    
  }
  _impl_.ott_.SetAllocated(ott, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ott_.IsDefault()) {
    _impl_.ott_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomInfoRequest.ott)
}

// -------------------------------------------------------------------

// RoomInfoResponse

// string room_id = 1;
inline void RoomInfoResponse::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& RoomInfoResponse::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomInfoResponse.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomInfoResponse::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.RoomInfoResponse.room_id)
}
inline std::string* RoomInfoResponse::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomInfoResponse.room_id)
  return _s;
}
inline const std::string& RoomInfoResponse::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void RoomInfoResponse::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomInfoResponse::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomInfoResponse::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomInfoResponse.room_id)
  return _impl_.room_id_.Release();
}
inline void RoomInfoResponse::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomInfoResponse.room_id)
}

// .game.battlemon.mm.GameMode mode = 2;
inline bool RoomInfoResponse::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool RoomInfoResponse::has_mode() const {
  return _internal_has_mode();
}
inline const ::game::battlemon::mm::GameMode& RoomInfoResponse::_internal_mode() const {
  const ::game::battlemon::mm::GameMode* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::mm::GameMode&>(
      ::game::battlemon::mm::_GameMode_default_instance_);
}
inline const ::game::battlemon::mm::GameMode& RoomInfoResponse::mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomInfoResponse.mode)
  return _internal_mode();
}
inline void RoomInfoResponse::unsafe_arena_set_allocated_mode(
    ::game::battlemon::mm::GameMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.mm.internal.RoomInfoResponse.mode)
}
inline ::game::battlemon::mm::GameMode* RoomInfoResponse::release_mode() {
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::mm::GameMode* RoomInfoResponse::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomInfoResponse.mode)
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::game::battlemon::mm::GameMode* RoomInfoResponse::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::mm::GameMode>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::game::battlemon::mm::GameMode* RoomInfoResponse::mutable_mode() {
  ::game::battlemon::mm::GameMode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomInfoResponse.mode)
  return _msg;
}
inline void RoomInfoResponse::set_allocated_mode(::game::battlemon::mm::GameMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode));
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomInfoResponse.mode)
}

// repeated .game.battlemon.mm.internal.RoomPlayerInfo players = 3;
inline int RoomInfoResponse::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int RoomInfoResponse::players_size() const {
  return _internal_players_size();
}
inline void RoomInfoResponse::clear_players() {
  _impl_.players_.Clear();
}
inline ::game::battlemon::mm::internal::RoomPlayerInfo* RoomInfoResponse::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomInfoResponse.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::RoomPlayerInfo >*
RoomInfoResponse::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.mm.internal.RoomInfoResponse.players)
  return &_impl_.players_;
}
inline const ::game::battlemon::mm::internal::RoomPlayerInfo& RoomInfoResponse::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::game::battlemon::mm::internal::RoomPlayerInfo& RoomInfoResponse::players(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomInfoResponse.players)
  return _internal_players(index);
}
inline ::game::battlemon::mm::internal::RoomPlayerInfo* RoomInfoResponse::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::game::battlemon::mm::internal::RoomPlayerInfo* RoomInfoResponse::add_players() {
  ::game::battlemon::mm::internal::RoomPlayerInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:game.battlemon.mm.internal.RoomInfoResponse.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::mm::internal::RoomPlayerInfo >&
RoomInfoResponse::players() const {
  // @@protoc_insertion_point(field_list:game.battlemon.mm.internal.RoomInfoResponse.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// RoomPlayerInfo

// string user_id = 1;
inline void RoomPlayerInfo::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& RoomPlayerInfo::user_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomPlayerInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RoomPlayerInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.RoomPlayerInfo.user_id)
}
inline std::string* RoomPlayerInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomPlayerInfo.user_id)
  return _s;
}
inline const std::string& RoomPlayerInfo::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void RoomPlayerInfo::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* RoomPlayerInfo::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* RoomPlayerInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomPlayerInfo.user_id)
  return _impl_.user_id_.Release();
}
inline void RoomPlayerInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomPlayerInfo.user_id)
}

// .game.battlemon.items.Item lemon = 2;
inline bool RoomPlayerInfo::_internal_has_lemon() const {
  return this != internal_default_instance() && _impl_.lemon_ != nullptr;
}
inline bool RoomPlayerInfo::has_lemon() const {
  return _internal_has_lemon();
}
inline const ::game::battlemon::items::Item& RoomPlayerInfo::_internal_lemon() const {
  const ::game::battlemon::items::Item* p = _impl_.lemon_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::items::Item&>(
      ::game::battlemon::items::_Item_default_instance_);
}
inline const ::game::battlemon::items::Item& RoomPlayerInfo::lemon() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.RoomPlayerInfo.lemon)
  return _internal_lemon();
}
inline void RoomPlayerInfo::unsafe_arena_set_allocated_lemon(
    ::game::battlemon::items::Item* lemon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  _impl_.lemon_ = lemon;
  if (lemon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.mm.internal.RoomPlayerInfo.lemon)
}
inline ::game::battlemon::items::Item* RoomPlayerInfo::release_lemon() {
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::items::Item* RoomPlayerInfo::unsafe_arena_release_lemon() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.RoomPlayerInfo.lemon)
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
  return temp;
}
inline ::game::battlemon::items::Item* RoomPlayerInfo::_internal_mutable_lemon() {
  
  if (_impl_.lemon_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::items::Item>(GetArenaForAllocation());
    _impl_.lemon_ = p;
  }
  return _impl_.lemon_;
}
inline ::game::battlemon::items::Item* RoomPlayerInfo::mutable_lemon() {
  ::game::battlemon::items::Item* _msg = _internal_mutable_lemon();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.RoomPlayerInfo.lemon)
  return _msg;
}
inline void RoomPlayerInfo::set_allocated_lemon(::game::battlemon::items::Item* lemon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  if (lemon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lemon));
    if (message_arena != submessage_arena) {
      lemon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lemon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lemon_ = lemon;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.RoomPlayerInfo.lemon)
}

// -------------------------------------------------------------------

// CreateRoomRequest

// .game.battlemon.mm.GameMode mode = 1;
inline bool CreateRoomRequest::_internal_has_mode() const {
  return this != internal_default_instance() && _impl_.mode_ != nullptr;
}
inline bool CreateRoomRequest::has_mode() const {
  return _internal_has_mode();
}
inline const ::game::battlemon::mm::GameMode& CreateRoomRequest::_internal_mode() const {
  const ::game::battlemon::mm::GameMode* p = _impl_.mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::mm::GameMode&>(
      ::game::battlemon::mm::_GameMode_default_instance_);
}
inline const ::game::battlemon::mm::GameMode& CreateRoomRequest::mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.CreateRoomRequest.mode)
  return _internal_mode();
}
inline void CreateRoomRequest::unsafe_arena_set_allocated_mode(
    ::game::battlemon::mm::GameMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  _impl_.mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.mm.internal.CreateRoomRequest.mode)
}
inline ::game::battlemon::mm::GameMode* CreateRoomRequest::release_mode() {
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::mm::GameMode* CreateRoomRequest::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.CreateRoomRequest.mode)
  
  ::game::battlemon::mm::GameMode* temp = _impl_.mode_;
  _impl_.mode_ = nullptr;
  return temp;
}
inline ::game::battlemon::mm::GameMode* CreateRoomRequest::_internal_mutable_mode() {
  
  if (_impl_.mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::mm::GameMode>(GetArenaForAllocation());
    _impl_.mode_ = p;
  }
  return _impl_.mode_;
}
inline ::game::battlemon::mm::GameMode* CreateRoomRequest::mutable_mode() {
  ::game::battlemon::mm::GameMode* _msg = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.CreateRoomRequest.mode)
  return _msg;
}
inline void CreateRoomRequest::set_allocated_mode(::game::battlemon::mm::GameMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.mode_);
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode));
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.CreateRoomRequest.mode)
}

// repeated string user_ids = 2;
inline int CreateRoomRequest::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int CreateRoomRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void CreateRoomRequest::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline std::string* CreateRoomRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline const std::string& CreateRoomRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* CreateRoomRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
  return _impl_.user_ids_.Mutable(index);
}
inline void CreateRoomRequest::set_user_ids(int index, const std::string& value) {
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::set_user_ids(int index, std::string&& value) {
  _impl_.user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::set_user_ids(int index, const char* value, size_t size) {
  _impl_.user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline std::string* CreateRoomRequest::_internal_add_user_ids() {
  return _impl_.user_ids_.Add();
}
inline void CreateRoomRequest::add_user_ids(const std::string& value) {
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::add_user_ids(std::string&& value) {
  _impl_.user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline void CreateRoomRequest::add_user_ids(const char* value, size_t size) {
  _impl_.user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CreateRoomRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
  return _impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CreateRoomRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.mm.internal.CreateRoomRequest.user_ids)
  return &_impl_.user_ids_;
}

// string prev_room_id = 3;
inline void CreateRoomRequest::clear_prev_room_id() {
  _impl_.prev_room_id_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::prev_room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.CreateRoomRequest.prev_room_id)
  return _internal_prev_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoomRequest::set_prev_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.prev_room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.CreateRoomRequest.prev_room_id)
}
inline std::string* CreateRoomRequest::mutable_prev_room_id() {
  std::string* _s = _internal_mutable_prev_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.CreateRoomRequest.prev_room_id)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_prev_room_id() const {
  return _impl_.prev_room_id_.Get();
}
inline void CreateRoomRequest::_internal_set_prev_room_id(const std::string& value) {
  
  _impl_.prev_room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_prev_room_id() {
  
  return _impl_.prev_room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_prev_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.CreateRoomRequest.prev_room_id)
  return _impl_.prev_room_id_.Release();
}
inline void CreateRoomRequest::set_allocated_prev_room_id(std::string* prev_room_id) {
  if (prev_room_id != nullptr) {
    
  } else {
    
  }
  _impl_.prev_room_id_.SetAllocated(prev_room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.prev_room_id_.IsDefault()) {
    _impl_.prev_room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.CreateRoomRequest.prev_room_id)
}

// string ott = 4;
inline void CreateRoomRequest::clear_ott() {
  _impl_.ott_.ClearToEmpty();
}
inline const std::string& CreateRoomRequest::ott() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.CreateRoomRequest.ott)
  return _internal_ott();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRoomRequest::set_ott(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ott_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.CreateRoomRequest.ott)
}
inline std::string* CreateRoomRequest::mutable_ott() {
  std::string* _s = _internal_mutable_ott();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.CreateRoomRequest.ott)
  return _s;
}
inline const std::string& CreateRoomRequest::_internal_ott() const {
  return _impl_.ott_.Get();
}
inline void CreateRoomRequest::_internal_set_ott(const std::string& value) {
  
  _impl_.ott_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::_internal_mutable_ott() {
  
  return _impl_.ott_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRoomRequest::release_ott() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.CreateRoomRequest.ott)
  return _impl_.ott_.Release();
}
inline void CreateRoomRequest::set_allocated_ott(std::string* ott) {
  if (ott != nullptr) {
    
  } else {
    
  }
  _impl_.ott_.SetAllocated(ott, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ott_.IsDefault()) {
    _impl_.ott_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.CreateRoomRequest.ott)
}

// -------------------------------------------------------------------

// DedicatedServerIsReadyRequest

// string room_id = 1;
inline void DedicatedServerIsReadyRequest::clear_room_id() {
  _impl_.room_id_.ClearToEmpty();
}
inline const std::string& DedicatedServerIsReadyRequest::room_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id)
  return _internal_room_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DedicatedServerIsReadyRequest::set_room_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id)
}
inline std::string* DedicatedServerIsReadyRequest::mutable_room_id() {
  std::string* _s = _internal_mutable_room_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id)
  return _s;
}
inline const std::string& DedicatedServerIsReadyRequest::_internal_room_id() const {
  return _impl_.room_id_.Get();
}
inline void DedicatedServerIsReadyRequest::_internal_set_room_id(const std::string& value) {
  
  _impl_.room_id_.Set(value, GetArenaForAllocation());
}
inline std::string* DedicatedServerIsReadyRequest::_internal_mutable_room_id() {
  
  return _impl_.room_id_.Mutable(GetArenaForAllocation());
}
inline std::string* DedicatedServerIsReadyRequest::release_room_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id)
  return _impl_.room_id_.Release();
}
inline void DedicatedServerIsReadyRequest::set_allocated_room_id(std::string* room_id) {
  if (room_id != nullptr) {
    
  } else {
    
  }
  _impl_.room_id_.SetAllocated(room_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_id_.IsDefault()) {
    _impl_.room_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.room_id)
}

// string ott = 2;
inline void DedicatedServerIsReadyRequest::clear_ott() {
  _impl_.ott_.ClearToEmpty();
}
inline const std::string& DedicatedServerIsReadyRequest::ott() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott)
  return _internal_ott();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DedicatedServerIsReadyRequest::set_ott(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ott_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott)
}
inline std::string* DedicatedServerIsReadyRequest::mutable_ott() {
  std::string* _s = _internal_mutable_ott();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott)
  return _s;
}
inline const std::string& DedicatedServerIsReadyRequest::_internal_ott() const {
  return _impl_.ott_.Get();
}
inline void DedicatedServerIsReadyRequest::_internal_set_ott(const std::string& value) {
  
  _impl_.ott_.Set(value, GetArenaForAllocation());
}
inline std::string* DedicatedServerIsReadyRequest::_internal_mutable_ott() {
  
  return _impl_.ott_.Mutable(GetArenaForAllocation());
}
inline std::string* DedicatedServerIsReadyRequest::release_ott() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott)
  return _impl_.ott_.Release();
}
inline void DedicatedServerIsReadyRequest::set_allocated_ott(std::string* ott) {
  if (ott != nullptr) {
    
  } else {
    
  }
  _impl_.ott_.SetAllocated(ott, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ott_.IsDefault()) {
    _impl_.ott_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.internal.DedicatedServerIsReadyRequest.ott)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace mm
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internalMm_2eproto
