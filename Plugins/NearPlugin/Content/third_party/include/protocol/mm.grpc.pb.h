// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mm.proto
#ifndef GRPC_mm_2eproto__INCLUDED
#define GRPC_mm_2eproto__INCLUDED

#include "mm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace battlemon {
namespace mm {

class MMService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.battlemon.mm.MMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::game::battlemon::mm::SearchGameResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>> AsyncSearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>>(AsyncSearchGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>> PrepareAsyncSearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>>(PrepareAsyncSearchGameRaw(context, request, cq));
    }
    virtual ::grpc::Status AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncAcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncAcceptGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncAcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncAcceptGameRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncCancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncCancelSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncCancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncCancelSearchRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>* AsyncSearchGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::SearchGameResponse>* PrepareAsyncSearchGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncAcceptGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncAcceptGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncCancelSearchRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncCancelSearchRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::game::battlemon::mm::SearchGameResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>> AsyncSearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>>(AsyncSearchGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>> PrepareAsyncSearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>>(PrepareAsyncSearchGameRaw(context, request, cq));
    }
    ::grpc::Status AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncAcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncAcceptGameRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncAcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncAcceptGameRaw(context, request, cq));
    }
    ::grpc::Status CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncCancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncCancelSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncCancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncCancelSearchRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response, std::function<void(::grpc::Status)>) override;
      void SearchGame(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void AcceptGame(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void CancelSearch(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>* AsyncSearchGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::SearchGameResponse>* PrepareAsyncSearchGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::SearchGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncAcceptGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncAcceptGameRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::AcceptGameRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncCancelSearchRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncCancelSearchRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::CancelSearchRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SearchGame_;
    const ::grpc::internal::RpcMethod rpcmethod_AcceptGame_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelSearch_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status SearchGame(::grpc::ServerContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response);
    virtual ::grpc::Status AcceptGame(::grpc::ServerContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response);
    virtual ::grpc::Status CancelSearch(::grpc::ServerContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SearchGame() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchGame(::grpc::ServerContext* context, ::game::battlemon::mm::SearchGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::mm::SearchGameResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AcceptGame() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptGame(::grpc::ServerContext* context, ::game::battlemon::mm::AcceptGameRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelSearch() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSearch(::grpc::ServerContext* context, ::game::battlemon::mm::CancelSearchRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SearchGame<WithAsyncMethod_AcceptGame<WithAsyncMethod_CancelSearch<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SearchGame() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::SearchGameRequest, ::game::battlemon::mm::SearchGameResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::SearchGameRequest* request, ::game::battlemon::mm::SearchGameResponse* response) { return this->SearchGame(context, request, response); }));}
    void SetMessageAllocatorFor_SearchGame(
        ::grpc::MessageAllocator< ::game::battlemon::mm::SearchGameRequest, ::game::battlemon::mm::SearchGameResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::SearchGameRequest, ::game::battlemon::mm::SearchGameResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchGame(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AcceptGame() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::AcceptGameRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::AcceptGameRequest* request, ::game::battlemon::common::Empty* response) { return this->AcceptGame(context, request, response); }));}
    void SetMessageAllocatorFor_AcceptGame(
        ::grpc::MessageAllocator< ::game::battlemon::mm::AcceptGameRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::AcceptGameRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptGame(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelSearch() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::CancelSearchRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::CancelSearchRequest* request, ::game::battlemon::common::Empty* response) { return this->CancelSearch(context, request, response); }));}
    void SetMessageAllocatorFor_CancelSearch(
        ::grpc::MessageAllocator< ::game::battlemon::mm::CancelSearchRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::CancelSearchRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SearchGame<WithCallbackMethod_AcceptGame<WithCallbackMethod_CancelSearch<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SearchGame() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AcceptGame() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelSearch() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SearchGame() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearchGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AcceptGame() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAcceptGame(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelSearch() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SearchGame() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SearchGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SearchGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AcceptGame() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AcceptGame(context, request, response); }));
    }
    ~WithRawCallbackMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* AcceptGame(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelSearch() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelSearch(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelSearch(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SearchGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SearchGame() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::SearchGameRequest, ::game::battlemon::mm::SearchGameResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::SearchGameRequest, ::game::battlemon::mm::SearchGameResponse>* streamer) {
                       return this->StreamedSearchGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SearchGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SearchGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::SearchGameRequest* /*request*/, ::game::battlemon::mm::SearchGameResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearchGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::SearchGameRequest,::game::battlemon::mm::SearchGameResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AcceptGame : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AcceptGame() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::AcceptGameRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::AcceptGameRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedAcceptGame(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AcceptGame() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AcceptGame(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::AcceptGameRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAcceptGame(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::AcceptGameRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelSearch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelSearch() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::CancelSearchRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::CancelSearchRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedCancelSearch(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelSearch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelSearch(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::CancelSearchRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::CancelSearchRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SearchGame<WithStreamedUnaryMethod_AcceptGame<WithStreamedUnaryMethod_CancelSearch<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SearchGame<WithStreamedUnaryMethod_AcceptGame<WithStreamedUnaryMethod_CancelSearch<Service > > > StreamedService;
};

}  // namespace mm
}  // namespace battlemon
}  // namespace game


#endif  // GRPC_mm_2eproto__INCLUDED
