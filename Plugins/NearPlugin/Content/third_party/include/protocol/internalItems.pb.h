// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalItems.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internalItems_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internalItems_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "items.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internalItems_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internalItems_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internalItems_2eproto;
namespace game {
namespace battlemon {
namespace items {
namespace internal {
class InternalLemonsInfoRequest;
struct InternalLemonsInfoRequestDefaultTypeInternal;
extern InternalLemonsInfoRequestDefaultTypeInternal _InternalLemonsInfoRequest_default_instance_;
class InternalLemonsInfoResponse;
struct InternalLemonsInfoResponseDefaultTypeInternal;
extern InternalLemonsInfoResponseDefaultTypeInternal _InternalLemonsInfoResponse_default_instance_;
class InternalUserLemon;
struct InternalUserLemonDefaultTypeInternal;
extern InternalUserLemonDefaultTypeInternal _InternalUserLemon_default_instance_;
class InternalUserLemonID;
struct InternalUserLemonIDDefaultTypeInternal;
extern InternalUserLemonIDDefaultTypeInternal _InternalUserLemonID_default_instance_;
class IsOwnerRequest;
struct IsOwnerRequestDefaultTypeInternal;
extern IsOwnerRequestDefaultTypeInternal _IsOwnerRequest_default_instance_;
class IsOwnerResponse;
struct IsOwnerResponseDefaultTypeInternal;
extern IsOwnerResponseDefaultTypeInternal _IsOwnerResponse_default_instance_;
}  // namespace internal
}  // namespace items
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::items::internal::InternalLemonsInfoRequest* Arena::CreateMaybeMessage<::game::battlemon::items::internal::InternalLemonsInfoRequest>(Arena*);
template<> ::game::battlemon::items::internal::InternalLemonsInfoResponse* Arena::CreateMaybeMessage<::game::battlemon::items::internal::InternalLemonsInfoResponse>(Arena*);
template<> ::game::battlemon::items::internal::InternalUserLemon* Arena::CreateMaybeMessage<::game::battlemon::items::internal::InternalUserLemon>(Arena*);
template<> ::game::battlemon::items::internal::InternalUserLemonID* Arena::CreateMaybeMessage<::game::battlemon::items::internal::InternalUserLemonID>(Arena*);
template<> ::game::battlemon::items::internal::IsOwnerRequest* Arena::CreateMaybeMessage<::game::battlemon::items::internal::IsOwnerRequest>(Arena*);
template<> ::game::battlemon::items::internal::IsOwnerResponse* Arena::CreateMaybeMessage<::game::battlemon::items::internal::IsOwnerResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace items {
namespace internal {

// ===================================================================

class IsOwnerRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.IsOwnerRequest) */ {
 public:
  inline IsOwnerRequest() : IsOwnerRequest(nullptr) {}
  ~IsOwnerRequest() override;
  explicit PROTOBUF_CONSTEXPR IsOwnerRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsOwnerRequest(const IsOwnerRequest& from);
  IsOwnerRequest(IsOwnerRequest&& from) noexcept
    : IsOwnerRequest() {
    *this = ::std::move(from);
  }

  inline IsOwnerRequest& operator=(const IsOwnerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOwnerRequest& operator=(IsOwnerRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsOwnerRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsOwnerRequest* internal_default_instance() {
    return reinterpret_cast<const IsOwnerRequest*>(
               &_IsOwnerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(IsOwnerRequest& a, IsOwnerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOwnerRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsOwnerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsOwnerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsOwnerRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsOwnerRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsOwnerRequest& from) {
    IsOwnerRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOwnerRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.IsOwnerRequest";
  }
  protected:
  explicit IsOwnerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNftIdsFieldNumber = 1,
    kNearIdFieldNumber = 2,
  };
  // repeated string nft_ids = 1;
  int nft_ids_size() const;
  private:
  int _internal_nft_ids_size() const;
  public:
  void clear_nft_ids();
  const std::string& nft_ids(int index) const;
  std::string* mutable_nft_ids(int index);
  void set_nft_ids(int index, const std::string& value);
  void set_nft_ids(int index, std::string&& value);
  void set_nft_ids(int index, const char* value);
  void set_nft_ids(int index, const char* value, size_t size);
  std::string* add_nft_ids();
  void add_nft_ids(const std::string& value);
  void add_nft_ids(std::string&& value);
  void add_nft_ids(const char* value);
  void add_nft_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& nft_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_nft_ids();
  private:
  const std::string& _internal_nft_ids(int index) const;
  std::string* _internal_add_nft_ids();
  public:

  // string near_id = 2;
  void clear_near_id();
  const std::string& near_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_id();
  PROTOBUF_NODISCARD std::string* release_near_id();
  void set_allocated_near_id(std::string* near_id);
  private:
  const std::string& _internal_near_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_id(const std::string& value);
  std::string* _internal_mutable_near_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.IsOwnerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> nft_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// -------------------------------------------------------------------

class IsOwnerResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.IsOwnerResponse) */ {
 public:
  inline IsOwnerResponse() : IsOwnerResponse(nullptr) {}
  ~IsOwnerResponse() override;
  explicit PROTOBUF_CONSTEXPR IsOwnerResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IsOwnerResponse(const IsOwnerResponse& from);
  IsOwnerResponse(IsOwnerResponse&& from) noexcept
    : IsOwnerResponse() {
    *this = ::std::move(from);
  }

  inline IsOwnerResponse& operator=(const IsOwnerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline IsOwnerResponse& operator=(IsOwnerResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IsOwnerResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const IsOwnerResponse* internal_default_instance() {
    return reinterpret_cast<const IsOwnerResponse*>(
               &_IsOwnerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IsOwnerResponse& a, IsOwnerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(IsOwnerResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IsOwnerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IsOwnerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IsOwnerResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IsOwnerResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const IsOwnerResponse& from) {
    IsOwnerResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IsOwnerResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.IsOwnerResponse";
  }
  protected:
  explicit IsOwnerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // bool result = 1;
  void clear_result();
  bool result() const;
  void set_result(bool value);
  private:
  bool _internal_result() const;
  void _internal_set_result(bool value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.IsOwnerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool result_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// -------------------------------------------------------------------

class InternalLemonsInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.InternalLemonsInfoRequest) */ {
 public:
  inline InternalLemonsInfoRequest() : InternalLemonsInfoRequest(nullptr) {}
  ~InternalLemonsInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR InternalLemonsInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalLemonsInfoRequest(const InternalLemonsInfoRequest& from);
  InternalLemonsInfoRequest(InternalLemonsInfoRequest&& from) noexcept
    : InternalLemonsInfoRequest() {
    *this = ::std::move(from);
  }

  inline InternalLemonsInfoRequest& operator=(const InternalLemonsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalLemonsInfoRequest& operator=(InternalLemonsInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalLemonsInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalLemonsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const InternalLemonsInfoRequest*>(
               &_InternalLemonsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternalLemonsInfoRequest& a, InternalLemonsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalLemonsInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalLemonsInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalLemonsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalLemonsInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalLemonsInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalLemonsInfoRequest& from) {
    InternalLemonsInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalLemonsInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.InternalLemonsInfoRequest";
  }
  protected:
  explicit InternalLemonsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersLemonidsFieldNumber = 1,
  };
  // repeated .game.battlemon.items.internal.InternalUserLemonID users_lemonids = 1;
  int users_lemonids_size() const;
  private:
  int _internal_users_lemonids_size() const;
  public:
  void clear_users_lemonids();
  ::game::battlemon::items::internal::InternalUserLemonID* mutable_users_lemonids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemonID >*
      mutable_users_lemonids();
  private:
  const ::game::battlemon::items::internal::InternalUserLemonID& _internal_users_lemonids(int index) const;
  ::game::battlemon::items::internal::InternalUserLemonID* _internal_add_users_lemonids();
  public:
  const ::game::battlemon::items::internal::InternalUserLemonID& users_lemonids(int index) const;
  ::game::battlemon::items::internal::InternalUserLemonID* add_users_lemonids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemonID >&
      users_lemonids() const;

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.InternalLemonsInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemonID > users_lemonids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// -------------------------------------------------------------------

class InternalUserLemonID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.InternalUserLemonID) */ {
 public:
  inline InternalUserLemonID() : InternalUserLemonID(nullptr) {}
  ~InternalUserLemonID() override;
  explicit PROTOBUF_CONSTEXPR InternalUserLemonID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalUserLemonID(const InternalUserLemonID& from);
  InternalUserLemonID(InternalUserLemonID&& from) noexcept
    : InternalUserLemonID() {
    *this = ::std::move(from);
  }

  inline InternalUserLemonID& operator=(const InternalUserLemonID& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalUserLemonID& operator=(InternalUserLemonID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalUserLemonID& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalUserLemonID* internal_default_instance() {
    return reinterpret_cast<const InternalUserLemonID*>(
               &_InternalUserLemonID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternalUserLemonID& a, InternalUserLemonID& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalUserLemonID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalUserLemonID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalUserLemonID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalUserLemonID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalUserLemonID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalUserLemonID& from) {
    InternalUserLemonID::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalUserLemonID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.InternalUserLemonID";
  }
  protected:
  explicit InternalUserLemonID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearIdFieldNumber = 1,
    kLemonIdFieldNumber = 2,
  };
  // string near_id = 1;
  void clear_near_id();
  const std::string& near_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_id();
  PROTOBUF_NODISCARD std::string* release_near_id();
  void set_allocated_near_id(std::string* near_id);
  private:
  const std::string& _internal_near_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_id(const std::string& value);
  std::string* _internal_mutable_near_id();
  public:

  // string lemon_id = 2;
  void clear_lemon_id();
  const std::string& lemon_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lemon_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lemon_id();
  PROTOBUF_NODISCARD std::string* release_lemon_id();
  void set_allocated_lemon_id(std::string* lemon_id);
  private:
  const std::string& _internal_lemon_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lemon_id(const std::string& value);
  std::string* _internal_mutable_lemon_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.InternalUserLemonID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemon_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// -------------------------------------------------------------------

class InternalLemonsInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.InternalLemonsInfoResponse) */ {
 public:
  inline InternalLemonsInfoResponse() : InternalLemonsInfoResponse(nullptr) {}
  ~InternalLemonsInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR InternalLemonsInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalLemonsInfoResponse(const InternalLemonsInfoResponse& from);
  InternalLemonsInfoResponse(InternalLemonsInfoResponse&& from) noexcept
    : InternalLemonsInfoResponse() {
    *this = ::std::move(from);
  }

  inline InternalLemonsInfoResponse& operator=(const InternalLemonsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalLemonsInfoResponse& operator=(InternalLemonsInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalLemonsInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalLemonsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const InternalLemonsInfoResponse*>(
               &_InternalLemonsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InternalLemonsInfoResponse& a, InternalLemonsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalLemonsInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalLemonsInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalLemonsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalLemonsInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalLemonsInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalLemonsInfoResponse& from) {
    InternalLemonsInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalLemonsInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.InternalLemonsInfoResponse";
  }
  protected:
  explicit InternalLemonsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersLemonsFieldNumber = 1,
  };
  // repeated .game.battlemon.items.internal.InternalUserLemon users_lemons = 1;
  int users_lemons_size() const;
  private:
  int _internal_users_lemons_size() const;
  public:
  void clear_users_lemons();
  ::game::battlemon::items::internal::InternalUserLemon* mutable_users_lemons(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemon >*
      mutable_users_lemons();
  private:
  const ::game::battlemon::items::internal::InternalUserLemon& _internal_users_lemons(int index) const;
  ::game::battlemon::items::internal::InternalUserLemon* _internal_add_users_lemons();
  public:
  const ::game::battlemon::items::internal::InternalUserLemon& users_lemons(int index) const;
  ::game::battlemon::items::internal::InternalUserLemon* add_users_lemons();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemon >&
      users_lemons() const;

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.InternalLemonsInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemon > users_lemons_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// -------------------------------------------------------------------

class InternalUserLemon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.items.internal.InternalUserLemon) */ {
 public:
  inline InternalUserLemon() : InternalUserLemon(nullptr) {}
  ~InternalUserLemon() override;
  explicit PROTOBUF_CONSTEXPR InternalUserLemon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalUserLemon(const InternalUserLemon& from);
  InternalUserLemon(InternalUserLemon&& from) noexcept
    : InternalUserLemon() {
    *this = ::std::move(from);
  }

  inline InternalUserLemon& operator=(const InternalUserLemon& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalUserLemon& operator=(InternalUserLemon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalUserLemon& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalUserLemon* internal_default_instance() {
    return reinterpret_cast<const InternalUserLemon*>(
               &_InternalUserLemon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(InternalUserLemon& a, InternalUserLemon& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalUserLemon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalUserLemon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalUserLemon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalUserLemon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalUserLemon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalUserLemon& from) {
    InternalUserLemon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalUserLemon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.items.internal.InternalUserLemon";
  }
  protected:
  explicit InternalUserLemon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearIdFieldNumber = 1,
    kLemonFieldNumber = 2,
  };
  // string near_id = 1;
  void clear_near_id();
  const std::string& near_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_id();
  PROTOBUF_NODISCARD std::string* release_near_id();
  void set_allocated_near_id(std::string* near_id);
  private:
  const std::string& _internal_near_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_id(const std::string& value);
  std::string* _internal_mutable_near_id();
  public:

  // .game.battlemon.items.Item lemon = 2;
  bool has_lemon() const;
  private:
  bool _internal_has_lemon() const;
  public:
  void clear_lemon();
  const ::game::battlemon::items::Item& lemon() const;
  PROTOBUF_NODISCARD ::game::battlemon::items::Item* release_lemon();
  ::game::battlemon::items::Item* mutable_lemon();
  void set_allocated_lemon(::game::battlemon::items::Item* lemon);
  private:
  const ::game::battlemon::items::Item& _internal_lemon() const;
  ::game::battlemon::items::Item* _internal_mutable_lemon();
  public:
  void unsafe_arena_set_allocated_lemon(
      ::game::battlemon::items::Item* lemon);
  ::game::battlemon::items::Item* unsafe_arena_release_lemon();

  // @@protoc_insertion_point(class_scope:game.battlemon.items.internal.InternalUserLemon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_id_;
    ::game::battlemon::items::Item* lemon_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalItems_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IsOwnerRequest

// repeated string nft_ids = 1;
inline int IsOwnerRequest::_internal_nft_ids_size() const {
  return _impl_.nft_ids_.size();
}
inline int IsOwnerRequest::nft_ids_size() const {
  return _internal_nft_ids_size();
}
inline void IsOwnerRequest::clear_nft_ids() {
  _impl_.nft_ids_.Clear();
}
inline std::string* IsOwnerRequest::add_nft_ids() {
  std::string* _s = _internal_add_nft_ids();
  // @@protoc_insertion_point(field_add_mutable:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
  return _s;
}
inline const std::string& IsOwnerRequest::_internal_nft_ids(int index) const {
  return _impl_.nft_ids_.Get(index);
}
inline const std::string& IsOwnerRequest::nft_ids(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
  return _internal_nft_ids(index);
}
inline std::string* IsOwnerRequest::mutable_nft_ids(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
  return _impl_.nft_ids_.Mutable(index);
}
inline void IsOwnerRequest::set_nft_ids(int index, const std::string& value) {
  _impl_.nft_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::set_nft_ids(int index, std::string&& value) {
  _impl_.nft_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::set_nft_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nft_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::set_nft_ids(int index, const char* value, size_t size) {
  _impl_.nft_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline std::string* IsOwnerRequest::_internal_add_nft_ids() {
  return _impl_.nft_ids_.Add();
}
inline void IsOwnerRequest::add_nft_ids(const std::string& value) {
  _impl_.nft_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::add_nft_ids(std::string&& value) {
  _impl_.nft_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::add_nft_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.nft_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline void IsOwnerRequest::add_nft_ids(const char* value, size_t size) {
  _impl_.nft_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
IsOwnerRequest::nft_ids() const {
  // @@protoc_insertion_point(field_list:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
  return _impl_.nft_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
IsOwnerRequest::mutable_nft_ids() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.items.internal.IsOwnerRequest.nft_ids)
  return &_impl_.nft_ids_;
}

// string near_id = 2;
inline void IsOwnerRequest::clear_near_id() {
  _impl_.near_id_.ClearToEmpty();
}
inline const std::string& IsOwnerRequest::near_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.IsOwnerRequest.near_id)
  return _internal_near_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IsOwnerRequest::set_near_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.IsOwnerRequest.near_id)
}
inline std::string* IsOwnerRequest::mutable_near_id() {
  std::string* _s = _internal_mutable_near_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.IsOwnerRequest.near_id)
  return _s;
}
inline const std::string& IsOwnerRequest::_internal_near_id() const {
  return _impl_.near_id_.Get();
}
inline void IsOwnerRequest::_internal_set_near_id(const std::string& value) {
  
  _impl_.near_id_.Set(value, GetArenaForAllocation());
}
inline std::string* IsOwnerRequest::_internal_mutable_near_id() {
  
  return _impl_.near_id_.Mutable(GetArenaForAllocation());
}
inline std::string* IsOwnerRequest::release_near_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.items.internal.IsOwnerRequest.near_id)
  return _impl_.near_id_.Release();
}
inline void IsOwnerRequest::set_allocated_near_id(std::string* near_id) {
  if (near_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_id_.SetAllocated(near_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_id_.IsDefault()) {
    _impl_.near_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.internal.IsOwnerRequest.near_id)
}

// -------------------------------------------------------------------

// IsOwnerResponse

// bool result = 1;
inline void IsOwnerResponse::clear_result() {
  _impl_.result_ = false;
}
inline bool IsOwnerResponse::_internal_result() const {
  return _impl_.result_;
}
inline bool IsOwnerResponse::result() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.IsOwnerResponse.result)
  return _internal_result();
}
inline void IsOwnerResponse::_internal_set_result(bool value) {
  
  _impl_.result_ = value;
}
inline void IsOwnerResponse::set_result(bool value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.IsOwnerResponse.result)
}

// -------------------------------------------------------------------

// InternalLemonsInfoRequest

// repeated .game.battlemon.items.internal.InternalUserLemonID users_lemonids = 1;
inline int InternalLemonsInfoRequest::_internal_users_lemonids_size() const {
  return _impl_.users_lemonids_.size();
}
inline int InternalLemonsInfoRequest::users_lemonids_size() const {
  return _internal_users_lemonids_size();
}
inline void InternalLemonsInfoRequest::clear_users_lemonids() {
  _impl_.users_lemonids_.Clear();
}
inline ::game::battlemon::items::internal::InternalUserLemonID* InternalLemonsInfoRequest::mutable_users_lemonids(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalLemonsInfoRequest.users_lemonids)
  return _impl_.users_lemonids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemonID >*
InternalLemonsInfoRequest::mutable_users_lemonids() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.items.internal.InternalLemonsInfoRequest.users_lemonids)
  return &_impl_.users_lemonids_;
}
inline const ::game::battlemon::items::internal::InternalUserLemonID& InternalLemonsInfoRequest::_internal_users_lemonids(int index) const {
  return _impl_.users_lemonids_.Get(index);
}
inline const ::game::battlemon::items::internal::InternalUserLemonID& InternalLemonsInfoRequest::users_lemonids(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalLemonsInfoRequest.users_lemonids)
  return _internal_users_lemonids(index);
}
inline ::game::battlemon::items::internal::InternalUserLemonID* InternalLemonsInfoRequest::_internal_add_users_lemonids() {
  return _impl_.users_lemonids_.Add();
}
inline ::game::battlemon::items::internal::InternalUserLemonID* InternalLemonsInfoRequest::add_users_lemonids() {
  ::game::battlemon::items::internal::InternalUserLemonID* _add = _internal_add_users_lemonids();
  // @@protoc_insertion_point(field_add:game.battlemon.items.internal.InternalLemonsInfoRequest.users_lemonids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemonID >&
InternalLemonsInfoRequest::users_lemonids() const {
  // @@protoc_insertion_point(field_list:game.battlemon.items.internal.InternalLemonsInfoRequest.users_lemonids)
  return _impl_.users_lemonids_;
}

// -------------------------------------------------------------------

// InternalUserLemonID

// string near_id = 1;
inline void InternalUserLemonID::clear_near_id() {
  _impl_.near_id_.ClearToEmpty();
}
inline const std::string& InternalUserLemonID::near_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalUserLemonID.near_id)
  return _internal_near_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalUserLemonID::set_near_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.InternalUserLemonID.near_id)
}
inline std::string* InternalUserLemonID::mutable_near_id() {
  std::string* _s = _internal_mutable_near_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalUserLemonID.near_id)
  return _s;
}
inline const std::string& InternalUserLemonID::_internal_near_id() const {
  return _impl_.near_id_.Get();
}
inline void InternalUserLemonID::_internal_set_near_id(const std::string& value) {
  
  _impl_.near_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalUserLemonID::_internal_mutable_near_id() {
  
  return _impl_.near_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalUserLemonID::release_near_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.items.internal.InternalUserLemonID.near_id)
  return _impl_.near_id_.Release();
}
inline void InternalUserLemonID::set_allocated_near_id(std::string* near_id) {
  if (near_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_id_.SetAllocated(near_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_id_.IsDefault()) {
    _impl_.near_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.internal.InternalUserLemonID.near_id)
}

// string lemon_id = 2;
inline void InternalUserLemonID::clear_lemon_id() {
  _impl_.lemon_id_.ClearToEmpty();
}
inline const std::string& InternalUserLemonID::lemon_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalUserLemonID.lemon_id)
  return _internal_lemon_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalUserLemonID::set_lemon_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lemon_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.InternalUserLemonID.lemon_id)
}
inline std::string* InternalUserLemonID::mutable_lemon_id() {
  std::string* _s = _internal_mutable_lemon_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalUserLemonID.lemon_id)
  return _s;
}
inline const std::string& InternalUserLemonID::_internal_lemon_id() const {
  return _impl_.lemon_id_.Get();
}
inline void InternalUserLemonID::_internal_set_lemon_id(const std::string& value) {
  
  _impl_.lemon_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalUserLemonID::_internal_mutable_lemon_id() {
  
  return _impl_.lemon_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalUserLemonID::release_lemon_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.items.internal.InternalUserLemonID.lemon_id)
  return _impl_.lemon_id_.Release();
}
inline void InternalUserLemonID::set_allocated_lemon_id(std::string* lemon_id) {
  if (lemon_id != nullptr) {
    
  } else {
    
  }
  _impl_.lemon_id_.SetAllocated(lemon_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lemon_id_.IsDefault()) {
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.internal.InternalUserLemonID.lemon_id)
}

// -------------------------------------------------------------------

// InternalLemonsInfoResponse

// repeated .game.battlemon.items.internal.InternalUserLemon users_lemons = 1;
inline int InternalLemonsInfoResponse::_internal_users_lemons_size() const {
  return _impl_.users_lemons_.size();
}
inline int InternalLemonsInfoResponse::users_lemons_size() const {
  return _internal_users_lemons_size();
}
inline void InternalLemonsInfoResponse::clear_users_lemons() {
  _impl_.users_lemons_.Clear();
}
inline ::game::battlemon::items::internal::InternalUserLemon* InternalLemonsInfoResponse::mutable_users_lemons(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalLemonsInfoResponse.users_lemons)
  return _impl_.users_lemons_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemon >*
InternalLemonsInfoResponse::mutable_users_lemons() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.items.internal.InternalLemonsInfoResponse.users_lemons)
  return &_impl_.users_lemons_;
}
inline const ::game::battlemon::items::internal::InternalUserLemon& InternalLemonsInfoResponse::_internal_users_lemons(int index) const {
  return _impl_.users_lemons_.Get(index);
}
inline const ::game::battlemon::items::internal::InternalUserLemon& InternalLemonsInfoResponse::users_lemons(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalLemonsInfoResponse.users_lemons)
  return _internal_users_lemons(index);
}
inline ::game::battlemon::items::internal::InternalUserLemon* InternalLemonsInfoResponse::_internal_add_users_lemons() {
  return _impl_.users_lemons_.Add();
}
inline ::game::battlemon::items::internal::InternalUserLemon* InternalLemonsInfoResponse::add_users_lemons() {
  ::game::battlemon::items::internal::InternalUserLemon* _add = _internal_add_users_lemons();
  // @@protoc_insertion_point(field_add:game.battlemon.items.internal.InternalLemonsInfoResponse.users_lemons)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::items::internal::InternalUserLemon >&
InternalLemonsInfoResponse::users_lemons() const {
  // @@protoc_insertion_point(field_list:game.battlemon.items.internal.InternalLemonsInfoResponse.users_lemons)
  return _impl_.users_lemons_;
}

// -------------------------------------------------------------------

// InternalUserLemon

// string near_id = 1;
inline void InternalUserLemon::clear_near_id() {
  _impl_.near_id_.ClearToEmpty();
}
inline const std::string& InternalUserLemon::near_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalUserLemon.near_id)
  return _internal_near_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalUserLemon::set_near_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.items.internal.InternalUserLemon.near_id)
}
inline std::string* InternalUserLemon::mutable_near_id() {
  std::string* _s = _internal_mutable_near_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalUserLemon.near_id)
  return _s;
}
inline const std::string& InternalUserLemon::_internal_near_id() const {
  return _impl_.near_id_.Get();
}
inline void InternalUserLemon::_internal_set_near_id(const std::string& value) {
  
  _impl_.near_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalUserLemon::_internal_mutable_near_id() {
  
  return _impl_.near_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalUserLemon::release_near_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.items.internal.InternalUserLemon.near_id)
  return _impl_.near_id_.Release();
}
inline void InternalUserLemon::set_allocated_near_id(std::string* near_id) {
  if (near_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_id_.SetAllocated(near_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_id_.IsDefault()) {
    _impl_.near_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.internal.InternalUserLemon.near_id)
}

// .game.battlemon.items.Item lemon = 2;
inline bool InternalUserLemon::_internal_has_lemon() const {
  return this != internal_default_instance() && _impl_.lemon_ != nullptr;
}
inline bool InternalUserLemon::has_lemon() const {
  return _internal_has_lemon();
}
inline const ::game::battlemon::items::Item& InternalUserLemon::_internal_lemon() const {
  const ::game::battlemon::items::Item* p = _impl_.lemon_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::items::Item&>(
      ::game::battlemon::items::_Item_default_instance_);
}
inline const ::game::battlemon::items::Item& InternalUserLemon::lemon() const {
  // @@protoc_insertion_point(field_get:game.battlemon.items.internal.InternalUserLemon.lemon)
  return _internal_lemon();
}
inline void InternalUserLemon::unsafe_arena_set_allocated_lemon(
    ::game::battlemon::items::Item* lemon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  _impl_.lemon_ = lemon;
  if (lemon) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.items.internal.InternalUserLemon.lemon)
}
inline ::game::battlemon::items::Item* InternalUserLemon::release_lemon() {
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::items::Item* InternalUserLemon::unsafe_arena_release_lemon() {
  // @@protoc_insertion_point(field_release:game.battlemon.items.internal.InternalUserLemon.lemon)
  
  ::game::battlemon::items::Item* temp = _impl_.lemon_;
  _impl_.lemon_ = nullptr;
  return temp;
}
inline ::game::battlemon::items::Item* InternalUserLemon::_internal_mutable_lemon() {
  
  if (_impl_.lemon_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::items::Item>(GetArenaForAllocation());
    _impl_.lemon_ = p;
  }
  return _impl_.lemon_;
}
inline ::game::battlemon::items::Item* InternalUserLemon::mutable_lemon() {
  ::game::battlemon::items::Item* _msg = _internal_mutable_lemon();
  // @@protoc_insertion_point(field_mutable:game.battlemon.items.internal.InternalUserLemon.lemon)
  return _msg;
}
inline void InternalUserLemon::set_allocated_lemon(::game::battlemon::items::Item* lemon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lemon_);
  }
  if (lemon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lemon));
    if (message_arena != submessage_arena) {
      lemon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lemon, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lemon_ = lemon;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.items.internal.InternalUserLemon.lemon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace items
}  // namespace battlemon
}  // namespace game

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internalItems_2eproto
