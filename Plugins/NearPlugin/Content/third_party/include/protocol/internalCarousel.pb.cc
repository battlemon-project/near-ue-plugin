// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalCarousel.proto

#include "internalCarousel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace carousel {
namespace internal {
PROTOBUF_CONSTEXPR CarouselRequests::CarouselRequests(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.request_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CarouselRequestsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarouselRequestsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarouselRequestsDefaultTypeInternal() {}
  union {
    CarouselRequests _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarouselRequestsDefaultTypeInternal _CarouselRequests_default_instance_;
PROTOBUF_CONSTEXPR CarouselResponses::CarouselResponses(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CarouselResponsesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CarouselResponsesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CarouselResponsesDefaultTypeInternal() {}
  union {
    CarouselResponses _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CarouselResponsesDefaultTypeInternal _CarouselResponses_default_instance_;
PROTOBUF_CONSTEXPR NeedUsersAccept::NeedUsersAccept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_ids_)*/{}
  , /*decltype(_impl_.manual_accept_)*/false
  , /*decltype(_impl_.time_to_accept_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NeedUsersAcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NeedUsersAcceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NeedUsersAcceptDefaultTypeInternal() {}
  union {
    NeedUsersAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NeedUsersAcceptDefaultTypeInternal _NeedUsersAccept_default_instance_;
PROTOBUF_CONSTEXPR InternalRoomInfo::InternalRoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalRoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalRoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalRoomInfoDefaultTypeInternal() {}
  union {
    InternalRoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalRoomInfoDefaultTypeInternal _InternalRoomInfo_default_instance_;
PROTOBUF_CONSTEXPR InternalNewPlayer::InternalNewPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.player_)*/nullptr
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalNewPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalNewPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalNewPlayerDefaultTypeInternal() {}
  union {
    InternalNewPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalNewPlayerDefaultTypeInternal _InternalNewPlayer_default_instance_;
PROTOBUF_CONSTEXPR InternalPlayer::InternalPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lemon_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.mode_)*/nullptr
  , /*decltype(_impl_.region_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalPlayerDefaultTypeInternal() {}
  union {
    InternalPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalPlayerDefaultTypeInternal _InternalPlayer_default_instance_;
PROTOBUF_CONSTEXPR PlayerInBattle::PlayerInBattle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerInBattleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInBattleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInBattleDefaultTypeInternal() {}
  union {
    PlayerInBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInBattleDefaultTypeInternal _PlayerInBattle_default_instance_;
}  // namespace internal
}  // namespace carousel
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_internalCarousel_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_internalCarousel_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internalCarousel_2eproto = nullptr;

const uint32_t TableStruct_internalCarousel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselRequests, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselRequests, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselRequests, _impl_.request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselResponses, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselResponses, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::CarouselResponses, _impl_.response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::NeedUsersAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::NeedUsersAccept, _impl_.near_ids_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::NeedUsersAccept, _impl_.manual_accept_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::NeedUsersAccept, _impl_.time_to_accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalRoomInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalRoomInfo, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalRoomInfo, _impl_.players_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalRoomInfo, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalNewPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalNewPlayer, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalNewPlayer, _impl_.player_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalNewPlayer, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalPlayer, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalPlayer, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalPlayer, _impl_.lemon_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::InternalPlayer, _impl_.region_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::PlayerInBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::PlayerInBattle, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::carousel::internal::PlayerInBattle, _impl_.room_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::carousel::internal::CarouselRequests)},
  { 12, -1, -1, sizeof(::game::battlemon::carousel::internal::CarouselResponses)},
  { 27, -1, -1, sizeof(::game::battlemon::carousel::internal::NeedUsersAccept)},
  { 36, -1, -1, sizeof(::game::battlemon::carousel::internal::InternalRoomInfo)},
  { 46, -1, -1, sizeof(::game::battlemon::carousel::internal::InternalNewPlayer)},
  { 55, -1, -1, sizeof(::game::battlemon::carousel::internal::InternalPlayer)},
  { 65, -1, -1, sizeof(::game::battlemon::carousel::internal::PlayerInBattle)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::carousel::internal::_CarouselRequests_default_instance_._instance,
  &::game::battlemon::carousel::internal::_CarouselResponses_default_instance_._instance,
  &::game::battlemon::carousel::internal::_NeedUsersAccept_default_instance_._instance,
  &::game::battlemon::carousel::internal::_InternalRoomInfo_default_instance_._instance,
  &::game::battlemon::carousel::internal::_InternalNewPlayer_default_instance_._instance,
  &::game::battlemon::carousel::internal::_InternalPlayer_default_instance_._instance,
  &::game::battlemon::carousel::internal::_PlayerInBattle_default_instance_._instance,
};

const char descriptor_table_protodef_internalCarousel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026internalCarousel.proto\022 game.battlemon"
  ".carousel.internal\032\010mm.proto\"\216\003\n\020Carouse"
  "lRequests\022F\n\nnew_player\030\001 \001(\01320.game.bat"
  "tlemon.carousel.internal.InternalPlayerH"
  "\000\022F\n\010new_room\030\002 \001(\01322.game.battlemon.car"
  "ousel.internal.InternalRoomInfoH\000\022I\n\rrem"
  "ove_player\030\003 \001(\01320.game.battlemon.carous"
  "el.internal.InternalPlayerH\000\022K\n\rroom_fin"
  "ished\030\004 \001(\01322.game.battlemon.carousel.in"
  "ternal.InternalRoomInfoH\000\022G\n\013accept_game"
  "\030\005 \001(\01320.game.battlemon.carousel.interna"
  "l.InternalPlayerH\000B\t\n\007request\"\222\005\n\021Carous"
  "elResponses\022H\n\nroom_ready\030\001 \001(\01322.game.b"
  "attlemon.carousel.internal.InternalRoomI"
  "nfoH\000\022N\n\017new_room_player\030\002 \001(\01323.game.ba"
  "ttlemon.carousel.internal.InternalNewPla"
  "yerH\000\022N\n\021need_users_accept\030\003 \001(\01321.game."
  "battlemon.carousel.internal.NeedUsersAcc"
  "eptH\000\022J\n\016room_not_found\030\004 \001(\01320.game.bat"
  "tlemon.carousel.internal.InternalPlayerH"
  "\000\022P\n\022accepting_canceled\030\005 \001(\01322.game.bat"
  "tlemon.carousel.internal.InternalRoomInf"
  "oH\000\022K\n\017player_in_queue\030\006 \001(\01320.game.batt"
  "lemon.carousel.internal.InternalPlayerH\000"
  "\022L\n\020player_in_battle\030\007 \001(\01320.game.battle"
  "mon.carousel.internal.PlayerInBattleH\000\022N"
  "\n\022player_out_of_line\030\010 \001(\01320.game.battle"
  "mon.carousel.internal.InternalPlayerH\000B\n"
  "\n\010response\"R\n\017NeedUsersAccept\022\020\n\010near_id"
  "s\030\001 \003(\t\022\025\n\rmanual_accept\030\002 \001(\010\022\026\n\016time_t"
  "o_accept\030\003 \001(\005\"\274\001\n\020InternalRoomInfo\022\017\n\007r"
  "oom_id\030\001 \001(\t\022)\n\004mode\030\002 \001(\0132\033.game.battle"
  "mon.mm.GameMode\022A\n\007players\030\003 \003(\01320.game."
  "battlemon.carousel.internal.InternalPlay"
  "er\022)\n\006region\030\004 \001(\0162\031.game.battlemon.mm.R"
  "egion\"\221\001\n\021InternalNewPlayer\022\017\n\007room_id\030\001"
  " \001(\t\022@\n\006player\030\002 \001(\01320.game.battlemon.ca"
  "rousel.internal.InternalPlayer\022)\n\006region"
  "\030\003 \001(\0162\031.game.battlemon.mm.Region\"\211\001\n\016In"
  "ternalPlayer\022\017\n\007near_id\030\001 \001(\t\022)\n\004mode\030\002 "
  "\001(\0132\033.game.battlemon.mm.GameMode\022\020\n\010lemo"
  "n_id\030\003 \001(\t\022)\n\006region\030\004 \001(\0162\031.game.battle"
  "mon.mm.Region\"2\n\016PlayerInBattle\022\017\n\007near_"
  "id\030\001 \001(\t\022\017\n\007room_id\030\002 \001(\tB\nZ\010servicesb\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_internalCarousel_2eproto_deps[1] = {
  &::descriptor_table_mm_2eproto,
};
static ::_pbi::once_flag descriptor_table_internalCarousel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internalCarousel_2eproto = {
    false, false, 1765, descriptor_table_protodef_internalCarousel_2eproto,
    "internalCarousel.proto",
    &descriptor_table_internalCarousel_2eproto_once, descriptor_table_internalCarousel_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_internalCarousel_2eproto::offsets,
    file_level_metadata_internalCarousel_2eproto, file_level_enum_descriptors_internalCarousel_2eproto,
    file_level_service_descriptors_internalCarousel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internalCarousel_2eproto_getter() {
  return &descriptor_table_internalCarousel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internalCarousel_2eproto(&descriptor_table_internalCarousel_2eproto);
namespace game {
namespace battlemon {
namespace carousel {
namespace internal {

// ===================================================================

class CarouselRequests::_Internal {
 public:
  static const ::game::battlemon::carousel::internal::InternalPlayer& new_player(const CarouselRequests* msg);
  static const ::game::battlemon::carousel::internal::InternalRoomInfo& new_room(const CarouselRequests* msg);
  static const ::game::battlemon::carousel::internal::InternalPlayer& remove_player(const CarouselRequests* msg);
  static const ::game::battlemon::carousel::internal::InternalRoomInfo& room_finished(const CarouselRequests* msg);
  static const ::game::battlemon::carousel::internal::InternalPlayer& accept_game(const CarouselRequests* msg);
};

const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselRequests::_Internal::new_player(const CarouselRequests* msg) {
  return *msg->_impl_.request_.new_player_;
}
const ::game::battlemon::carousel::internal::InternalRoomInfo&
CarouselRequests::_Internal::new_room(const CarouselRequests* msg) {
  return *msg->_impl_.request_.new_room_;
}
const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselRequests::_Internal::remove_player(const CarouselRequests* msg) {
  return *msg->_impl_.request_.remove_player_;
}
const ::game::battlemon::carousel::internal::InternalRoomInfo&
CarouselRequests::_Internal::room_finished(const CarouselRequests* msg) {
  return *msg->_impl_.request_.room_finished_;
}
const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselRequests::_Internal::accept_game(const CarouselRequests* msg) {
  return *msg->_impl_.request_.accept_game_;
}
void CarouselRequests::set_allocated_new_player(::game::battlemon::carousel::internal::InternalPlayer* new_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (new_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_player);
    if (message_arena != submessage_arena) {
      new_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_player, submessage_arena);
    }
    set_has_new_player();
    _impl_.request_.new_player_ = new_player;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselRequests.new_player)
}
void CarouselRequests::set_allocated_new_room(::game::battlemon::carousel::internal::InternalRoomInfo* new_room) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (new_room) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_room);
    if (message_arena != submessage_arena) {
      new_room = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_room, submessage_arena);
    }
    set_has_new_room();
    _impl_.request_.new_room_ = new_room;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselRequests.new_room)
}
void CarouselRequests::set_allocated_remove_player(::game::battlemon::carousel::internal::InternalPlayer* remove_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (remove_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remove_player);
    if (message_arena != submessage_arena) {
      remove_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_player, submessage_arena);
    }
    set_has_remove_player();
    _impl_.request_.remove_player_ = remove_player;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselRequests.remove_player)
}
void CarouselRequests::set_allocated_room_finished(::game::battlemon::carousel::internal::InternalRoomInfo* room_finished) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (room_finished) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_finished);
    if (message_arena != submessage_arena) {
      room_finished = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_finished, submessage_arena);
    }
    set_has_room_finished();
    _impl_.request_.room_finished_ = room_finished;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselRequests.room_finished)
}
void CarouselRequests::set_allocated_accept_game(::game::battlemon::carousel::internal::InternalPlayer* accept_game) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_request();
  if (accept_game) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accept_game);
    if (message_arena != submessage_arena) {
      accept_game = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accept_game, submessage_arena);
    }
    set_has_accept_game();
    _impl_.request_.accept_game_ = accept_game;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselRequests.accept_game)
}
CarouselRequests::CarouselRequests(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.CarouselRequests)
}
CarouselRequests::CarouselRequests(const CarouselRequests& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarouselRequests* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_request();
  switch (from.request_case()) {
    case kNewPlayer: {
      _this->_internal_mutable_new_player()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_new_player());
      break;
    }
    case kNewRoom: {
      _this->_internal_mutable_new_room()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_new_room());
      break;
    }
    case kRemovePlayer: {
      _this->_internal_mutable_remove_player()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_remove_player());
      break;
    }
    case kRoomFinished: {
      _this->_internal_mutable_room_finished()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_room_finished());
      break;
    }
    case kAcceptGame: {
      _this->_internal_mutable_accept_game()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_accept_game());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.CarouselRequests)
}

inline void CarouselRequests::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.request_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_request();
}

CarouselRequests::~CarouselRequests() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.CarouselRequests)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarouselRequests::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_request()) {
    clear_request();
  }
}

void CarouselRequests::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarouselRequests::clear_request() {
// @@protoc_insertion_point(one_of_clear_start:game.battlemon.carousel.internal.CarouselRequests)
  switch (request_case()) {
    case kNewPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.new_player_;
      }
      break;
    }
    case kNewRoom: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.new_room_;
      }
      break;
    }
    case kRemovePlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.remove_player_;
      }
      break;
    }
    case kRoomFinished: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.room_finished_;
      }
      break;
    }
    case kAcceptGame: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.request_.accept_game_;
      }
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = REQUEST_NOT_SET;
}


void CarouselRequests::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.CarouselRequests)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_request();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarouselRequests::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.carousel.internal.InternalPlayer new_player = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalRoomInfo new_room = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_room(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer remove_player = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalRoomInfo room_finished = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_finished(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer accept_game = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_accept_game(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarouselRequests::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.CarouselRequests)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.carousel.internal.InternalPlayer new_player = 1;
  if (_internal_has_new_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::new_player(this),
        _Internal::new_player(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalRoomInfo new_room = 2;
  if (_internal_has_new_room()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_room(this),
        _Internal::new_room(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalPlayer remove_player = 3;
  if (_internal_has_remove_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::remove_player(this),
        _Internal::remove_player(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalRoomInfo room_finished = 4;
  if (_internal_has_room_finished()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::room_finished(this),
        _Internal::room_finished(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalPlayer accept_game = 5;
  if (_internal_has_accept_game()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::accept_game(this),
        _Internal::accept_game(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.CarouselRequests)
  return target;
}

size_t CarouselRequests::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.CarouselRequests)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (request_case()) {
    // .game.battlemon.carousel.internal.InternalPlayer new_player = 1;
    case kNewPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.new_player_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalRoomInfo new_room = 2;
    case kNewRoom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.new_room_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalPlayer remove_player = 3;
    case kRemovePlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.remove_player_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalRoomInfo room_finished = 4;
    case kRoomFinished: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.room_finished_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalPlayer accept_game = 5;
    case kAcceptGame: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.request_.accept_game_);
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarouselRequests::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarouselRequests::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarouselRequests::GetClassData() const { return &_class_data_; }


void CarouselRequests::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarouselRequests*>(&to_msg);
  auto& from = static_cast<const CarouselRequests&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.CarouselRequests)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.request_case()) {
    case kNewPlayer: {
      _this->_internal_mutable_new_player()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_new_player());
      break;
    }
    case kNewRoom: {
      _this->_internal_mutable_new_room()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_new_room());
      break;
    }
    case kRemovePlayer: {
      _this->_internal_mutable_remove_player()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_remove_player());
      break;
    }
    case kRoomFinished: {
      _this->_internal_mutable_room_finished()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_room_finished());
      break;
    }
    case kAcceptGame: {
      _this->_internal_mutable_accept_game()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_accept_game());
      break;
    }
    case REQUEST_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarouselRequests::CopyFrom(const CarouselRequests& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.CarouselRequests)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarouselRequests::IsInitialized() const {
  return true;
}

void CarouselRequests::InternalSwap(CarouselRequests* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.request_, other->_impl_.request_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarouselRequests::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[0]);
}

// ===================================================================

class CarouselResponses::_Internal {
 public:
  static const ::game::battlemon::carousel::internal::InternalRoomInfo& room_ready(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::InternalNewPlayer& new_room_player(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::NeedUsersAccept& need_users_accept(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::InternalPlayer& room_not_found(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::InternalRoomInfo& accepting_canceled(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::InternalPlayer& player_in_queue(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::PlayerInBattle& player_in_battle(const CarouselResponses* msg);
  static const ::game::battlemon::carousel::internal::InternalPlayer& player_out_of_line(const CarouselResponses* msg);
};

const ::game::battlemon::carousel::internal::InternalRoomInfo&
CarouselResponses::_Internal::room_ready(const CarouselResponses* msg) {
  return *msg->_impl_.response_.room_ready_;
}
const ::game::battlemon::carousel::internal::InternalNewPlayer&
CarouselResponses::_Internal::new_room_player(const CarouselResponses* msg) {
  return *msg->_impl_.response_.new_room_player_;
}
const ::game::battlemon::carousel::internal::NeedUsersAccept&
CarouselResponses::_Internal::need_users_accept(const CarouselResponses* msg) {
  return *msg->_impl_.response_.need_users_accept_;
}
const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselResponses::_Internal::room_not_found(const CarouselResponses* msg) {
  return *msg->_impl_.response_.room_not_found_;
}
const ::game::battlemon::carousel::internal::InternalRoomInfo&
CarouselResponses::_Internal::accepting_canceled(const CarouselResponses* msg) {
  return *msg->_impl_.response_.accepting_canceled_;
}
const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselResponses::_Internal::player_in_queue(const CarouselResponses* msg) {
  return *msg->_impl_.response_.player_in_queue_;
}
const ::game::battlemon::carousel::internal::PlayerInBattle&
CarouselResponses::_Internal::player_in_battle(const CarouselResponses* msg) {
  return *msg->_impl_.response_.player_in_battle_;
}
const ::game::battlemon::carousel::internal::InternalPlayer&
CarouselResponses::_Internal::player_out_of_line(const CarouselResponses* msg) {
  return *msg->_impl_.response_.player_out_of_line_;
}
void CarouselResponses::set_allocated_room_ready(::game::battlemon::carousel::internal::InternalRoomInfo* room_ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (room_ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_ready);
    if (message_arena != submessage_arena) {
      room_ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_ready, submessage_arena);
    }
    set_has_room_ready();
    _impl_.response_.room_ready_ = room_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.room_ready)
}
void CarouselResponses::set_allocated_new_room_player(::game::battlemon::carousel::internal::InternalNewPlayer* new_room_player) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (new_room_player) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(new_room_player);
    if (message_arena != submessage_arena) {
      new_room_player = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, new_room_player, submessage_arena);
    }
    set_has_new_room_player();
    _impl_.response_.new_room_player_ = new_room_player;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.new_room_player)
}
void CarouselResponses::set_allocated_need_users_accept(::game::battlemon::carousel::internal::NeedUsersAccept* need_users_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (need_users_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(need_users_accept);
    if (message_arena != submessage_arena) {
      need_users_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, need_users_accept, submessage_arena);
    }
    set_has_need_users_accept();
    _impl_.response_.need_users_accept_ = need_users_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.need_users_accept)
}
void CarouselResponses::set_allocated_room_not_found(::game::battlemon::carousel::internal::InternalPlayer* room_not_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (room_not_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_not_found);
    if (message_arena != submessage_arena) {
      room_not_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_not_found, submessage_arena);
    }
    set_has_room_not_found();
    _impl_.response_.room_not_found_ = room_not_found;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.room_not_found)
}
void CarouselResponses::set_allocated_accepting_canceled(::game::battlemon::carousel::internal::InternalRoomInfo* accepting_canceled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (accepting_canceled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(accepting_canceled);
    if (message_arena != submessage_arena) {
      accepting_canceled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accepting_canceled, submessage_arena);
    }
    set_has_accepting_canceled();
    _impl_.response_.accepting_canceled_ = accepting_canceled;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.accepting_canceled)
}
void CarouselResponses::set_allocated_player_in_queue(::game::battlemon::carousel::internal::InternalPlayer* player_in_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (player_in_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_in_queue);
    if (message_arena != submessage_arena) {
      player_in_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_in_queue, submessage_arena);
    }
    set_has_player_in_queue();
    _impl_.response_.player_in_queue_ = player_in_queue;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_in_queue)
}
void CarouselResponses::set_allocated_player_in_battle(::game::battlemon::carousel::internal::PlayerInBattle* player_in_battle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (player_in_battle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_in_battle);
    if (message_arena != submessage_arena) {
      player_in_battle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_in_battle, submessage_arena);
    }
    set_has_player_in_battle();
    _impl_.response_.player_in_battle_ = player_in_battle;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_in_battle)
}
void CarouselResponses::set_allocated_player_out_of_line(::game::battlemon::carousel::internal::InternalPlayer* player_out_of_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (player_out_of_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(player_out_of_line);
    if (message_arena != submessage_arena) {
      player_out_of_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_out_of_line, submessage_arena);
    }
    set_has_player_out_of_line();
    _impl_.response_.player_out_of_line_ = player_out_of_line;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.carousel.internal.CarouselResponses.player_out_of_line)
}
CarouselResponses::CarouselResponses(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.CarouselResponses)
}
CarouselResponses::CarouselResponses(const CarouselResponses& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CarouselResponses* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_response();
  switch (from.response_case()) {
    case kRoomReady: {
      _this->_internal_mutable_room_ready()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_room_ready());
      break;
    }
    case kNewRoomPlayer: {
      _this->_internal_mutable_new_room_player()->::game::battlemon::carousel::internal::InternalNewPlayer::MergeFrom(
          from._internal_new_room_player());
      break;
    }
    case kNeedUsersAccept: {
      _this->_internal_mutable_need_users_accept()->::game::battlemon::carousel::internal::NeedUsersAccept::MergeFrom(
          from._internal_need_users_accept());
      break;
    }
    case kRoomNotFound: {
      _this->_internal_mutable_room_not_found()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_room_not_found());
      break;
    }
    case kAcceptingCanceled: {
      _this->_internal_mutable_accepting_canceled()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_accepting_canceled());
      break;
    }
    case kPlayerInQueue: {
      _this->_internal_mutable_player_in_queue()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_player_in_queue());
      break;
    }
    case kPlayerInBattle: {
      _this->_internal_mutable_player_in_battle()->::game::battlemon::carousel::internal::PlayerInBattle::MergeFrom(
          from._internal_player_in_battle());
      break;
    }
    case kPlayerOutOfLine: {
      _this->_internal_mutable_player_out_of_line()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_player_out_of_line());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.CarouselResponses)
}

inline void CarouselResponses::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.response_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_response();
}

CarouselResponses::~CarouselResponses() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.CarouselResponses)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CarouselResponses::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_response()) {
    clear_response();
  }
}

void CarouselResponses::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CarouselResponses::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:game.battlemon.carousel.internal.CarouselResponses)
  switch (response_case()) {
    case kRoomReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.room_ready_;
      }
      break;
    }
    case kNewRoomPlayer: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.new_room_player_;
      }
      break;
    }
    case kNeedUsersAccept: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.need_users_accept_;
      }
      break;
    }
    case kRoomNotFound: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.room_not_found_;
      }
      break;
    }
    case kAcceptingCanceled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.accepting_canceled_;
      }
      break;
    }
    case kPlayerInQueue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.player_in_queue_;
      }
      break;
    }
    case kPlayerInBattle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.player_in_battle_;
      }
      break;
    }
    case kPlayerOutOfLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.response_.player_out_of_line_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = RESPONSE_NOT_SET;
}


void CarouselResponses::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.CarouselResponses)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CarouselResponses::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.carousel.internal.InternalRoomInfo room_ready = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_ready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalNewPlayer new_room_player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_new_room_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.NeedUsersAccept need_users_accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_need_users_accept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer room_not_found = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_not_found(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalRoomInfo accepting_canceled = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_accepting_canceled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer player_in_queue = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_in_queue(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.PlayerInBattle player_in_battle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_in_battle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer player_out_of_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_out_of_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CarouselResponses::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.CarouselResponses)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.carousel.internal.InternalRoomInfo room_ready = 1;
  if (_internal_has_room_ready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room_ready(this),
        _Internal::room_ready(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalNewPlayer new_room_player = 2;
  if (_internal_has_new_room_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::new_room_player(this),
        _Internal::new_room_player(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.NeedUsersAccept need_users_accept = 3;
  if (_internal_has_need_users_accept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::need_users_accept(this),
        _Internal::need_users_accept(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalPlayer room_not_found = 4;
  if (_internal_has_room_not_found()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::room_not_found(this),
        _Internal::room_not_found(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalRoomInfo accepting_canceled = 5;
  if (_internal_has_accepting_canceled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::accepting_canceled(this),
        _Internal::accepting_canceled(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalPlayer player_in_queue = 6;
  if (_internal_has_player_in_queue()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::player_in_queue(this),
        _Internal::player_in_queue(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.PlayerInBattle player_in_battle = 7;
  if (_internal_has_player_in_battle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::player_in_battle(this),
        _Internal::player_in_battle(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.carousel.internal.InternalPlayer player_out_of_line = 8;
  if (_internal_has_player_out_of_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::player_out_of_line(this),
        _Internal::player_out_of_line(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.CarouselResponses)
  return target;
}

size_t CarouselResponses::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.CarouselResponses)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (response_case()) {
    // .game.battlemon.carousel.internal.InternalRoomInfo room_ready = 1;
    case kRoomReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.room_ready_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalNewPlayer new_room_player = 2;
    case kNewRoomPlayer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.new_room_player_);
      break;
    }
    // .game.battlemon.carousel.internal.NeedUsersAccept need_users_accept = 3;
    case kNeedUsersAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.need_users_accept_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalPlayer room_not_found = 4;
    case kRoomNotFound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.room_not_found_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalRoomInfo accepting_canceled = 5;
    case kAcceptingCanceled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.accepting_canceled_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalPlayer player_in_queue = 6;
    case kPlayerInQueue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.player_in_queue_);
      break;
    }
    // .game.battlemon.carousel.internal.PlayerInBattle player_in_battle = 7;
    case kPlayerInBattle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.player_in_battle_);
      break;
    }
    // .game.battlemon.carousel.internal.InternalPlayer player_out_of_line = 8;
    case kPlayerOutOfLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.response_.player_out_of_line_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CarouselResponses::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CarouselResponses::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CarouselResponses::GetClassData() const { return &_class_data_; }


void CarouselResponses::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CarouselResponses*>(&to_msg);
  auto& from = static_cast<const CarouselResponses&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.CarouselResponses)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.response_case()) {
    case kRoomReady: {
      _this->_internal_mutable_room_ready()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_room_ready());
      break;
    }
    case kNewRoomPlayer: {
      _this->_internal_mutable_new_room_player()->::game::battlemon::carousel::internal::InternalNewPlayer::MergeFrom(
          from._internal_new_room_player());
      break;
    }
    case kNeedUsersAccept: {
      _this->_internal_mutable_need_users_accept()->::game::battlemon::carousel::internal::NeedUsersAccept::MergeFrom(
          from._internal_need_users_accept());
      break;
    }
    case kRoomNotFound: {
      _this->_internal_mutable_room_not_found()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_room_not_found());
      break;
    }
    case kAcceptingCanceled: {
      _this->_internal_mutable_accepting_canceled()->::game::battlemon::carousel::internal::InternalRoomInfo::MergeFrom(
          from._internal_accepting_canceled());
      break;
    }
    case kPlayerInQueue: {
      _this->_internal_mutable_player_in_queue()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_player_in_queue());
      break;
    }
    case kPlayerInBattle: {
      _this->_internal_mutable_player_in_battle()->::game::battlemon::carousel::internal::PlayerInBattle::MergeFrom(
          from._internal_player_in_battle());
      break;
    }
    case kPlayerOutOfLine: {
      _this->_internal_mutable_player_out_of_line()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
          from._internal_player_out_of_line());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CarouselResponses::CopyFrom(const CarouselResponses& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.CarouselResponses)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CarouselResponses::IsInitialized() const {
  return true;
}

void CarouselResponses::InternalSwap(CarouselResponses* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.response_, other->_impl_.response_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CarouselResponses::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[1]);
}

// ===================================================================

class NeedUsersAccept::_Internal {
 public:
};

NeedUsersAccept::NeedUsersAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.NeedUsersAccept)
}
NeedUsersAccept::NeedUsersAccept(const NeedUsersAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NeedUsersAccept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){from._impl_.near_ids_}
    , decltype(_impl_.manual_accept_){}
    , decltype(_impl_.time_to_accept_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_accept_, &from._impl_.manual_accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_to_accept_) -
    reinterpret_cast<char*>(&_impl_.manual_accept_)) + sizeof(_impl_.time_to_accept_));
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.NeedUsersAccept)
}

inline void NeedUsersAccept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){arena}
    , decltype(_impl_.manual_accept_){false}
    , decltype(_impl_.time_to_accept_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

NeedUsersAccept::~NeedUsersAccept() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.NeedUsersAccept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NeedUsersAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_ids_.~RepeatedPtrField();
}

void NeedUsersAccept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NeedUsersAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.NeedUsersAccept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_ids_.Clear();
  ::memset(&_impl_.manual_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_to_accept_) -
      reinterpret_cast<char*>(&_impl_.manual_accept_)) + sizeof(_impl_.time_to_accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeedUsersAccept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string near_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_near_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.NeedUsersAccept.near_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool manual_accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.manual_accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 time_to_accept = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.time_to_accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeedUsersAccept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.NeedUsersAccept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string near_ids = 1;
  for (int i = 0, n = this->_internal_near_ids_size(); i < n; i++) {
    const auto& s = this->_internal_near_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.NeedUsersAccept.near_ids");
    target = stream->WriteString(1, s, target);
  }

  // bool manual_accept = 2;
  if (this->_internal_manual_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_manual_accept(), target);
  }

  // int32 time_to_accept = 3;
  if (this->_internal_time_to_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_time_to_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.NeedUsersAccept)
  return target;
}

size_t NeedUsersAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.NeedUsersAccept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string near_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.near_ids_.size());
  for (int i = 0, n = _impl_.near_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.near_ids_.Get(i));
  }

  // bool manual_accept = 2;
  if (this->_internal_manual_accept() != 0) {
    total_size += 1 + 1;
  }

  // int32 time_to_accept = 3;
  if (this->_internal_time_to_accept() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_to_accept());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeedUsersAccept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NeedUsersAccept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeedUsersAccept::GetClassData() const { return &_class_data_; }


void NeedUsersAccept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NeedUsersAccept*>(&to_msg);
  auto& from = static_cast<const NeedUsersAccept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.NeedUsersAccept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.near_ids_.MergeFrom(from._impl_.near_ids_);
  if (from._internal_manual_accept() != 0) {
    _this->_internal_set_manual_accept(from._internal_manual_accept());
  }
  if (from._internal_time_to_accept() != 0) {
    _this->_internal_set_time_to_accept(from._internal_time_to_accept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeedUsersAccept::CopyFrom(const NeedUsersAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.NeedUsersAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeedUsersAccept::IsInitialized() const {
  return true;
}

void NeedUsersAccept::InternalSwap(NeedUsersAccept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.near_ids_.InternalSwap(&other->_impl_.near_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NeedUsersAccept, _impl_.time_to_accept_)
      + sizeof(NeedUsersAccept::_impl_.time_to_accept_)
      - PROTOBUF_FIELD_OFFSET(NeedUsersAccept, _impl_.manual_accept_)>(
          reinterpret_cast<char*>(&_impl_.manual_accept_),
          reinterpret_cast<char*>(&other->_impl_.manual_accept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NeedUsersAccept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[2]);
}

// ===================================================================

class InternalRoomInfo::_Internal {
 public:
  static const ::game::battlemon::mm::GameMode& mode(const InternalRoomInfo* msg);
};

const ::game::battlemon::mm::GameMode&
InternalRoomInfo::_Internal::mode(const InternalRoomInfo* msg) {
  return *msg->_impl_.mode_;
}
void InternalRoomInfo::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
InternalRoomInfo::InternalRoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.InternalRoomInfo)
}
InternalRoomInfo::InternalRoomInfo(const InternalRoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalRoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::game::battlemon::mm::GameMode(*from._impl_.mode_);
  }
  _this->_impl_.region_ = from._impl_.region_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.InternalRoomInfo)
}

inline void InternalRoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalRoomInfo::~InternalRoomInfo() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.InternalRoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalRoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.room_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mode_;
}

void InternalRoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.InternalRoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  _impl_.region_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalRoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.InternalRoomInfo.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.GameMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.carousel.internal.InternalPlayer players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.Region region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::game::battlemon::mm::Region>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalRoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.InternalRoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.InternalRoomInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // repeated .game.battlemon.carousel.internal.InternalPlayer players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .game.battlemon.mm.Region region = 4;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.InternalRoomInfo)
  return target;
}

size_t InternalRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.InternalRoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.carousel.internal.InternalPlayer players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  // .game.battlemon.mm.Region region = 4;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalRoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalRoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalRoomInfo::GetClassData() const { return &_class_data_; }


void InternalRoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalRoomInfo*>(&to_msg);
  auto& from = static_cast<const InternalRoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.InternalRoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::game::battlemon::mm::GameMode::MergeFrom(
        from._internal_mode());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalRoomInfo::CopyFrom(const InternalRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.InternalRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalRoomInfo::IsInitialized() const {
  return true;
}

void InternalRoomInfo::InternalSwap(InternalRoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalRoomInfo, _impl_.region_)
      + sizeof(InternalRoomInfo::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(InternalRoomInfo, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalRoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[3]);
}

// ===================================================================

class InternalNewPlayer::_Internal {
 public:
  static const ::game::battlemon::carousel::internal::InternalPlayer& player(const InternalNewPlayer* msg);
};

const ::game::battlemon::carousel::internal::InternalPlayer&
InternalNewPlayer::_Internal::player(const InternalNewPlayer* msg) {
  return *msg->_impl_.player_;
}
InternalNewPlayer::InternalNewPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.InternalNewPlayer)
}
InternalNewPlayer::InternalNewPlayer(const InternalNewPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalNewPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_player()) {
    _this->_impl_.player_ = new ::game::battlemon::carousel::internal::InternalPlayer(*from._impl_.player_);
  }
  _this->_impl_.region_ = from._impl_.region_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.InternalNewPlayer)
}

inline void InternalNewPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.room_id_){}
    , decltype(_impl_.player_){nullptr}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalNewPlayer::~InternalNewPlayer() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.InternalNewPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalNewPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.room_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.player_;
}

void InternalNewPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalNewPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.InternalNewPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.room_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.player_ != nullptr) {
    delete _impl_.player_;
  }
  _impl_.player_ = nullptr;
  _impl_.region_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalNewPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.InternalNewPlayer.room_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.carousel.internal.InternalPlayer player = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_player(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.Region region = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::game::battlemon::mm::Region>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalNewPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.InternalNewPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.InternalNewPlayer.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // .game.battlemon.carousel.internal.InternalPlayer player = 2;
  if (this->_internal_has_player()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::player(this),
        _Internal::player(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.mm.Region region = 3;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.InternalNewPlayer)
  return target;
}

size_t InternalNewPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.InternalNewPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // .game.battlemon.carousel.internal.InternalPlayer player = 2;
  if (this->_internal_has_player()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.player_);
  }

  // .game.battlemon.mm.Region region = 3;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalNewPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalNewPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalNewPlayer::GetClassData() const { return &_class_data_; }


void InternalNewPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalNewPlayer*>(&to_msg);
  auto& from = static_cast<const InternalNewPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.InternalNewPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (from._internal_has_player()) {
    _this->_internal_mutable_player()->::game::battlemon::carousel::internal::InternalPlayer::MergeFrom(
        from._internal_player());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalNewPlayer::CopyFrom(const InternalNewPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.InternalNewPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalNewPlayer::IsInitialized() const {
  return true;
}

void InternalNewPlayer::InternalSwap(InternalNewPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalNewPlayer, _impl_.region_)
      + sizeof(InternalNewPlayer::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(InternalNewPlayer, _impl_.player_)>(
          reinterpret_cast<char*>(&_impl_.player_),
          reinterpret_cast<char*>(&other->_impl_.player_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalNewPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[4]);
}

// ===================================================================

class InternalPlayer::_Internal {
 public:
  static const ::game::battlemon::mm::GameMode& mode(const InternalPlayer* msg);
};

const ::game::battlemon::mm::GameMode&
InternalPlayer::_Internal::mode(const InternalPlayer* msg) {
  return *msg->_impl_.mode_;
}
void InternalPlayer::clear_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
}
InternalPlayer::InternalPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.InternalPlayer)
}
InternalPlayer::InternalPlayer(const InternalPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_id_){}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.region_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lemon_id().empty()) {
    _this->_impl_.lemon_id_.Set(from._internal_lemon_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_mode()) {
    _this->_impl_.mode_ = new ::game::battlemon::mm::GameMode(*from._impl_.mode_);
  }
  _this->_impl_.region_ = from._impl_.region_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.InternalPlayer)
}

inline void InternalPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_id_){}
    , decltype(_impl_.mode_){nullptr}
    , decltype(_impl_.region_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lemon_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalPlayer::~InternalPlayer() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.InternalPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  _impl_.lemon_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.mode_;
}

void InternalPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.InternalPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  _impl_.lemon_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.mode_ != nullptr) {
    delete _impl_.mode_;
  }
  _impl_.mode_ = nullptr;
  _impl_.region_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.InternalPlayer.near_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.GameMode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_mode(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string lemon_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_lemon_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.InternalPlayer.lemon_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.mm.Region region = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_region(static_cast<::game::battlemon::mm::Region>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.InternalPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.InternalPlayer.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::mode(this),
        _Internal::mode(this).GetCachedSize(), target, stream);
  }

  // string lemon_id = 3;
  if (!this->_internal_lemon_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lemon_id().data(), static_cast<int>(this->_internal_lemon_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.InternalPlayer.lemon_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_lemon_id(), target);
  }

  // .game.battlemon.mm.Region region = 4;
  if (this->_internal_region() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_region(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.InternalPlayer)
  return target;
}

size_t InternalPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.InternalPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // string lemon_id = 3;
  if (!this->_internal_lemon_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lemon_id());
  }

  // .game.battlemon.mm.GameMode mode = 2;
  if (this->_internal_has_mode()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mode_);
  }

  // .game.battlemon.mm.Region region = 4;
  if (this->_internal_region() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_region());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalPlayer::GetClassData() const { return &_class_data_; }


void InternalPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalPlayer*>(&to_msg);
  auto& from = static_cast<const InternalPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.InternalPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (!from._internal_lemon_id().empty()) {
    _this->_internal_set_lemon_id(from._internal_lemon_id());
  }
  if (from._internal_has_mode()) {
    _this->_internal_mutable_mode()->::game::battlemon::mm::GameMode::MergeFrom(
        from._internal_mode());
  }
  if (from._internal_region() != 0) {
    _this->_internal_set_region(from._internal_region());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalPlayer::CopyFrom(const InternalPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.InternalPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalPlayer::IsInitialized() const {
  return true;
}

void InternalPlayer::InternalSwap(InternalPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lemon_id_, lhs_arena,
      &other->_impl_.lemon_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InternalPlayer, _impl_.region_)
      + sizeof(InternalPlayer::_impl_.region_)
      - PROTOBUF_FIELD_OFFSET(InternalPlayer, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[5]);
}

// ===================================================================

class PlayerInBattle::_Internal {
 public:
};

PlayerInBattle::PlayerInBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.carousel.internal.PlayerInBattle)
}
PlayerInBattle::PlayerInBattle(const PlayerInBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerInBattle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.room_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.carousel.internal.PlayerInBattle)
}

inline void PlayerInBattle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.room_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlayerInBattle::~PlayerInBattle() {
  // @@protoc_insertion_point(destructor:game.battlemon.carousel.internal.PlayerInBattle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerInBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  _impl_.room_id_.Destroy();
}

void PlayerInBattle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerInBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.carousel.internal.PlayerInBattle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  _impl_.room_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerInBattle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.PlayerInBattle.near_id"));
        } else
          goto handle_unusual;
        continue;
      // string room_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.carousel.internal.PlayerInBattle.room_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerInBattle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.carousel.internal.PlayerInBattle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.PlayerInBattle.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.carousel.internal.PlayerInBattle.room_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_room_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.carousel.internal.PlayerInBattle)
  return target;
}

size_t PlayerInBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.carousel.internal.PlayerInBattle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // string room_id = 2;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerInBattle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerInBattle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerInBattle::GetClassData() const { return &_class_data_; }


void PlayerInBattle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerInBattle*>(&to_msg);
  auto& from = static_cast<const PlayerInBattle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.carousel.internal.PlayerInBattle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInBattle::CopyFrom(const PlayerInBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.carousel.internal.PlayerInBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInBattle::IsInitialized() const {
  return true;
}

void PlayerInBattle::InternalSwap(PlayerInBattle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerInBattle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalCarousel_2eproto_getter, &descriptor_table_internalCarousel_2eproto_once,
      file_level_metadata_internalCarousel_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace carousel
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::CarouselRequests*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::CarouselRequests >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::CarouselRequests >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::CarouselResponses*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::CarouselResponses >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::CarouselResponses >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::NeedUsersAccept*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::NeedUsersAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::NeedUsersAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::InternalRoomInfo*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalRoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::InternalRoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::InternalNewPlayer*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalNewPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::InternalNewPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::InternalPlayer*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::InternalPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::InternalPlayer >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::carousel::internal::PlayerInBattle*
Arena::CreateMaybeMessage< ::game::battlemon::carousel::internal::PlayerInBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::carousel::internal::PlayerInBattle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
