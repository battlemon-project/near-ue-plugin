// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalAuth.proto

#include "internalAuth.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace auth {
namespace internal {
PROTOBUF_CONSTEXPR InternalVerifySignRequest::InternalVerifySignRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_account_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sign_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalVerifySignRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalVerifySignRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalVerifySignRequestDefaultTypeInternal() {}
  union {
    InternalVerifySignRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalVerifySignRequestDefaultTypeInternal _InternalVerifySignRequest_default_instance_;
PROTOBUF_CONSTEXPR InternalVerifySignResponse::InternalVerifySignResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalVerifySignResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalVerifySignResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalVerifySignResponseDefaultTypeInternal() {}
  union {
    InternalVerifySignResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalVerifySignResponseDefaultTypeInternal _InternalVerifySignResponse_default_instance_;
}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_internalAuth_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_internalAuth_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internalAuth_2eproto = nullptr;

const uint32_t TableStruct_internalAuth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::internal::InternalVerifySignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::internal::InternalVerifySignRequest, _impl_.near_account_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::internal::InternalVerifySignRequest, _impl_.sign_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::internal::InternalVerifySignResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::auth::internal::InternalVerifySignResponse, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::auth::internal::InternalVerifySignRequest)},
  { 8, -1, -1, sizeof(::game::battlemon::auth::internal::InternalVerifySignResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::auth::internal::_InternalVerifySignRequest_default_instance_._instance,
  &::game::battlemon::auth::internal::_InternalVerifySignResponse_default_instance_._instance,
};

const char descriptor_table_protodef_internalAuth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022internalAuth.proto\022\034game.battlemon.aut"
  "h.internal\"B\n\031InternalVerifySignRequest\022"
  "\027\n\017near_account_id\030\001 \001(\t\022\014\n\004sign\030\002 \001(\t\"d"
  "\n\032InternalVerifySignResponse\022F\n\006status\030\001"
  " \001(\01626.game.battlemon.auth.internal.Inte"
  "rnalVerifySignStatus*h\n\030InternalVerifySi"
  "gnStatus\022\006\n\002OK\020\000\022\013\n\007EXPIRED\020\001\022\020\n\014INVALID"
  "_SIGN\020\002\022\020\n\014PK_NOT_FOUND\020\003\022\023\n\017PK_NOT_VERI"
  "FIED\020\0042\237\001\n\023InternalAuthService\022\207\001\n\022Inter"
  "nalVerifySign\0227.game.battlemon.auth.inte"
  "rnal.InternalVerifySignRequest\0328.game.ba"
  "ttlemon.auth.internal.InternalVerifySign"
  "ResponseB\nZ\010servicesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_internalAuth_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internalAuth_2eproto = {
    false, false, 508, descriptor_table_protodef_internalAuth_2eproto,
    "internalAuth.proto",
    &descriptor_table_internalAuth_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_internalAuth_2eproto::offsets,
    file_level_metadata_internalAuth_2eproto, file_level_enum_descriptors_internalAuth_2eproto,
    file_level_service_descriptors_internalAuth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internalAuth_2eproto_getter() {
  return &descriptor_table_internalAuth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internalAuth_2eproto(&descriptor_table_internalAuth_2eproto);
namespace game {
namespace battlemon {
namespace auth {
namespace internal {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InternalVerifySignStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_internalAuth_2eproto);
  return file_level_enum_descriptors_internalAuth_2eproto[0];
}
bool InternalVerifySignStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InternalVerifySignRequest::_Internal {
 public:
};

InternalVerifySignRequest::InternalVerifySignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.internal.InternalVerifySignRequest)
}
InternalVerifySignRequest::InternalVerifySignRequest(const InternalVerifySignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalVerifySignRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_account_id_){}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_account_id().empty()) {
    _this->_impl_.near_account_id_.Set(from._internal_near_account_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sign().empty()) {
    _this->_impl_.sign_.Set(from._internal_sign(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.internal.InternalVerifySignRequest)
}

inline void InternalVerifySignRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_account_id_){}
    , decltype(_impl_.sign_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_account_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sign_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.sign_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalVerifySignRequest::~InternalVerifySignRequest() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.internal.InternalVerifySignRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalVerifySignRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_account_id_.Destroy();
  _impl_.sign_.Destroy();
}

void InternalVerifySignRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalVerifySignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.internal.InternalVerifySignRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_account_id_.ClearToEmpty();
  _impl_.sign_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalVerifySignRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_account_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_account_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id"));
        } else
          goto handle_unusual;
        continue;
      // string sign = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sign();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.auth.internal.InternalVerifySignRequest.sign"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalVerifySignRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.internal.InternalVerifySignRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_account_id = 1;
  if (!this->_internal_near_account_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_account_id().data(), static_cast<int>(this->_internal_near_account_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_account_id(), target);
  }

  // string sign = 2;
  if (!this->_internal_sign().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sign().data(), static_cast<int>(this->_internal_sign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.auth.internal.InternalVerifySignRequest.sign");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sign(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.internal.InternalVerifySignRequest)
  return target;
}

size_t InternalVerifySignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.internal.InternalVerifySignRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_account_id = 1;
  if (!this->_internal_near_account_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_account_id());
  }

  // string sign = 2;
  if (!this->_internal_sign().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sign());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalVerifySignRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalVerifySignRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalVerifySignRequest::GetClassData() const { return &_class_data_; }


void InternalVerifySignRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalVerifySignRequest*>(&to_msg);
  auto& from = static_cast<const InternalVerifySignRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.internal.InternalVerifySignRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_account_id().empty()) {
    _this->_internal_set_near_account_id(from._internal_near_account_id());
  }
  if (!from._internal_sign().empty()) {
    _this->_internal_set_sign(from._internal_sign());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalVerifySignRequest::CopyFrom(const InternalVerifySignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.internal.InternalVerifySignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalVerifySignRequest::IsInitialized() const {
  return true;
}

void InternalVerifySignRequest::InternalSwap(InternalVerifySignRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_account_id_, lhs_arena,
      &other->_impl_.near_account_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.sign_, lhs_arena,
      &other->_impl_.sign_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalVerifySignRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalAuth_2eproto_getter, &descriptor_table_internalAuth_2eproto_once,
      file_level_metadata_internalAuth_2eproto[0]);
}

// ===================================================================

class InternalVerifySignResponse::_Internal {
 public:
};

InternalVerifySignResponse::InternalVerifySignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.auth.internal.InternalVerifySignResponse)
}
InternalVerifySignResponse::InternalVerifySignResponse(const InternalVerifySignResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalVerifySignResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.auth.internal.InternalVerifySignResponse)
}

inline void InternalVerifySignResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InternalVerifySignResponse::~InternalVerifySignResponse() {
  // @@protoc_insertion_point(destructor:game.battlemon.auth.internal.InternalVerifySignResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalVerifySignResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InternalVerifySignResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalVerifySignResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.auth.internal.InternalVerifySignResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalVerifySignResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.auth.internal.InternalVerifySignStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::game::battlemon::auth::internal::InternalVerifySignStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalVerifySignResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.auth.internal.InternalVerifySignResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.auth.internal.InternalVerifySignStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.auth.internal.InternalVerifySignResponse)
  return target;
}

size_t InternalVerifySignResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.auth.internal.InternalVerifySignResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .game.battlemon.auth.internal.InternalVerifySignStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalVerifySignResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalVerifySignResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalVerifySignResponse::GetClassData() const { return &_class_data_; }


void InternalVerifySignResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalVerifySignResponse*>(&to_msg);
  auto& from = static_cast<const InternalVerifySignResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.auth.internal.InternalVerifySignResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalVerifySignResponse::CopyFrom(const InternalVerifySignResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.auth.internal.InternalVerifySignResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalVerifySignResponse::IsInitialized() const {
  return true;
}

void InternalVerifySignResponse::InternalSwap(InternalVerifySignResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalVerifySignResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalAuth_2eproto_getter, &descriptor_table_internalAuth_2eproto_once,
      file_level_metadata_internalAuth_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::internal::InternalVerifySignRequest*
Arena::CreateMaybeMessage< ::game::battlemon::auth::internal::InternalVerifySignRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::internal::InternalVerifySignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::auth::internal::InternalVerifySignResponse*
Arena::CreateMaybeMessage< ::game::battlemon::auth::internal::InternalVerifySignResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::auth::internal::InternalVerifySignResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
