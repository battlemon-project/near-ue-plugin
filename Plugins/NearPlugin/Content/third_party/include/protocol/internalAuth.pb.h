// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalAuth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internalAuth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internalAuth_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internalAuth_2eproto;
namespace game {
namespace battlemon {
namespace auth {
namespace internal {
class InternalVerifySignRequest;
struct InternalVerifySignRequestDefaultTypeInternal;
extern InternalVerifySignRequestDefaultTypeInternal _InternalVerifySignRequest_default_instance_;
class InternalVerifySignResponse;
struct InternalVerifySignResponseDefaultTypeInternal;
extern InternalVerifySignResponseDefaultTypeInternal _InternalVerifySignResponse_default_instance_;
}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::auth::internal::InternalVerifySignRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalVerifySignRequest>(Arena*);
template<> ::game::battlemon::auth::internal::InternalVerifySignResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalVerifySignResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace auth {
namespace internal {

enum InternalVerifySignStatus : int {
  OK = 0,
  EXPIRED = 1,
  INVALID_SIGN = 2,
  PK_NOT_FOUND = 3,
  PK_NOT_VERIFIED = 4,
  InternalVerifySignStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InternalVerifySignStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InternalVerifySignStatus_IsValid(int value);
constexpr InternalVerifySignStatus InternalVerifySignStatus_MIN = OK;
constexpr InternalVerifySignStatus InternalVerifySignStatus_MAX = PK_NOT_VERIFIED;
constexpr int InternalVerifySignStatus_ARRAYSIZE = InternalVerifySignStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InternalVerifySignStatus_descriptor();
template<typename T>
inline const std::string& InternalVerifySignStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InternalVerifySignStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InternalVerifySignStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InternalVerifySignStatus_descriptor(), enum_t_value);
}
inline bool InternalVerifySignStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InternalVerifySignStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InternalVerifySignStatus>(
    InternalVerifySignStatus_descriptor(), name, value);
}
// ===================================================================

class InternalVerifySignRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalVerifySignRequest) */ {
 public:
  inline InternalVerifySignRequest() : InternalVerifySignRequest(nullptr) {}
  ~InternalVerifySignRequest() override;
  explicit PROTOBUF_CONSTEXPR InternalVerifySignRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalVerifySignRequest(const InternalVerifySignRequest& from);
  InternalVerifySignRequest(InternalVerifySignRequest&& from) noexcept
    : InternalVerifySignRequest() {
    *this = ::std::move(from);
  }

  inline InternalVerifySignRequest& operator=(const InternalVerifySignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalVerifySignRequest& operator=(InternalVerifySignRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalVerifySignRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalVerifySignRequest* internal_default_instance() {
    return reinterpret_cast<const InternalVerifySignRequest*>(
               &_InternalVerifySignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternalVerifySignRequest& a, InternalVerifySignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalVerifySignRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalVerifySignRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalVerifySignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalVerifySignRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalVerifySignRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalVerifySignRequest& from) {
    InternalVerifySignRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalVerifySignRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalVerifySignRequest";
  }
  protected:
  explicit InternalVerifySignRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNearAccountIdFieldNumber = 1,
    kSignFieldNumber = 2,
  };
  // string near_account_id = 1;
  void clear_near_account_id();
  const std::string& near_account_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_near_account_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_near_account_id();
  PROTOBUF_NODISCARD std::string* release_near_account_id();
  void set_allocated_near_account_id(std::string* near_account_id);
  private:
  const std::string& _internal_near_account_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_near_account_id(const std::string& value);
  std::string* _internal_mutable_near_account_id();
  public:

  // string sign = 2;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_NODISCARD std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalVerifySignRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr near_account_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// -------------------------------------------------------------------

class InternalVerifySignResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalVerifySignResponse) */ {
 public:
  inline InternalVerifySignResponse() : InternalVerifySignResponse(nullptr) {}
  ~InternalVerifySignResponse() override;
  explicit PROTOBUF_CONSTEXPR InternalVerifySignResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalVerifySignResponse(const InternalVerifySignResponse& from);
  InternalVerifySignResponse(InternalVerifySignResponse&& from) noexcept
    : InternalVerifySignResponse() {
    *this = ::std::move(from);
  }

  inline InternalVerifySignResponse& operator=(const InternalVerifySignResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalVerifySignResponse& operator=(InternalVerifySignResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalVerifySignResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalVerifySignResponse* internal_default_instance() {
    return reinterpret_cast<const InternalVerifySignResponse*>(
               &_InternalVerifySignResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalVerifySignResponse& a, InternalVerifySignResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalVerifySignResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalVerifySignResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalVerifySignResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalVerifySignResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalVerifySignResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalVerifySignResponse& from) {
    InternalVerifySignResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalVerifySignResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalVerifySignResponse";
  }
  protected:
  explicit InternalVerifySignResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .game.battlemon.auth.internal.InternalVerifySignStatus status = 1;
  void clear_status();
  ::game::battlemon::auth::internal::InternalVerifySignStatus status() const;
  void set_status(::game::battlemon::auth::internal::InternalVerifySignStatus value);
  private:
  ::game::battlemon::auth::internal::InternalVerifySignStatus _internal_status() const;
  void _internal_set_status(::game::battlemon::auth::internal::InternalVerifySignStatus value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalVerifySignResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalVerifySignRequest

// string near_account_id = 1;
inline void InternalVerifySignRequest::clear_near_account_id() {
  _impl_.near_account_id_.ClearToEmpty();
}
inline const std::string& InternalVerifySignRequest::near_account_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id)
  return _internal_near_account_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalVerifySignRequest::set_near_account_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.near_account_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id)
}
inline std::string* InternalVerifySignRequest::mutable_near_account_id() {
  std::string* _s = _internal_mutable_near_account_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id)
  return _s;
}
inline const std::string& InternalVerifySignRequest::_internal_near_account_id() const {
  return _impl_.near_account_id_.Get();
}
inline void InternalVerifySignRequest::_internal_set_near_account_id(const std::string& value) {
  
  _impl_.near_account_id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalVerifySignRequest::_internal_mutable_near_account_id() {
  
  return _impl_.near_account_id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalVerifySignRequest::release_near_account_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id)
  return _impl_.near_account_id_.Release();
}
inline void InternalVerifySignRequest::set_allocated_near_account_id(std::string* near_account_id) {
  if (near_account_id != nullptr) {
    
  } else {
    
  }
  _impl_.near_account_id_.SetAllocated(near_account_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.near_account_id_.IsDefault()) {
    _impl_.near_account_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.internal.InternalVerifySignRequest.near_account_id)
}

// string sign = 2;
inline void InternalVerifySignRequest::clear_sign() {
  _impl_.sign_.ClearToEmpty();
}
inline const std::string& InternalVerifySignRequest::sign() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifySignRequest.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalVerifySignRequest::set_sign(ArgT0&& arg0, ArgT... args) {
 
 _impl_.sign_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalVerifySignRequest.sign)
}
inline std::string* InternalVerifySignRequest::mutable_sign() {
  std::string* _s = _internal_mutable_sign();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalVerifySignRequest.sign)
  return _s;
}
inline const std::string& InternalVerifySignRequest::_internal_sign() const {
  return _impl_.sign_.Get();
}
inline void InternalVerifySignRequest::_internal_set_sign(const std::string& value) {
  
  _impl_.sign_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalVerifySignRequest::_internal_mutable_sign() {
  
  return _impl_.sign_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalVerifySignRequest::release_sign() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.internal.InternalVerifySignRequest.sign)
  return _impl_.sign_.Release();
}
inline void InternalVerifySignRequest::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  _impl_.sign_.SetAllocated(sign, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.sign_.IsDefault()) {
    _impl_.sign_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.internal.InternalVerifySignRequest.sign)
}

// -------------------------------------------------------------------

// InternalVerifySignResponse

// .game.battlemon.auth.internal.InternalVerifySignStatus status = 1;
inline void InternalVerifySignResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::battlemon::auth::internal::InternalVerifySignStatus InternalVerifySignResponse::_internal_status() const {
  return static_cast< ::game::battlemon::auth::internal::InternalVerifySignStatus >(_impl_.status_);
}
inline ::game::battlemon::auth::internal::InternalVerifySignStatus InternalVerifySignResponse::status() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifySignResponse.status)
  return _internal_status();
}
inline void InternalVerifySignResponse::_internal_set_status(::game::battlemon::auth::internal::InternalVerifySignStatus value) {
  
  _impl_.status_ = value;
}
inline void InternalVerifySignResponse::set_status(::game::battlemon::auth::internal::InternalVerifySignStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalVerifySignResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::battlemon::auth::internal::InternalVerifySignStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::auth::internal::InternalVerifySignStatus>() {
  return ::game::battlemon::auth::internal::InternalVerifySignStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto
