// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalAuth.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_internalAuth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internalAuth_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_internalAuth_2eproto;
namespace game {
namespace battlemon {
namespace auth {
namespace internal {
class InternalAccountInfo;
struct InternalAccountInfoDefaultTypeInternal;
extern InternalAccountInfoDefaultTypeInternal _InternalAccountInfo_default_instance_;
class InternalAccountsInfoRequest;
struct InternalAccountsInfoRequestDefaultTypeInternal;
extern InternalAccountsInfoRequestDefaultTypeInternal _InternalAccountsInfoRequest_default_instance_;
class InternalAccountsInfoResponse;
struct InternalAccountsInfoResponseDefaultTypeInternal;
extern InternalAccountsInfoResponseDefaultTypeInternal _InternalAccountsInfoResponse_default_instance_;
class InternalVerifyJwtRequest;
struct InternalVerifyJwtRequestDefaultTypeInternal;
extern InternalVerifyJwtRequestDefaultTypeInternal _InternalVerifyJwtRequest_default_instance_;
class InternalVerifyJwtResponse;
struct InternalVerifyJwtResponseDefaultTypeInternal;
extern InternalVerifyJwtResponseDefaultTypeInternal _InternalVerifyJwtResponse_default_instance_;
}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::auth::internal::InternalAccountInfo* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalAccountInfo>(Arena*);
template<> ::game::battlemon::auth::internal::InternalAccountsInfoRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalAccountsInfoRequest>(Arena*);
template<> ::game::battlemon::auth::internal::InternalAccountsInfoResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalAccountsInfoResponse>(Arena*);
template<> ::game::battlemon::auth::internal::InternalVerifyJwtRequest* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalVerifyJwtRequest>(Arena*);
template<> ::game::battlemon::auth::internal::InternalVerifyJwtResponse* Arena::CreateMaybeMessage<::game::battlemon::auth::internal::InternalVerifyJwtResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace auth {
namespace internal {

enum InternalVerifyJwtStatus : int {
  OK = 0,
  EXPIRED = 1,
  INVALID = 2,
  InternalVerifyJwtStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InternalVerifyJwtStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InternalVerifyJwtStatus_IsValid(int value);
constexpr InternalVerifyJwtStatus InternalVerifyJwtStatus_MIN = OK;
constexpr InternalVerifyJwtStatus InternalVerifyJwtStatus_MAX = INVALID;
constexpr int InternalVerifyJwtStatus_ARRAYSIZE = InternalVerifyJwtStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InternalVerifyJwtStatus_descriptor();
template<typename T>
inline const std::string& InternalVerifyJwtStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InternalVerifyJwtStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InternalVerifyJwtStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InternalVerifyJwtStatus_descriptor(), enum_t_value);
}
inline bool InternalVerifyJwtStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InternalVerifyJwtStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InternalVerifyJwtStatus>(
    InternalVerifyJwtStatus_descriptor(), name, value);
}
enum InteranalAccountType : int {
  GUEST = 0,
  SUI = 1,
  InteranalAccountType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  InteranalAccountType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool InteranalAccountType_IsValid(int value);
constexpr InteranalAccountType InteranalAccountType_MIN = GUEST;
constexpr InteranalAccountType InteranalAccountType_MAX = SUI;
constexpr int InteranalAccountType_ARRAYSIZE = InteranalAccountType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InteranalAccountType_descriptor();
template<typename T>
inline const std::string& InteranalAccountType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteranalAccountType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteranalAccountType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InteranalAccountType_descriptor(), enum_t_value);
}
inline bool InteranalAccountType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, InteranalAccountType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InteranalAccountType>(
    InteranalAccountType_descriptor(), name, value);
}
// ===================================================================

class InternalVerifyJwtRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalVerifyJwtRequest) */ {
 public:
  inline InternalVerifyJwtRequest() : InternalVerifyJwtRequest(nullptr) {}
  ~InternalVerifyJwtRequest() override;
  explicit PROTOBUF_CONSTEXPR InternalVerifyJwtRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalVerifyJwtRequest(const InternalVerifyJwtRequest& from);
  InternalVerifyJwtRequest(InternalVerifyJwtRequest&& from) noexcept
    : InternalVerifyJwtRequest() {
    *this = ::std::move(from);
  }

  inline InternalVerifyJwtRequest& operator=(const InternalVerifyJwtRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalVerifyJwtRequest& operator=(InternalVerifyJwtRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalVerifyJwtRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalVerifyJwtRequest* internal_default_instance() {
    return reinterpret_cast<const InternalVerifyJwtRequest*>(
               &_InternalVerifyJwtRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InternalVerifyJwtRequest& a, InternalVerifyJwtRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalVerifyJwtRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalVerifyJwtRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalVerifyJwtRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalVerifyJwtRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalVerifyJwtRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalVerifyJwtRequest& from) {
    InternalVerifyJwtRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalVerifyJwtRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalVerifyJwtRequest";
  }
  protected:
  explicit InternalVerifyJwtRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 1,
  };
  // string jwt = 1;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_NODISCARD std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalVerifyJwtRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// -------------------------------------------------------------------

class InternalVerifyJwtResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalVerifyJwtResponse) */ {
 public:
  inline InternalVerifyJwtResponse() : InternalVerifyJwtResponse(nullptr) {}
  ~InternalVerifyJwtResponse() override;
  explicit PROTOBUF_CONSTEXPR InternalVerifyJwtResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalVerifyJwtResponse(const InternalVerifyJwtResponse& from);
  InternalVerifyJwtResponse(InternalVerifyJwtResponse&& from) noexcept
    : InternalVerifyJwtResponse() {
    *this = ::std::move(from);
  }

  inline InternalVerifyJwtResponse& operator=(const InternalVerifyJwtResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalVerifyJwtResponse& operator=(InternalVerifyJwtResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalVerifyJwtResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalVerifyJwtResponse* internal_default_instance() {
    return reinterpret_cast<const InternalVerifyJwtResponse*>(
               &_InternalVerifyJwtResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InternalVerifyJwtResponse& a, InternalVerifyJwtResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalVerifyJwtResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalVerifyJwtResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalVerifyJwtResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalVerifyJwtResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalVerifyJwtResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalVerifyJwtResponse& from) {
    InternalVerifyJwtResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalVerifyJwtResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalVerifyJwtResponse";
  }
  protected:
  explicit InternalVerifyJwtResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // .game.battlemon.auth.internal.InternalAccountInfo account = 2;
  bool has_account() const;
  private:
  bool _internal_has_account() const;
  public:
  void clear_account();
  const ::game::battlemon::auth::internal::InternalAccountInfo& account() const;
  PROTOBUF_NODISCARD ::game::battlemon::auth::internal::InternalAccountInfo* release_account();
  ::game::battlemon::auth::internal::InternalAccountInfo* mutable_account();
  void set_allocated_account(::game::battlemon::auth::internal::InternalAccountInfo* account);
  private:
  const ::game::battlemon::auth::internal::InternalAccountInfo& _internal_account() const;
  ::game::battlemon::auth::internal::InternalAccountInfo* _internal_mutable_account();
  public:
  void unsafe_arena_set_allocated_account(
      ::game::battlemon::auth::internal::InternalAccountInfo* account);
  ::game::battlemon::auth::internal::InternalAccountInfo* unsafe_arena_release_account();

  // .game.battlemon.auth.internal.InternalVerifyJwtStatus status = 1;
  void clear_status();
  ::game::battlemon::auth::internal::InternalVerifyJwtStatus status() const;
  void set_status(::game::battlemon::auth::internal::InternalVerifyJwtStatus value);
  private:
  ::game::battlemon::auth::internal::InternalVerifyJwtStatus _internal_status() const;
  void _internal_set_status(::game::battlemon::auth::internal::InternalVerifyJwtStatus value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalVerifyJwtResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::battlemon::auth::internal::InternalAccountInfo* account_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// -------------------------------------------------------------------

class InternalAccountsInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalAccountsInfoRequest) */ {
 public:
  inline InternalAccountsInfoRequest() : InternalAccountsInfoRequest(nullptr) {}
  ~InternalAccountsInfoRequest() override;
  explicit PROTOBUF_CONSTEXPR InternalAccountsInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalAccountsInfoRequest(const InternalAccountsInfoRequest& from);
  InternalAccountsInfoRequest(InternalAccountsInfoRequest&& from) noexcept
    : InternalAccountsInfoRequest() {
    *this = ::std::move(from);
  }

  inline InternalAccountsInfoRequest& operator=(const InternalAccountsInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalAccountsInfoRequest& operator=(InternalAccountsInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalAccountsInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalAccountsInfoRequest* internal_default_instance() {
    return reinterpret_cast<const InternalAccountsInfoRequest*>(
               &_InternalAccountsInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(InternalAccountsInfoRequest& a, InternalAccountsInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalAccountsInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalAccountsInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalAccountsInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalAccountsInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalAccountsInfoRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalAccountsInfoRequest& from) {
    InternalAccountsInfoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalAccountsInfoRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalAccountsInfoRequest";
  }
  protected:
  explicit InternalAccountsInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdsFieldNumber = 1,
  };
  // repeated string user_ids = 1;
  int user_ids_size() const;
  private:
  int _internal_user_ids_size() const;
  public:
  void clear_user_ids();
  const std::string& user_ids(int index) const;
  std::string* mutable_user_ids(int index);
  void set_user_ids(int index, const std::string& value);
  void set_user_ids(int index, std::string&& value);
  void set_user_ids(int index, const char* value);
  void set_user_ids(int index, const char* value, size_t size);
  std::string* add_user_ids();
  void add_user_ids(const std::string& value);
  void add_user_ids(std::string&& value);
  void add_user_ids(const char* value);
  void add_user_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& user_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_user_ids();
  private:
  const std::string& _internal_user_ids(int index) const;
  std::string* _internal_add_user_ids();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalAccountsInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> user_ids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// -------------------------------------------------------------------

class InternalAccountsInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalAccountsInfoResponse) */ {
 public:
  inline InternalAccountsInfoResponse() : InternalAccountsInfoResponse(nullptr) {}
  ~InternalAccountsInfoResponse() override;
  explicit PROTOBUF_CONSTEXPR InternalAccountsInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalAccountsInfoResponse(const InternalAccountsInfoResponse& from);
  InternalAccountsInfoResponse(InternalAccountsInfoResponse&& from) noexcept
    : InternalAccountsInfoResponse() {
    *this = ::std::move(from);
  }

  inline InternalAccountsInfoResponse& operator=(const InternalAccountsInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalAccountsInfoResponse& operator=(InternalAccountsInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalAccountsInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalAccountsInfoResponse* internal_default_instance() {
    return reinterpret_cast<const InternalAccountsInfoResponse*>(
               &_InternalAccountsInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(InternalAccountsInfoResponse& a, InternalAccountsInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalAccountsInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalAccountsInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalAccountsInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalAccountsInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalAccountsInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalAccountsInfoResponse& from) {
    InternalAccountsInfoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalAccountsInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalAccountsInfoResponse";
  }
  protected:
  explicit InternalAccountsInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountsFieldNumber = 1,
  };
  // repeated .game.battlemon.auth.internal.InternalAccountInfo accounts = 1;
  int accounts_size() const;
  private:
  int _internal_accounts_size() const;
  public:
  void clear_accounts();
  ::game::battlemon::auth::internal::InternalAccountInfo* mutable_accounts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::auth::internal::InternalAccountInfo >*
      mutable_accounts();
  private:
  const ::game::battlemon::auth::internal::InternalAccountInfo& _internal_accounts(int index) const;
  ::game::battlemon::auth::internal::InternalAccountInfo* _internal_add_accounts();
  public:
  const ::game::battlemon::auth::internal::InternalAccountInfo& accounts(int index) const;
  ::game::battlemon::auth::internal::InternalAccountInfo* add_accounts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::auth::internal::InternalAccountInfo >&
      accounts() const;

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalAccountsInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::auth::internal::InternalAccountInfo > accounts_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// -------------------------------------------------------------------

class InternalAccountInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.auth.internal.InternalAccountInfo) */ {
 public:
  inline InternalAccountInfo() : InternalAccountInfo(nullptr) {}
  ~InternalAccountInfo() override;
  explicit PROTOBUF_CONSTEXPR InternalAccountInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InternalAccountInfo(const InternalAccountInfo& from);
  InternalAccountInfo(InternalAccountInfo&& from) noexcept
    : InternalAccountInfo() {
    *this = ::std::move(from);
  }

  inline InternalAccountInfo& operator=(const InternalAccountInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline InternalAccountInfo& operator=(InternalAccountInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InternalAccountInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const InternalAccountInfo* internal_default_instance() {
    return reinterpret_cast<const InternalAccountInfo*>(
               &_InternalAccountInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(InternalAccountInfo& a, InternalAccountInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(InternalAccountInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InternalAccountInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InternalAccountInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InternalAccountInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InternalAccountInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InternalAccountInfo& from) {
    InternalAccountInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InternalAccountInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.auth.internal.InternalAccountInfo";
  }
  protected:
  explicit InternalAccountInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .game.battlemon.auth.internal.InteranalAccountType type = 2;
  void clear_type();
  ::game::battlemon::auth::internal::InteranalAccountType type() const;
  void set_type(::game::battlemon::auth::internal::InteranalAccountType value);
  private:
  ::game::battlemon::auth::internal::InteranalAccountType _internal_type() const;
  void _internal_set_type(::game::battlemon::auth::internal::InteranalAccountType value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.auth.internal.InternalAccountInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internalAuth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InternalVerifyJwtRequest

// string jwt = 1;
inline void InternalVerifyJwtRequest::clear_jwt() {
  _impl_.jwt_.ClearToEmpty();
}
inline const std::string& InternalVerifyJwtRequest::jwt() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifyJwtRequest.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalVerifyJwtRequest::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 _impl_.jwt_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalVerifyJwtRequest.jwt)
}
inline std::string* InternalVerifyJwtRequest::mutable_jwt() {
  std::string* _s = _internal_mutable_jwt();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalVerifyJwtRequest.jwt)
  return _s;
}
inline const std::string& InternalVerifyJwtRequest::_internal_jwt() const {
  return _impl_.jwt_.Get();
}
inline void InternalVerifyJwtRequest::_internal_set_jwt(const std::string& value) {
  
  _impl_.jwt_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalVerifyJwtRequest::_internal_mutable_jwt() {
  
  return _impl_.jwt_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalVerifyJwtRequest::release_jwt() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.internal.InternalVerifyJwtRequest.jwt)
  return _impl_.jwt_.Release();
}
inline void InternalVerifyJwtRequest::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  _impl_.jwt_.SetAllocated(jwt, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.jwt_.IsDefault()) {
    _impl_.jwt_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.internal.InternalVerifyJwtRequest.jwt)
}

// -------------------------------------------------------------------

// InternalVerifyJwtResponse

// .game.battlemon.auth.internal.InternalVerifyJwtStatus status = 1;
inline void InternalVerifyJwtResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::battlemon::auth::internal::InternalVerifyJwtStatus InternalVerifyJwtResponse::_internal_status() const {
  return static_cast< ::game::battlemon::auth::internal::InternalVerifyJwtStatus >(_impl_.status_);
}
inline ::game::battlemon::auth::internal::InternalVerifyJwtStatus InternalVerifyJwtResponse::status() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifyJwtResponse.status)
  return _internal_status();
}
inline void InternalVerifyJwtResponse::_internal_set_status(::game::battlemon::auth::internal::InternalVerifyJwtStatus value) {
  
  _impl_.status_ = value;
}
inline void InternalVerifyJwtResponse::set_status(::game::battlemon::auth::internal::InternalVerifyJwtStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalVerifyJwtResponse.status)
}

// .game.battlemon.auth.internal.InternalAccountInfo account = 2;
inline bool InternalVerifyJwtResponse::_internal_has_account() const {
  return this != internal_default_instance() && _impl_.account_ != nullptr;
}
inline bool InternalVerifyJwtResponse::has_account() const {
  return _internal_has_account();
}
inline void InternalVerifyJwtResponse::clear_account() {
  if (GetArenaForAllocation() == nullptr && _impl_.account_ != nullptr) {
    delete _impl_.account_;
  }
  _impl_.account_ = nullptr;
}
inline const ::game::battlemon::auth::internal::InternalAccountInfo& InternalVerifyJwtResponse::_internal_account() const {
  const ::game::battlemon::auth::internal::InternalAccountInfo* p = _impl_.account_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::auth::internal::InternalAccountInfo&>(
      ::game::battlemon::auth::internal::_InternalAccountInfo_default_instance_);
}
inline const ::game::battlemon::auth::internal::InternalAccountInfo& InternalVerifyJwtResponse::account() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalVerifyJwtResponse.account)
  return _internal_account();
}
inline void InternalVerifyJwtResponse::unsafe_arena_set_allocated_account(
    ::game::battlemon::auth::internal::InternalAccountInfo* account) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.account_);
  }
  _impl_.account_ = account;
  if (account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.auth.internal.InternalVerifyJwtResponse.account)
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalVerifyJwtResponse::release_account() {
  
  ::game::battlemon::auth::internal::InternalAccountInfo* temp = _impl_.account_;
  _impl_.account_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalVerifyJwtResponse::unsafe_arena_release_account() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.internal.InternalVerifyJwtResponse.account)
  
  ::game::battlemon::auth::internal::InternalAccountInfo* temp = _impl_.account_;
  _impl_.account_ = nullptr;
  return temp;
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalVerifyJwtResponse::_internal_mutable_account() {
  
  if (_impl_.account_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::auth::internal::InternalAccountInfo>(GetArenaForAllocation());
    _impl_.account_ = p;
  }
  return _impl_.account_;
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalVerifyJwtResponse::mutable_account() {
  ::game::battlemon::auth::internal::InternalAccountInfo* _msg = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalVerifyJwtResponse.account)
  return _msg;
}
inline void InternalVerifyJwtResponse::set_allocated_account(::game::battlemon::auth::internal::InternalAccountInfo* account) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.account_;
  }
  if (account) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(account);
    if (message_arena != submessage_arena) {
      account = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, account, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.account_ = account;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.internal.InternalVerifyJwtResponse.account)
}

// -------------------------------------------------------------------

// InternalAccountsInfoRequest

// repeated string user_ids = 1;
inline int InternalAccountsInfoRequest::_internal_user_ids_size() const {
  return _impl_.user_ids_.size();
}
inline int InternalAccountsInfoRequest::user_ids_size() const {
  return _internal_user_ids_size();
}
inline void InternalAccountsInfoRequest::clear_user_ids() {
  _impl_.user_ids_.Clear();
}
inline std::string* InternalAccountsInfoRequest::add_user_ids() {
  std::string* _s = _internal_add_user_ids();
  // @@protoc_insertion_point(field_add_mutable:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
  return _s;
}
inline const std::string& InternalAccountsInfoRequest::_internal_user_ids(int index) const {
  return _impl_.user_ids_.Get(index);
}
inline const std::string& InternalAccountsInfoRequest::user_ids(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
  return _internal_user_ids(index);
}
inline std::string* InternalAccountsInfoRequest::mutable_user_ids(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
  return _impl_.user_ids_.Mutable(index);
}
inline void InternalAccountsInfoRequest::set_user_ids(int index, const std::string& value) {
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::set_user_ids(int index, std::string&& value) {
  _impl_.user_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::set_user_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::set_user_ids(int index, const char* value, size_t size) {
  _impl_.user_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline std::string* InternalAccountsInfoRequest::_internal_add_user_ids() {
  return _impl_.user_ids_.Add();
}
inline void InternalAccountsInfoRequest::add_user_ids(const std::string& value) {
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::add_user_ids(std::string&& value) {
  _impl_.user_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::add_user_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.user_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline void InternalAccountsInfoRequest::add_user_ids(const char* value, size_t size) {
  _impl_.user_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InternalAccountsInfoRequest::user_ids() const {
  // @@protoc_insertion_point(field_list:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
  return _impl_.user_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InternalAccountsInfoRequest::mutable_user_ids() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.auth.internal.InternalAccountsInfoRequest.user_ids)
  return &_impl_.user_ids_;
}

// -------------------------------------------------------------------

// InternalAccountsInfoResponse

// repeated .game.battlemon.auth.internal.InternalAccountInfo accounts = 1;
inline int InternalAccountsInfoResponse::_internal_accounts_size() const {
  return _impl_.accounts_.size();
}
inline int InternalAccountsInfoResponse::accounts_size() const {
  return _internal_accounts_size();
}
inline void InternalAccountsInfoResponse::clear_accounts() {
  _impl_.accounts_.Clear();
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalAccountsInfoResponse::mutable_accounts(int index) {
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalAccountsInfoResponse.accounts)
  return _impl_.accounts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::auth::internal::InternalAccountInfo >*
InternalAccountsInfoResponse::mutable_accounts() {
  // @@protoc_insertion_point(field_mutable_list:game.battlemon.auth.internal.InternalAccountsInfoResponse.accounts)
  return &_impl_.accounts_;
}
inline const ::game::battlemon::auth::internal::InternalAccountInfo& InternalAccountsInfoResponse::_internal_accounts(int index) const {
  return _impl_.accounts_.Get(index);
}
inline const ::game::battlemon::auth::internal::InternalAccountInfo& InternalAccountsInfoResponse::accounts(int index) const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalAccountsInfoResponse.accounts)
  return _internal_accounts(index);
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalAccountsInfoResponse::_internal_add_accounts() {
  return _impl_.accounts_.Add();
}
inline ::game::battlemon::auth::internal::InternalAccountInfo* InternalAccountsInfoResponse::add_accounts() {
  ::game::battlemon::auth::internal::InternalAccountInfo* _add = _internal_add_accounts();
  // @@protoc_insertion_point(field_add:game.battlemon.auth.internal.InternalAccountsInfoResponse.accounts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::game::battlemon::auth::internal::InternalAccountInfo >&
InternalAccountsInfoResponse::accounts() const {
  // @@protoc_insertion_point(field_list:game.battlemon.auth.internal.InternalAccountsInfoResponse.accounts)
  return _impl_.accounts_;
}

// -------------------------------------------------------------------

// InternalAccountInfo

// string id = 1;
inline void InternalAccountInfo::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& InternalAccountInfo::id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalAccountInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InternalAccountInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalAccountInfo.id)
}
inline std::string* InternalAccountInfo::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.auth.internal.InternalAccountInfo.id)
  return _s;
}
inline const std::string& InternalAccountInfo::_internal_id() const {
  return _impl_.id_.Get();
}
inline void InternalAccountInfo::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* InternalAccountInfo::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* InternalAccountInfo::release_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.auth.internal.InternalAccountInfo.id)
  return _impl_.id_.Release();
}
inline void InternalAccountInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.auth.internal.InternalAccountInfo.id)
}

// .game.battlemon.auth.internal.InteranalAccountType type = 2;
inline void InternalAccountInfo::clear_type() {
  _impl_.type_ = 0;
}
inline ::game::battlemon::auth::internal::InteranalAccountType InternalAccountInfo::_internal_type() const {
  return static_cast< ::game::battlemon::auth::internal::InteranalAccountType >(_impl_.type_);
}
inline ::game::battlemon::auth::internal::InteranalAccountType InternalAccountInfo::type() const {
  // @@protoc_insertion_point(field_get:game.battlemon.auth.internal.InternalAccountInfo.type)
  return _internal_type();
}
inline void InternalAccountInfo::_internal_set_type(::game::battlemon::auth::internal::InteranalAccountType value) {
  
  _impl_.type_ = value;
}
inline void InternalAccountInfo::set_type(::game::battlemon::auth::internal::InteranalAccountType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:game.battlemon.auth.internal.InternalAccountInfo.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace auth
}  // namespace battlemon
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::battlemon::auth::internal::InternalVerifyJwtStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::auth::internal::InternalVerifyJwtStatus>() {
  return ::game::battlemon::auth::internal::InternalVerifyJwtStatus_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::auth::internal::InteranalAccountType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::auth::internal::InteranalAccountType>() {
  return ::game::battlemon::auth::internal::InteranalAccountType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_internalAuth_2eproto
