// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mm_2eproto;
namespace game {
namespace battlemon {
namespace mm {
class AcceptGameRequest;
struct AcceptGameRequestDefaultTypeInternal;
extern AcceptGameRequestDefaultTypeInternal _AcceptGameRequest_default_instance_;
class CancelSearchRequest;
struct CancelSearchRequestDefaultTypeInternal;
extern CancelSearchRequestDefaultTypeInternal _CancelSearchRequest_default_instance_;
class GameMode;
struct GameModeDefaultTypeInternal;
extern GameModeDefaultTypeInternal _GameMode_default_instance_;
class SearchGameRequest;
struct SearchGameRequestDefaultTypeInternal;
extern SearchGameRequestDefaultTypeInternal _SearchGameRequest_default_instance_;
class SearchGameResponse;
struct SearchGameResponseDefaultTypeInternal;
extern SearchGameResponseDefaultTypeInternal _SearchGameResponse_default_instance_;
}  // namespace mm
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::mm::AcceptGameRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::AcceptGameRequest>(Arena*);
template<> ::game::battlemon::mm::CancelSearchRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::CancelSearchRequest>(Arena*);
template<> ::game::battlemon::mm::GameMode* Arena::CreateMaybeMessage<::game::battlemon::mm::GameMode>(Arena*);
template<> ::game::battlemon::mm::SearchGameRequest* Arena::CreateMaybeMessage<::game::battlemon::mm::SearchGameRequest>(Arena*);
template<> ::game::battlemon::mm::SearchGameResponse* Arena::CreateMaybeMessage<::game::battlemon::mm::SearchGameResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace mm {

enum MatchType : int {
  DEATH_MATCH = 0,
  CATCH_THE_FLAG = 1,
  MatchType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MatchType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MatchType_IsValid(int value);
constexpr MatchType MatchType_MIN = DEATH_MATCH;
constexpr MatchType MatchType_MAX = CATCH_THE_FLAG;
constexpr int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchType_descriptor();
template<typename T>
inline const std::string& MatchType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchType_descriptor(), enum_t_value);
}
inline bool MatchType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum MatchMode : int {
  NONE = 0,
  EQUIPMENT = 1,
  REALISM = 2,
  MatchMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MatchMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MatchMode_IsValid(int value);
constexpr MatchMode MatchMode_MIN = NONE;
constexpr MatchMode MatchMode_MAX = REALISM;
constexpr int MatchMode_ARRAYSIZE = MatchMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MatchMode_descriptor();
template<typename T>
inline const std::string& MatchMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MatchMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MatchMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MatchMode_descriptor(), enum_t_value);
}
inline bool MatchMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MatchMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MatchMode>(
    MatchMode_descriptor(), name, value);
}
enum SearchGameResponseStatus : int {
  OK = 0,
  NFT_ERROR = 1,
  ALREADY_IN_QUEUE = 2,
  ALREADY_IN_BATTLE = 3,
  GAMEMODE_ERROR = 4,
  INVALID_REQUEST = 5,
  INTERNAL_ERROR = 6,
  SearchGameResponseStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SearchGameResponseStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SearchGameResponseStatus_IsValid(int value);
constexpr SearchGameResponseStatus SearchGameResponseStatus_MIN = OK;
constexpr SearchGameResponseStatus SearchGameResponseStatus_MAX = INTERNAL_ERROR;
constexpr int SearchGameResponseStatus_ARRAYSIZE = SearchGameResponseStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SearchGameResponseStatus_descriptor();
template<typename T>
inline const std::string& SearchGameResponseStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SearchGameResponseStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SearchGameResponseStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SearchGameResponseStatus_descriptor(), enum_t_value);
}
inline bool SearchGameResponseStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SearchGameResponseStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SearchGameResponseStatus>(
    SearchGameResponseStatus_descriptor(), name, value);
}
// ===================================================================

class GameMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.GameMode) */ {
 public:
  inline GameMode() : GameMode(nullptr) {}
  ~GameMode() override;
  explicit PROTOBUF_CONSTEXPR GameMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GameMode(const GameMode& from);
  GameMode(GameMode&& from) noexcept
    : GameMode() {
    *this = ::std::move(from);
  }

  inline GameMode& operator=(const GameMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameMode& operator=(GameMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GameMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const GameMode* internal_default_instance() {
    return reinterpret_cast<const GameMode*>(
               &_GameMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GameMode& a, GameMode& b) {
    a.Swap(&b);
  }
  inline void Swap(GameMode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GameMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GameMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GameMode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GameMode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GameMode& from) {
    GameMode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameMode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.GameMode";
  }
  protected:
  explicit GameMode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMatchTypeFieldNumber = 1,
    kMatchModeFieldNumber = 2,
  };
  // .game.battlemon.mm.MatchType match_type = 1;
  void clear_match_type();
  ::game::battlemon::mm::MatchType match_type() const;
  void set_match_type(::game::battlemon::mm::MatchType value);
  private:
  ::game::battlemon::mm::MatchType _internal_match_type() const;
  void _internal_set_match_type(::game::battlemon::mm::MatchType value);
  public:

  // .game.battlemon.mm.MatchMode match_mode = 2;
  void clear_match_mode();
  ::game::battlemon::mm::MatchMode match_mode() const;
  void set_match_mode(::game::battlemon::mm::MatchMode value);
  private:
  ::game::battlemon::mm::MatchMode _internal_match_mode() const;
  void _internal_set_match_mode(::game::battlemon::mm::MatchMode value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.GameMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int match_type_;
    int match_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mm_2eproto;
};
// -------------------------------------------------------------------

class SearchGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.SearchGameRequest) */ {
 public:
  inline SearchGameRequest() : SearchGameRequest(nullptr) {}
  ~SearchGameRequest() override;
  explicit PROTOBUF_CONSTEXPR SearchGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchGameRequest(const SearchGameRequest& from);
  SearchGameRequest(SearchGameRequest&& from) noexcept
    : SearchGameRequest() {
    *this = ::std::move(from);
  }

  inline SearchGameRequest& operator=(const SearchGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchGameRequest& operator=(SearchGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchGameRequest* internal_default_instance() {
    return reinterpret_cast<const SearchGameRequest*>(
               &_SearchGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SearchGameRequest& a, SearchGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchGameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchGameRequest& from) {
    SearchGameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchGameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.SearchGameRequest";
  }
  protected:
  explicit SearchGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGameModeFieldNumber = 1,
  };
  // .game.battlemon.mm.GameMode game_mode = 1;
  bool has_game_mode() const;
  private:
  bool _internal_has_game_mode() const;
  public:
  void clear_game_mode();
  const ::game::battlemon::mm::GameMode& game_mode() const;
  PROTOBUF_NODISCARD ::game::battlemon::mm::GameMode* release_game_mode();
  ::game::battlemon::mm::GameMode* mutable_game_mode();
  void set_allocated_game_mode(::game::battlemon::mm::GameMode* game_mode);
  private:
  const ::game::battlemon::mm::GameMode& _internal_game_mode() const;
  ::game::battlemon::mm::GameMode* _internal_mutable_game_mode();
  public:
  void unsafe_arena_set_allocated_game_mode(
      ::game::battlemon::mm::GameMode* game_mode);
  ::game::battlemon::mm::GameMode* unsafe_arena_release_game_mode();

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.SearchGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::game::battlemon::mm::GameMode* game_mode_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mm_2eproto;
};
// -------------------------------------------------------------------

class SearchGameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.SearchGameResponse) */ {
 public:
  inline SearchGameResponse() : SearchGameResponse(nullptr) {}
  ~SearchGameResponse() override;
  explicit PROTOBUF_CONSTEXPR SearchGameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SearchGameResponse(const SearchGameResponse& from);
  SearchGameResponse(SearchGameResponse&& from) noexcept
    : SearchGameResponse() {
    *this = ::std::move(from);
  }

  inline SearchGameResponse& operator=(const SearchGameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SearchGameResponse& operator=(SearchGameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SearchGameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SearchGameResponse* internal_default_instance() {
    return reinterpret_cast<const SearchGameResponse*>(
               &_SearchGameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SearchGameResponse& a, SearchGameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SearchGameResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SearchGameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SearchGameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SearchGameResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SearchGameResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SearchGameResponse& from) {
    SearchGameResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SearchGameResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.SearchGameResponse";
  }
  protected:
  explicit SearchGameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .game.battlemon.mm.SearchGameResponseStatus status = 1;
  void clear_status();
  ::game::battlemon::mm::SearchGameResponseStatus status() const;
  void set_status(::game::battlemon::mm::SearchGameResponseStatus value);
  private:
  ::game::battlemon::mm::SearchGameResponseStatus _internal_status() const;
  void _internal_set_status(::game::battlemon::mm::SearchGameResponseStatus value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.SearchGameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mm_2eproto;
};
// -------------------------------------------------------------------

class AcceptGameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.mm.AcceptGameRequest) */ {
 public:
  inline AcceptGameRequest() : AcceptGameRequest(nullptr) {}
  ~AcceptGameRequest() override;
  explicit PROTOBUF_CONSTEXPR AcceptGameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AcceptGameRequest(const AcceptGameRequest& from);
  AcceptGameRequest(AcceptGameRequest&& from) noexcept
    : AcceptGameRequest() {
    *this = ::std::move(from);
  }

  inline AcceptGameRequest& operator=(const AcceptGameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcceptGameRequest& operator=(AcceptGameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AcceptGameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AcceptGameRequest* internal_default_instance() {
    return reinterpret_cast<const AcceptGameRequest*>(
               &_AcceptGameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AcceptGameRequest& a, AcceptGameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AcceptGameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcceptGameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AcceptGameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AcceptGameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AcceptGameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AcceptGameRequest& from) {
    AcceptGameRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceptGameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.AcceptGameRequest";
  }
  protected:
  explicit AcceptGameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLemonIdFieldNumber = 1,
  };
  // string lemon_id = 1;
  void clear_lemon_id();
  const std::string& lemon_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lemon_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lemon_id();
  PROTOBUF_NODISCARD std::string* release_lemon_id();
  void set_allocated_lemon_id(std::string* lemon_id);
  private:
  const std::string& _internal_lemon_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lemon_id(const std::string& value);
  std::string* _internal_mutable_lemon_id();
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.AcceptGameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lemon_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_mm_2eproto;
};
// -------------------------------------------------------------------

class CancelSearchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.battlemon.mm.CancelSearchRequest) */ {
 public:
  inline CancelSearchRequest() : CancelSearchRequest(nullptr) {}
  explicit PROTOBUF_CONSTEXPR CancelSearchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CancelSearchRequest(const CancelSearchRequest& from);
  CancelSearchRequest(CancelSearchRequest&& from) noexcept
    : CancelSearchRequest() {
    *this = ::std::move(from);
  }

  inline CancelSearchRequest& operator=(const CancelSearchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelSearchRequest& operator=(CancelSearchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CancelSearchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CancelSearchRequest* internal_default_instance() {
    return reinterpret_cast<const CancelSearchRequest*>(
               &_CancelSearchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CancelSearchRequest& a, CancelSearchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelSearchRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelSearchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CancelSearchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CancelSearchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CancelSearchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CancelSearchRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.mm.CancelSearchRequest";
  }
  protected:
  explicit CancelSearchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.battlemon.mm.CancelSearchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_mm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GameMode

// .game.battlemon.mm.MatchType match_type = 1;
inline void GameMode::clear_match_type() {
  _impl_.match_type_ = 0;
}
inline ::game::battlemon::mm::MatchType GameMode::_internal_match_type() const {
  return static_cast< ::game::battlemon::mm::MatchType >(_impl_.match_type_);
}
inline ::game::battlemon::mm::MatchType GameMode::match_type() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.GameMode.match_type)
  return _internal_match_type();
}
inline void GameMode::_internal_set_match_type(::game::battlemon::mm::MatchType value) {
  
  _impl_.match_type_ = value;
}
inline void GameMode::set_match_type(::game::battlemon::mm::MatchType value) {
  _internal_set_match_type(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.GameMode.match_type)
}

// .game.battlemon.mm.MatchMode match_mode = 2;
inline void GameMode::clear_match_mode() {
  _impl_.match_mode_ = 0;
}
inline ::game::battlemon::mm::MatchMode GameMode::_internal_match_mode() const {
  return static_cast< ::game::battlemon::mm::MatchMode >(_impl_.match_mode_);
}
inline ::game::battlemon::mm::MatchMode GameMode::match_mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.GameMode.match_mode)
  return _internal_match_mode();
}
inline void GameMode::_internal_set_match_mode(::game::battlemon::mm::MatchMode value) {
  
  _impl_.match_mode_ = value;
}
inline void GameMode::set_match_mode(::game::battlemon::mm::MatchMode value) {
  _internal_set_match_mode(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.GameMode.match_mode)
}

// -------------------------------------------------------------------

// SearchGameRequest

// .game.battlemon.mm.GameMode game_mode = 1;
inline bool SearchGameRequest::_internal_has_game_mode() const {
  return this != internal_default_instance() && _impl_.game_mode_ != nullptr;
}
inline bool SearchGameRequest::has_game_mode() const {
  return _internal_has_game_mode();
}
inline void SearchGameRequest::clear_game_mode() {
  if (GetArenaForAllocation() == nullptr && _impl_.game_mode_ != nullptr) {
    delete _impl_.game_mode_;
  }
  _impl_.game_mode_ = nullptr;
}
inline const ::game::battlemon::mm::GameMode& SearchGameRequest::_internal_game_mode() const {
  const ::game::battlemon::mm::GameMode* p = _impl_.game_mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::game::battlemon::mm::GameMode&>(
      ::game::battlemon::mm::_GameMode_default_instance_);
}
inline const ::game::battlemon::mm::GameMode& SearchGameRequest::game_mode() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.SearchGameRequest.game_mode)
  return _internal_game_mode();
}
inline void SearchGameRequest::unsafe_arena_set_allocated_game_mode(
    ::game::battlemon::mm::GameMode* game_mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.game_mode_);
  }
  _impl_.game_mode_ = game_mode;
  if (game_mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:game.battlemon.mm.SearchGameRequest.game_mode)
}
inline ::game::battlemon::mm::GameMode* SearchGameRequest::release_game_mode() {
  
  ::game::battlemon::mm::GameMode* temp = _impl_.game_mode_;
  _impl_.game_mode_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::game::battlemon::mm::GameMode* SearchGameRequest::unsafe_arena_release_game_mode() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.SearchGameRequest.game_mode)
  
  ::game::battlemon::mm::GameMode* temp = _impl_.game_mode_;
  _impl_.game_mode_ = nullptr;
  return temp;
}
inline ::game::battlemon::mm::GameMode* SearchGameRequest::_internal_mutable_game_mode() {
  
  if (_impl_.game_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::game::battlemon::mm::GameMode>(GetArenaForAllocation());
    _impl_.game_mode_ = p;
  }
  return _impl_.game_mode_;
}
inline ::game::battlemon::mm::GameMode* SearchGameRequest::mutable_game_mode() {
  ::game::battlemon::mm::GameMode* _msg = _internal_mutable_game_mode();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.SearchGameRequest.game_mode)
  return _msg;
}
inline void SearchGameRequest::set_allocated_game_mode(::game::battlemon::mm::GameMode* game_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.game_mode_;
  }
  if (game_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(game_mode);
    if (message_arena != submessage_arena) {
      game_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, game_mode, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.game_mode_ = game_mode;
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.SearchGameRequest.game_mode)
}

// -------------------------------------------------------------------

// SearchGameResponse

// .game.battlemon.mm.SearchGameResponseStatus status = 1;
inline void SearchGameResponse::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::battlemon::mm::SearchGameResponseStatus SearchGameResponse::_internal_status() const {
  return static_cast< ::game::battlemon::mm::SearchGameResponseStatus >(_impl_.status_);
}
inline ::game::battlemon::mm::SearchGameResponseStatus SearchGameResponse::status() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.SearchGameResponse.status)
  return _internal_status();
}
inline void SearchGameResponse::_internal_set_status(::game::battlemon::mm::SearchGameResponseStatus value) {
  
  _impl_.status_ = value;
}
inline void SearchGameResponse::set_status(::game::battlemon::mm::SearchGameResponseStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.battlemon.mm.SearchGameResponse.status)
}

// -------------------------------------------------------------------

// AcceptGameRequest

// string lemon_id = 1;
inline void AcceptGameRequest::clear_lemon_id() {
  _impl_.lemon_id_.ClearToEmpty();
}
inline const std::string& AcceptGameRequest::lemon_id() const {
  // @@protoc_insertion_point(field_get:game.battlemon.mm.AcceptGameRequest.lemon_id)
  return _internal_lemon_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AcceptGameRequest::set_lemon_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lemon_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:game.battlemon.mm.AcceptGameRequest.lemon_id)
}
inline std::string* AcceptGameRequest::mutable_lemon_id() {
  std::string* _s = _internal_mutable_lemon_id();
  // @@protoc_insertion_point(field_mutable:game.battlemon.mm.AcceptGameRequest.lemon_id)
  return _s;
}
inline const std::string& AcceptGameRequest::_internal_lemon_id() const {
  return _impl_.lemon_id_.Get();
}
inline void AcceptGameRequest::_internal_set_lemon_id(const std::string& value) {
  
  _impl_.lemon_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AcceptGameRequest::_internal_mutable_lemon_id() {
  
  return _impl_.lemon_id_.Mutable(GetArenaForAllocation());
}
inline std::string* AcceptGameRequest::release_lemon_id() {
  // @@protoc_insertion_point(field_release:game.battlemon.mm.AcceptGameRequest.lemon_id)
  return _impl_.lemon_id_.Release();
}
inline void AcceptGameRequest::set_allocated_lemon_id(std::string* lemon_id) {
  if (lemon_id != nullptr) {
    
  } else {
    
  }
  _impl_.lemon_id_.SetAllocated(lemon_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lemon_id_.IsDefault()) {
    _impl_.lemon_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.mm.AcceptGameRequest.lemon_id)
}

// -------------------------------------------------------------------

// CancelSearchRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mm
}  // namespace battlemon
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::battlemon::mm::MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::mm::MatchType>() {
  return ::game::battlemon::mm::MatchType_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::mm::MatchMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::mm::MatchMode>() {
  return ::game::battlemon::mm::MatchMode_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::mm::SearchGameResponseStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::mm::SearchGameResponseStatus>() {
  return ::game::battlemon::mm::SearchGameResponseStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mm_2eproto
