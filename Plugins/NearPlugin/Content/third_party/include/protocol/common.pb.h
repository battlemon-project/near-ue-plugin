// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2eproto;
namespace game {
namespace battlemon {
namespace common {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Response;
struct ResponseDefaultTypeInternal;
extern ResponseDefaultTypeInternal _Response_default_instance_;
class ResultStatus;
struct ResultStatusDefaultTypeInternal;
extern ResultStatusDefaultTypeInternal _ResultStatus_default_instance_;
}  // namespace common
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> ::game::battlemon::common::Empty* Arena::CreateMaybeMessage<::game::battlemon::common::Empty>(Arena*);
template<> ::game::battlemon::common::Response* Arena::CreateMaybeMessage<::game::battlemon::common::Response>(Arena*);
template<> ::game::battlemon::common::ResultStatus* Arena::CreateMaybeMessage<::game::battlemon::common::ResultStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace game {
namespace battlemon {
namespace common {

enum SortOrder : int {
  ASC = 0,
  DESC = 1,
  SortOrder_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SortOrder_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SortOrder_IsValid(int value);
constexpr SortOrder SortOrder_MIN = ASC;
constexpr SortOrder SortOrder_MAX = DESC;
constexpr int SortOrder_ARRAYSIZE = SortOrder_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SortOrder_descriptor();
template<typename T>
inline const std::string& SortOrder_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SortOrder>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SortOrder_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SortOrder_descriptor(), enum_t_value);
}
inline bool SortOrder_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SortOrder* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SortOrder>(
    SortOrder_descriptor(), name, value);
}
enum Status : int {
  OK = 0,
  SYSTEM_ERROR = 999,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = OK;
constexpr Status Status_MAX = SYSTEM_ERROR;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum ServiceStatus : int {
  SUCCESS = 0,
  INTERNAL_ERROR = 1,
  BAD_REQUEST = 2,
  ServiceStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceStatus_IsValid(int value);
constexpr ServiceStatus ServiceStatus_MIN = SUCCESS;
constexpr ServiceStatus ServiceStatus_MAX = BAD_REQUEST;
constexpr int ServiceStatus_ARRAYSIZE = ServiceStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceStatus_descriptor();
template<typename T>
inline const std::string& ServiceStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceStatus_descriptor(), enum_t_value);
}
inline bool ServiceStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceStatus>(
    ServiceStatus_descriptor(), name, value);
}
enum Rarity : int {
  COMMON = 0,
  RARE = 1,
  EPIC = 2,
  LEGENDARY = 3,
  Rarity_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Rarity_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Rarity_IsValid(int value);
constexpr Rarity Rarity_MIN = COMMON;
constexpr Rarity Rarity_MAX = LEGENDARY;
constexpr int Rarity_ARRAYSIZE = Rarity_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Rarity_descriptor();
template<typename T>
inline const std::string& Rarity_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Rarity>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Rarity_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Rarity_descriptor(), enum_t_value);
}
inline bool Rarity_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Rarity* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Rarity>(
    Rarity_descriptor(), name, value);
}
enum Faction : int {
  FIRST = 0,
  Faction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Faction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Faction_IsValid(int value);
constexpr Faction Faction_MIN = FIRST;
constexpr Faction Faction_MAX = FIRST;
constexpr int Faction_ARRAYSIZE = Faction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Faction_descriptor();
template<typename T>
inline const std::string& Faction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Faction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Faction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Faction_descriptor(), enum_t_value);
}
inline bool Faction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Faction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Faction>(
    Faction_descriptor(), name, value);
}
// ===================================================================

class Empty final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:game.battlemon.common.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}
  explicit PROTOBUF_CONSTEXPR Empty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Empty(const Empty& from);
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }
  inline void Swap(Empty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.common.Empty";
  }
  protected:
  explicit Empty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:game.battlemon.common.Empty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.common.Response) */ {
 public:
  inline Response() : Response(nullptr) {}
  ~Response() override;
  explicit PROTOBUF_CONSTEXPR Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Response(const Response& from);
  Response(Response&& from) noexcept
    : Response() {
    *this = ::std::move(from);
  }

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Response& operator=(Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const Response* internal_default_instance() {
    return reinterpret_cast<const Response*>(
               &_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Response& a, Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Response& from) {
    Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.common.Response";
  }
  protected:
  explicit Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .game.battlemon.common.ServiceStatus status = 1;
  void clear_status();
  ::game::battlemon::common::ServiceStatus status() const;
  void set_status(::game::battlemon::common::ServiceStatus value);
  private:
  ::game::battlemon::common::ServiceStatus _internal_status() const;
  void _internal_set_status(::game::battlemon::common::ServiceStatus value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.common.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// -------------------------------------------------------------------

class ResultStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:game.battlemon.common.ResultStatus) */ {
 public:
  inline ResultStatus() : ResultStatus(nullptr) {}
  ~ResultStatus() override;
  explicit PROTOBUF_CONSTEXPR ResultStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultStatus(const ResultStatus& from);
  ResultStatus(ResultStatus&& from) noexcept
    : ResultStatus() {
    *this = ::std::move(from);
  }

  inline ResultStatus& operator=(const ResultStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultStatus& operator=(ResultStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultStatus* internal_default_instance() {
    return reinterpret_cast<const ResultStatus*>(
               &_ResultStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResultStatus& a, ResultStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ResultStatus& from) {
    ResultStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "game.battlemon.common.ResultStatus";
  }
  protected:
  explicit ResultStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // .game.battlemon.common.Status status = 1;
  void clear_status();
  ::game::battlemon::common::Status status() const;
  void set_status(::game::battlemon::common::Status value);
  private:
  ::game::battlemon::common::Status _internal_status() const;
  void _internal_set_status(::game::battlemon::common::Status value);
  public:

  // @@protoc_insertion_point(class_scope:game.battlemon.common.ResultStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_common_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// Response

// .game.battlemon.common.ServiceStatus status = 1;
inline void Response::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::battlemon::common::ServiceStatus Response::_internal_status() const {
  return static_cast< ::game::battlemon::common::ServiceStatus >(_impl_.status_);
}
inline ::game::battlemon::common::ServiceStatus Response::status() const {
  // @@protoc_insertion_point(field_get:game.battlemon.common.Response.status)
  return _internal_status();
}
inline void Response::_internal_set_status(::game::battlemon::common::ServiceStatus value) {
  
  _impl_.status_ = value;
}
inline void Response::set_status(::game::battlemon::common::ServiceStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.battlemon.common.Response.status)
}

// -------------------------------------------------------------------

// ResultStatus

// .game.battlemon.common.Status status = 1;
inline void ResultStatus::clear_status() {
  _impl_.status_ = 0;
}
inline ::game::battlemon::common::Status ResultStatus::_internal_status() const {
  return static_cast< ::game::battlemon::common::Status >(_impl_.status_);
}
inline ::game::battlemon::common::Status ResultStatus::status() const {
  // @@protoc_insertion_point(field_get:game.battlemon.common.ResultStatus.status)
  return _internal_status();
}
inline void ResultStatus::_internal_set_status(::game::battlemon::common::Status value) {
  
  _impl_.status_ = value;
}
inline void ResultStatus::set_status(::game::battlemon::common::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:game.battlemon.common.ResultStatus.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace battlemon
}  // namespace game

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::game::battlemon::common::SortOrder> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::common::SortOrder>() {
  return ::game::battlemon::common::SortOrder_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::common::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::common::Status>() {
  return ::game::battlemon::common::Status_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::common::ServiceStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::common::ServiceStatus>() {
  return ::game::battlemon::common::ServiceStatus_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::common::Rarity> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::common::Rarity>() {
  return ::game::battlemon::common::Rarity_descriptor();
}
template <> struct is_proto_enum< ::game::battlemon::common::Faction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::game::battlemon::common::Faction>() {
  return ::game::battlemon::common::Faction_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2eproto
