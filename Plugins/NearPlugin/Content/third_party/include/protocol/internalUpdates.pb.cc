// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internalUpdates.proto

#include "internalUpdates.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace updates {
PROTOBUF_CONSTEXPR InternalUpdate::InternalUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_ids_)*/{}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.remove_on_fail_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InternalUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InternalUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InternalUpdateDefaultTypeInternal() {}
  union {
    InternalUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InternalUpdateDefaultTypeInternal _InternalUpdate_default_instance_;
}  // namespace updates
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_internalUpdates_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_internalUpdates_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_internalUpdates_2eproto = nullptr;

const uint32_t TableStruct_internalUpdates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::InternalUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::InternalUpdate, _impl_.near_ids_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::InternalUpdate, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::InternalUpdate, _impl_.remove_on_fail_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::updates::InternalUpdate)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::updates::_InternalUpdate_default_instance_._instance,
};

const char descriptor_table_protodef_internalUpdates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025internalUpdates.proto\022\026game.battlemon."
  "updates\"K\n\016InternalUpdate\022\020\n\010near_ids\030\001 "
  "\003(\t\022\017\n\007message\030\002 \001(\t\022\026\n\016remove_on_fail\030\003"
  " \001(\010B\nZ\010servicesb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_internalUpdates_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_internalUpdates_2eproto = {
    false, false, 144, descriptor_table_protodef_internalUpdates_2eproto,
    "internalUpdates.proto",
    &descriptor_table_internalUpdates_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_internalUpdates_2eproto::offsets,
    file_level_metadata_internalUpdates_2eproto, file_level_enum_descriptors_internalUpdates_2eproto,
    file_level_service_descriptors_internalUpdates_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_internalUpdates_2eproto_getter() {
  return &descriptor_table_internalUpdates_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_internalUpdates_2eproto(&descriptor_table_internalUpdates_2eproto);
namespace game {
namespace battlemon {
namespace updates {

// ===================================================================

class InternalUpdate::_Internal {
 public:
};

InternalUpdate::InternalUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.InternalUpdate)
}
InternalUpdate::InternalUpdate(const InternalUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InternalUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){from._impl_.near_ids_}
    , decltype(_impl_.message_){}
    , decltype(_impl_.remove_on_fail_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.remove_on_fail_ = from._impl_.remove_on_fail_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.InternalUpdate)
}

inline void InternalUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_ids_){arena}
    , decltype(_impl_.message_){}
    , decltype(_impl_.remove_on_fail_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InternalUpdate::~InternalUpdate() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.InternalUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InternalUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_ids_.~RepeatedPtrField();
  _impl_.message_.Destroy();
}

void InternalUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InternalUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.InternalUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_ids_.Clear();
  _impl_.message_.ClearToEmpty();
  _impl_.remove_on_fail_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InternalUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string near_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_near_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.InternalUpdate.near_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.InternalUpdate.message"));
        } else
          goto handle_unusual;
        continue;
      // bool remove_on_fail = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.remove_on_fail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InternalUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.InternalUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string near_ids = 1;
  for (int i = 0, n = this->_internal_near_ids_size(); i < n; i++) {
    const auto& s = this->_internal_near_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.InternalUpdate.near_ids");
    target = stream->WriteString(1, s, target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.InternalUpdate.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // bool remove_on_fail = 3;
  if (this->_internal_remove_on_fail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_remove_on_fail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.InternalUpdate)
  return target;
}

size_t InternalUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.InternalUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string near_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.near_ids_.size());
  for (int i = 0, n = _impl_.near_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.near_ids_.Get(i));
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // bool remove_on_fail = 3;
  if (this->_internal_remove_on_fail() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InternalUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InternalUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InternalUpdate::GetClassData() const { return &_class_data_; }


void InternalUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InternalUpdate*>(&to_msg);
  auto& from = static_cast<const InternalUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.InternalUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.near_ids_.MergeFrom(from._impl_.near_ids_);
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_remove_on_fail() != 0) {
    _this->_internal_set_remove_on_fail(from._internal_remove_on_fail());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InternalUpdate::CopyFrom(const InternalUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.InternalUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InternalUpdate::IsInitialized() const {
  return true;
}

void InternalUpdate::InternalSwap(InternalUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.near_ids_.InternalSwap(&other->_impl_.near_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.remove_on_fail_, other->_impl_.remove_on_fail_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InternalUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_internalUpdates_2eproto_getter, &descriptor_table_internalUpdates_2eproto_once,
      file_level_metadata_internalUpdates_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace updates
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::InternalUpdate*
Arena::CreateMaybeMessage< ::game::battlemon::updates::InternalUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::InternalUpdate >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
