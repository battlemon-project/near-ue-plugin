// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internalMm.proto
#ifndef GRPC_internalMm_2eproto__INCLUDED
#define GRPC_internalMm_2eproto__INCLUDED

#include "internalMm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace battlemon {
namespace mm {
namespace internal {

class InternalMMService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.battlemon.mm.internal.InternalMMService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // for dedicated server
    virtual ::grpc::Status UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncUserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncUserLeftBattleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncUserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncUserLeftBattleRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncSaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncSaveBattleResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncSaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncSaveBattleResultRaw(context, request, cq));
    }
    virtual ::grpc::Status GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>> AsyncGetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>>(AsyncGetRoomInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>> PrepareAsyncGetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>>(PrepareAsyncGetRoomInfoRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>> AsyncCreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>>(AsyncCreateRoomWithPlayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>> PrepareAsyncCreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>>(PrepareAsyncCreateRoomWithPlayersRaw(context, request, cq));
    }
    virtual ::grpc::Status DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::game::battlemon::common::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> AsyncDedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(AsyncDedicatedServerIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>> PrepareAsyncDedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>>(PrepareAsyncDedicatedServerIsReadyRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // for dedicated server
      virtual void UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>* AsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>* PrepareAsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>* AsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::mm::internal::RoomInfoResponse>* PrepareAsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* AsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::common::Empty>* PrepareAsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncUserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncUserLeftBattleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncUserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncUserLeftBattleRaw(context, request, cq));
    }
    ::grpc::Status SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncSaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncSaveBattleResultRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncSaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncSaveBattleResultRaw(context, request, cq));
    }
    ::grpc::Status GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>> AsyncGetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>>(AsyncGetRoomInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>> PrepareAsyncGetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>>(PrepareAsyncGetRoomInfoRaw(context, request, cq));
    }
    ::grpc::Status CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::game::battlemon::mm::internal::RoomInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>> AsyncCreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>>(AsyncCreateRoomWithPlayersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>> PrepareAsyncCreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>>(PrepareAsyncCreateRoomWithPlayersRaw(context, request, cq));
    }
    ::grpc::Status DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::game::battlemon::common::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> AsyncDedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(AsyncDedicatedServerIsReadyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>> PrepareAsyncDedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>>(PrepareAsyncDedicatedServerIsReadyRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void UserLeftBattle(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void SaveBattleResult(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void GetRoomInfo(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateRoomWithPlayers(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, std::function<void(::grpc::Status)>) override;
      void DedicatedServerIsReady(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncUserLeftBattleRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncSaveBattleResultRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* AsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* PrepareAsyncGetRoomInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* AsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::mm::internal::RoomInfoResponse>* PrepareAsyncCreateRoomWithPlayersRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* AsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::common::Empty>* PrepareAsyncDedicatedServerIsReadyRaw(::grpc::ClientContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UserLeftBattle_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveBattleResult_;
    const ::grpc::internal::RpcMethod rpcmethod_GetRoomInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateRoomWithPlayers_;
    const ::grpc::internal::RpcMethod rpcmethod_DedicatedServerIsReady_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // for dedicated server
    virtual ::grpc::Status UserLeftBattle(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response);
    virtual ::grpc::Status SaveBattleResult(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response);
    virtual ::grpc::Status GetRoomInfo(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response);
    virtual ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response);
    virtual ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLeftBattle(::grpc::ServerContext* context, ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveBattleResult(::grpc::ServerContext* context, ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomInfo(::grpc::ServerContext* context, ::game::battlemon::mm::internal::RoomInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::mm::internal::RoomInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoomWithPlayers(::grpc::ServerContext* context, ::game::battlemon::mm::internal::CreateRoomRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::mm::internal::RoomInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDedicatedServerIsReady(::grpc::ServerContext* context, ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::common::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UserLeftBattle<WithAsyncMethod_SaveBattleResult<WithAsyncMethod_GetRoomInfo<WithAsyncMethod_CreateRoomWithPlayers<WithAsyncMethod_DedicatedServerIsReady<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* request, ::game::battlemon::common::Empty* response) { return this->UserLeftBattle(context, request, response); }));}
    void SetMessageAllocatorFor_UserLeftBattle(
        ::grpc::MessageAllocator< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLeftBattle(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::internal::SaveBattleResultRequest* request, ::game::battlemon::common::Empty* response) { return this->SaveBattleResult(context, request, response); }));}
    void SetMessageAllocatorFor_SaveBattleResult(
        ::grpc::MessageAllocator< ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveBattleResult(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::internal::RoomInfoRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response) { return this->GetRoomInfo(context, request, response); }));}
    void SetMessageAllocatorFor_GetRoomInfo(
        ::grpc::MessageAllocator< ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::internal::CreateRoomRequest* request, ::game::battlemon::mm::internal::RoomInfoResponse* response) { return this->CreateRoomWithPlayers(context, request, response); }));}
    void SetMessageAllocatorFor_CreateRoomWithPlayers(
        ::grpc::MessageAllocator< ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoomWithPlayers(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* request, ::game::battlemon::common::Empty* response) { return this->DedicatedServerIsReady(context, request, response); }));}
    void SetMessageAllocatorFor_DedicatedServerIsReady(
        ::grpc::MessageAllocator< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DedicatedServerIsReady(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UserLeftBattle<WithCallbackMethod_SaveBattleResult<WithCallbackMethod_GetRoomInfo<WithCallbackMethod_CreateRoomWithPlayers<WithCallbackMethod_DedicatedServerIsReady<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUserLeftBattle(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveBattleResult(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetRoomInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateRoomWithPlayers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDedicatedServerIsReady(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UserLeftBattle(context, request, response); }));
    }
    ~WithRawCallbackMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UserLeftBattle(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveBattleResult(context, request, response); }));
    }
    ~WithRawCallbackMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveBattleResult(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetRoomInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetRoomInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateRoomWithPlayers(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateRoomWithPlayers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DedicatedServerIsReady(context, request, response); }));
    }
    ~WithRawCallbackMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DedicatedServerIsReady(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UserLeftBattle : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UserLeftBattle() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::internal::InternalUserLeftBattleRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedUserLeftBattle(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UserLeftBattle() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UserLeftBattle(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::InternalUserLeftBattleRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUserLeftBattle(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::internal::InternalUserLeftBattleRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveBattleResult : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveBattleResult() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::internal::SaveBattleResultRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedSaveBattleResult(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveBattleResult() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveBattleResult(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::SaveBattleResultRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveBattleResult(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::internal::SaveBattleResultRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetRoomInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetRoomInfo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::internal::RoomInfoRequest, ::game::battlemon::mm::internal::RoomInfoResponse>* streamer) {
                       return this->StreamedGetRoomInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetRoomInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetRoomInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::RoomInfoRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetRoomInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::internal::RoomInfoRequest,::game::battlemon::mm::internal::RoomInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateRoomWithPlayers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateRoomWithPlayers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::internal::CreateRoomRequest, ::game::battlemon::mm::internal::RoomInfoResponse>* streamer) {
                       return this->StreamedCreateRoomWithPlayers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateRoomWithPlayers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateRoomWithPlayers(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::CreateRoomRequest* /*request*/, ::game::battlemon::mm::internal::RoomInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateRoomWithPlayers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::internal::CreateRoomRequest,::game::battlemon::mm::internal::RoomInfoResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DedicatedServerIsReady : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DedicatedServerIsReady() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest, ::game::battlemon::common::Empty>* streamer) {
                       return this->StreamedDedicatedServerIsReady(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DedicatedServerIsReady() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DedicatedServerIsReady(::grpc::ServerContext* /*context*/, const ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest* /*request*/, ::game::battlemon::common::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDedicatedServerIsReady(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::mm::internal::DedicatedServerIsReadyRequest,::game::battlemon::common::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_UserLeftBattle<WithStreamedUnaryMethod_SaveBattleResult<WithStreamedUnaryMethod_GetRoomInfo<WithStreamedUnaryMethod_CreateRoomWithPlayers<WithStreamedUnaryMethod_DedicatedServerIsReady<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_UserLeftBattle<WithStreamedUnaryMethod_SaveBattleResult<WithStreamedUnaryMethod_GetRoomInfo<WithStreamedUnaryMethod_CreateRoomWithPlayers<WithStreamedUnaryMethod_DedicatedServerIsReady<Service > > > > > StreamedService;
};

}  // namespace internal
}  // namespace mm
}  // namespace battlemon
}  // namespace game


#endif  // GRPC_internalMm_2eproto__INCLUDED
