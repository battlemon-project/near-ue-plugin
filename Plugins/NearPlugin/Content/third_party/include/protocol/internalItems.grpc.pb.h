// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: internalItems.proto
#ifndef GRPC_internalItems_2eproto__INCLUDED
#define GRPC_internalItems_2eproto__INCLUDED

#include "internalItems.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace game {
namespace battlemon {
namespace items {
namespace internal {

class InternalItemsService final {
 public:
  static constexpr char const* service_full_name() {
    return "game.battlemon.items.internal.InternalItemsService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::game::battlemon::items::internal::IsOwnerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>> AsyncIsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>>(AsyncIsOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>> PrepareAsyncIsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>>(PrepareAsyncIsOwnerRaw(context, request, cq));
    }
    virtual ::grpc::Status InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>> AsyncInternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>>(AsyncInternalGetLemonsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>> PrepareAsyncInternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>>(PrepareAsyncInternalGetLemonsInfoRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>* AsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::IsOwnerResponse>* PrepareAsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* AsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* PrepareAsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::game::battlemon::items::internal::IsOwnerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>> AsyncIsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>>(AsyncIsOwnerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>> PrepareAsyncIsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>>(PrepareAsyncIsOwnerRaw(context, request, cq));
    }
    ::grpc::Status InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>> AsyncInternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>>(AsyncInternalGetLemonsInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>> PrepareAsyncInternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>>(PrepareAsyncInternalGetLemonsInfoRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, std::function<void(::grpc::Status)>) override;
      void IsOwner(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, std::function<void(::grpc::Status)>) override;
      void InternalGetLemonsInfo(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>* AsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::IsOwnerResponse>* PrepareAsyncIsOwnerRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::IsOwnerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* AsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* PrepareAsyncInternalGetLemonsInfoRaw(::grpc::ClientContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_IsOwner_;
    const ::grpc::internal::RpcMethod rpcmethod_InternalGetLemonsInfo_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status IsOwner(::grpc::ServerContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response);
    virtual ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsOwner() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsOwner(::grpc::ServerContext* context, ::game::battlemon::items::internal::IsOwnerRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::items::internal::IsOwnerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInternalGetLemonsInfo(::grpc::ServerContext* context, ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::grpc::ServerAsyncResponseWriter< ::game::battlemon::items::internal::InternalLemonsInfoResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_IsOwner<WithAsyncMethod_InternalGetLemonsInfo<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsOwner() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::internal::IsOwnerRequest* request, ::game::battlemon::items::internal::IsOwnerResponse* response) { return this->IsOwner(context, request, response); }));}
    void SetMessageAllocatorFor_IsOwner(
        ::grpc::MessageAllocator< ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* request, ::game::battlemon::items::internal::InternalLemonsInfoResponse* response) { return this->InternalGetLemonsInfo(context, request, response); }));}
    void SetMessageAllocatorFor_InternalGetLemonsInfo(
        ::grpc::MessageAllocator< ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InternalGetLemonsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_IsOwner<WithCallbackMethod_InternalGetLemonsInfo<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsOwner() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsOwner() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsOwner(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInternalGetLemonsInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsOwner() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsOwner(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsOwner(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InternalGetLemonsInfo(context, request, response); }));
    }
    ~WithRawCallbackMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InternalGetLemonsInfo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsOwner : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsOwner() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::internal::IsOwnerRequest, ::game::battlemon::items::internal::IsOwnerResponse>* streamer) {
                       return this->StreamedIsOwner(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsOwner() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsOwner(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::IsOwnerRequest* /*request*/, ::game::battlemon::items::internal::IsOwnerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsOwner(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::internal::IsOwnerRequest,::game::battlemon::items::internal::IsOwnerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InternalGetLemonsInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InternalGetLemonsInfo() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::game::battlemon::items::internal::InternalLemonsInfoRequest, ::game::battlemon::items::internal::InternalLemonsInfoResponse>* streamer) {
                       return this->StreamedInternalGetLemonsInfo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InternalGetLemonsInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InternalGetLemonsInfo(::grpc::ServerContext* /*context*/, const ::game::battlemon::items::internal::InternalLemonsInfoRequest* /*request*/, ::game::battlemon::items::internal::InternalLemonsInfoResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInternalGetLemonsInfo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::game::battlemon::items::internal::InternalLemonsInfoRequest,::game::battlemon::items::internal::InternalLemonsInfoResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_IsOwner<WithStreamedUnaryMethod_InternalGetLemonsInfo<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_IsOwner<WithStreamedUnaryMethod_InternalGetLemonsInfo<Service > > StreamedService;
};

}  // namespace internal
}  // namespace items
}  // namespace battlemon
}  // namespace game


#endif  // GRPC_internalItems_2eproto__INCLUDED
