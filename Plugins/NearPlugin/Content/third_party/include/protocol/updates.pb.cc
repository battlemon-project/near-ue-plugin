// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: updates.proto

#include "updates.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace game {
namespace battlemon {
namespace updates {
PROTOBUF_CONSTEXPR Update::Update(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDefaultTypeInternal() {}
  union {
    Update _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDefaultTypeInternal _Update_default_instance_;
PROTOBUF_CONSTEXPR UpdateMessage::UpdateMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.update_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct UpdateMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateMessageDefaultTypeInternal() {}
  union {
    UpdateMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateMessageDefaultTypeInternal _UpdateMessage_default_instance_;
PROTOBUF_CONSTEXPR RoomNeedAccept::RoomNeedAccept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.manual_accept_)*/false
  , /*decltype(_impl_.time_to_accept_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomNeedAcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomNeedAcceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomNeedAcceptDefaultTypeInternal() {}
  union {
    RoomNeedAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomNeedAcceptDefaultTypeInternal _RoomNeedAccept_default_instance_;
PROTOBUF_CONSTEXPR RoomInfo::RoomInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_.room_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomInfoDefaultTypeInternal() {}
  union {
    RoomInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomInfoDefaultTypeInternal _RoomInfo_default_instance_;
PROTOBUF_CONSTEXPR RoomPlayer::RoomPlayer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.near_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lemon_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RoomPlayerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RoomPlayerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RoomPlayerDefaultTypeInternal() {}
  union {
    RoomPlayer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RoomPlayerDefaultTypeInternal _RoomPlayer_default_instance_;
}  // namespace updates
}  // namespace battlemon
}  // namespace game
static ::_pb::Metadata file_level_metadata_updates_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_updates_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_updates_2eproto = nullptr;

const uint32_t TableStruct_updates_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::Update, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::Update, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::Update, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::Update, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::UpdateMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::UpdateMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::UpdateMessage, _impl_.update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomNeedAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomNeedAccept, _impl_.manual_accept_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomNeedAccept, _impl_.time_to_accept_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomInfo, _impl_.room_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomInfo, _impl_.server_ip_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomInfo, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomPlayer, _impl_.near_id_),
  PROTOBUF_FIELD_OFFSET(::game::battlemon::updates::RoomPlayer, _impl_.lemon_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::game::battlemon::updates::Update)},
  { 9, -1, -1, sizeof(::game::battlemon::updates::UpdateMessage)},
  { 24, -1, -1, sizeof(::game::battlemon::updates::RoomNeedAccept)},
  { 32, -1, -1, sizeof(::game::battlemon::updates::RoomInfo)},
  { 41, -1, -1, sizeof(::game::battlemon::updates::RoomPlayer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::game::battlemon::updates::_Update_default_instance_._instance,
  &::game::battlemon::updates::_UpdateMessage_default_instance_._instance,
  &::game::battlemon::updates::_RoomNeedAccept_default_instance_._instance,
  &::game::battlemon::updates::_RoomInfo_default_instance_._instance,
  &::game::battlemon::updates::_RoomPlayer_default_instance_._instance,
};

const char descriptor_table_protodef_updates_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rupdates.proto\022\026game.battlemon.updates\032"
  "\014common.proto\032\013items.proto\"8\n\006Update\022\n\n\002"
  "id\030\001 \001(\t\022\021\n\ttimestamp\030\002 \001(\003\022\017\n\007message\030\003"
  " \001(\t\"\214\004\n\rUpdateMessage\022B\n\020room_need_acce"
  "pt\030\001 \001(\0132&.game.battlemon.updates.RoomNe"
  "edAcceptH\000\022\?\n\027room_accepting_canceled\030\002 "
  "\001(\0132\034.game.battlemon.common.EmptyH\000\0226\n\nr"
  "oom_found\030\003 \001(\0132 .game.battlemon.updates"
  ".RoomInfoH\000\022:\n\016room_teammates\030\004 \001(\0132 .ga"
  "me.battlemon.updates.RoomInfoH\000\0226\n\nroom_"
  "ready\030\005 \001(\0132 .game.battlemon.updates.Roo"
  "mInfoH\000\022\?\n\027user_is_already_in_line\030\006 \001(\013"
  "2\034.game.battlemon.common.EmptyH\000\022E\n\031user"
  "_is_already_in_battle\030\007 \001(\0132 .game.battl"
  "emon.updates.RoomInfoH\000\0228\n\020user_out_of_l"
  "ine\030\010 \001(\0132\034.game.battlemon.common.EmptyH"
  "\000B\010\n\006update\"\?\n\016RoomNeedAccept\022\025\n\rmanual_"
  "accept\030\001 \001(\010\022\026\n\016time_to_accept\030\002 \001(\005\"c\n\010"
  "RoomInfo\022\017\n\007room_id\030\001 \001(\t\022\021\n\tserver_ip\030\002"
  " \001(\t\0223\n\007players\030\003 \003(\0132\".game.battlemon.u"
  "pdates.RoomPlayer\"H\n\nRoomPlayer\022\017\n\007near_"
  "id\030\001 \001(\t\022)\n\005lemon\030\002 \001(\0132\032.game.battlemon"
  ".items.ItemB\nZ\010servicesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_updates_2eproto_deps[2] = {
  &::descriptor_table_common_2eproto,
  &::descriptor_table_items_2eproto,
};
static ::_pbi::once_flag descriptor_table_updates_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_updates_2eproto = {
    false, false, 911, descriptor_table_protodef_updates_2eproto,
    "updates.proto",
    &descriptor_table_updates_2eproto_once, descriptor_table_updates_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_updates_2eproto::offsets,
    file_level_metadata_updates_2eproto, file_level_enum_descriptors_updates_2eproto,
    file_level_service_descriptors_updates_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_updates_2eproto_getter() {
  return &descriptor_table_updates_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_updates_2eproto(&descriptor_table_updates_2eproto);
namespace game {
namespace battlemon {
namespace updates {

// ===================================================================

class Update::_Internal {
 public:
};

Update::Update(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.Update)
}
Update::Update(const Update& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Update* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.timestamp_ = from._impl_.timestamp_;
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.Update)
}

inline void Update::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.message_){}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Update::~Update() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.Update)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Update::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.message_.Destroy();
}

void Update::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Update::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.Update)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.message_.ClearToEmpty();
  _impl_.timestamp_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Update::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.Update.id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.Update.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Update::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.Update)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.Update.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.Update.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.Update)
  return target;
}

size_t Update::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.Update)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // int64 timestamp = 2;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Update::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Update::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Update::GetClassData() const { return &_class_data_; }


void Update::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Update*>(&to_msg);
  auto& from = static_cast<const Update&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.Update)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Update::CopyFrom(const Update& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.Update)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Update::IsInitialized() const {
  return true;
}

void Update::InternalSwap(Update* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.timestamp_, other->_impl_.timestamp_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Update::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_updates_2eproto_getter, &descriptor_table_updates_2eproto_once,
      file_level_metadata_updates_2eproto[0]);
}

// ===================================================================

class UpdateMessage::_Internal {
 public:
  static const ::game::battlemon::updates::RoomNeedAccept& room_need_accept(const UpdateMessage* msg);
  static const ::game::battlemon::common::Empty& room_accepting_canceled(const UpdateMessage* msg);
  static const ::game::battlemon::updates::RoomInfo& room_found(const UpdateMessage* msg);
  static const ::game::battlemon::updates::RoomInfo& room_teammates(const UpdateMessage* msg);
  static const ::game::battlemon::updates::RoomInfo& room_ready(const UpdateMessage* msg);
  static const ::game::battlemon::common::Empty& user_is_already_in_line(const UpdateMessage* msg);
  static const ::game::battlemon::updates::RoomInfo& user_is_already_in_battle(const UpdateMessage* msg);
  static const ::game::battlemon::common::Empty& user_out_of_line(const UpdateMessage* msg);
};

const ::game::battlemon::updates::RoomNeedAccept&
UpdateMessage::_Internal::room_need_accept(const UpdateMessage* msg) {
  return *msg->_impl_.update_.room_need_accept_;
}
const ::game::battlemon::common::Empty&
UpdateMessage::_Internal::room_accepting_canceled(const UpdateMessage* msg) {
  return *msg->_impl_.update_.room_accepting_canceled_;
}
const ::game::battlemon::updates::RoomInfo&
UpdateMessage::_Internal::room_found(const UpdateMessage* msg) {
  return *msg->_impl_.update_.room_found_;
}
const ::game::battlemon::updates::RoomInfo&
UpdateMessage::_Internal::room_teammates(const UpdateMessage* msg) {
  return *msg->_impl_.update_.room_teammates_;
}
const ::game::battlemon::updates::RoomInfo&
UpdateMessage::_Internal::room_ready(const UpdateMessage* msg) {
  return *msg->_impl_.update_.room_ready_;
}
const ::game::battlemon::common::Empty&
UpdateMessage::_Internal::user_is_already_in_line(const UpdateMessage* msg) {
  return *msg->_impl_.update_.user_is_already_in_line_;
}
const ::game::battlemon::updates::RoomInfo&
UpdateMessage::_Internal::user_is_already_in_battle(const UpdateMessage* msg) {
  return *msg->_impl_.update_.user_is_already_in_battle_;
}
const ::game::battlemon::common::Empty&
UpdateMessage::_Internal::user_out_of_line(const UpdateMessage* msg) {
  return *msg->_impl_.update_.user_out_of_line_;
}
void UpdateMessage::set_allocated_room_need_accept(::game::battlemon::updates::RoomNeedAccept* room_need_accept) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (room_need_accept) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_need_accept);
    if (message_arena != submessage_arena) {
      room_need_accept = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_need_accept, submessage_arena);
    }
    set_has_room_need_accept();
    _impl_.update_.room_need_accept_ = room_need_accept;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.room_need_accept)
}
void UpdateMessage::set_allocated_room_accepting_canceled(::game::battlemon::common::Empty* room_accepting_canceled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (room_accepting_canceled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(room_accepting_canceled));
    if (message_arena != submessage_arena) {
      room_accepting_canceled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_accepting_canceled, submessage_arena);
    }
    set_has_room_accepting_canceled();
    _impl_.update_.room_accepting_canceled_ = room_accepting_canceled;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.room_accepting_canceled)
}
void UpdateMessage::clear_room_accepting_canceled() {
  if (_internal_has_room_accepting_canceled()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.room_accepting_canceled_;
    }
    clear_has_update();
  }
}
void UpdateMessage::set_allocated_room_found(::game::battlemon::updates::RoomInfo* room_found) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (room_found) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_found);
    if (message_arena != submessage_arena) {
      room_found = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_found, submessage_arena);
    }
    set_has_room_found();
    _impl_.update_.room_found_ = room_found;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.room_found)
}
void UpdateMessage::set_allocated_room_teammates(::game::battlemon::updates::RoomInfo* room_teammates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (room_teammates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_teammates);
    if (message_arena != submessage_arena) {
      room_teammates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_teammates, submessage_arena);
    }
    set_has_room_teammates();
    _impl_.update_.room_teammates_ = room_teammates;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.room_teammates)
}
void UpdateMessage::set_allocated_room_ready(::game::battlemon::updates::RoomInfo* room_ready) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (room_ready) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(room_ready);
    if (message_arena != submessage_arena) {
      room_ready = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, room_ready, submessage_arena);
    }
    set_has_room_ready();
    _impl_.update_.room_ready_ = room_ready;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.room_ready)
}
void UpdateMessage::set_allocated_user_is_already_in_line(::game::battlemon::common::Empty* user_is_already_in_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (user_is_already_in_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_is_already_in_line));
    if (message_arena != submessage_arena) {
      user_is_already_in_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_is_already_in_line, submessage_arena);
    }
    set_has_user_is_already_in_line();
    _impl_.update_.user_is_already_in_line_ = user_is_already_in_line;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.user_is_already_in_line)
}
void UpdateMessage::clear_user_is_already_in_line() {
  if (_internal_has_user_is_already_in_line()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.user_is_already_in_line_;
    }
    clear_has_update();
  }
}
void UpdateMessage::set_allocated_user_is_already_in_battle(::game::battlemon::updates::RoomInfo* user_is_already_in_battle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (user_is_already_in_battle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user_is_already_in_battle);
    if (message_arena != submessage_arena) {
      user_is_already_in_battle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_is_already_in_battle, submessage_arena);
    }
    set_has_user_is_already_in_battle();
    _impl_.update_.user_is_already_in_battle_ = user_is_already_in_battle;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.user_is_already_in_battle)
}
void UpdateMessage::set_allocated_user_out_of_line(::game::battlemon::common::Empty* user_out_of_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_update();
  if (user_out_of_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_out_of_line));
    if (message_arena != submessage_arena) {
      user_out_of_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_out_of_line, submessage_arena);
    }
    set_has_user_out_of_line();
    _impl_.update_.user_out_of_line_ = user_out_of_line;
  }
  // @@protoc_insertion_point(field_set_allocated:game.battlemon.updates.UpdateMessage.user_out_of_line)
}
void UpdateMessage::clear_user_out_of_line() {
  if (_internal_has_user_out_of_line()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.update_.user_out_of_line_;
    }
    clear_has_update();
  }
}
UpdateMessage::UpdateMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.UpdateMessage)
}
UpdateMessage::UpdateMessage(const UpdateMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.update_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_update();
  switch (from.update_case()) {
    case kRoomNeedAccept: {
      _this->_internal_mutable_room_need_accept()->::game::battlemon::updates::RoomNeedAccept::MergeFrom(
          from._internal_room_need_accept());
      break;
    }
    case kRoomAcceptingCanceled: {
      _this->_internal_mutable_room_accepting_canceled()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_room_accepting_canceled());
      break;
    }
    case kRoomFound: {
      _this->_internal_mutable_room_found()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_found());
      break;
    }
    case kRoomTeammates: {
      _this->_internal_mutable_room_teammates()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_teammates());
      break;
    }
    case kRoomReady: {
      _this->_internal_mutable_room_ready()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_ready());
      break;
    }
    case kUserIsAlreadyInLine: {
      _this->_internal_mutable_user_is_already_in_line()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_user_is_already_in_line());
      break;
    }
    case kUserIsAlreadyInBattle: {
      _this->_internal_mutable_user_is_already_in_battle()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_user_is_already_in_battle());
      break;
    }
    case kUserOutOfLine: {
      _this->_internal_mutable_user_out_of_line()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_user_out_of_line());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.UpdateMessage)
}

inline void UpdateMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.update_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_update();
}

UpdateMessage::~UpdateMessage() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.UpdateMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_update()) {
    clear_update();
  }
}

void UpdateMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateMessage::clear_update() {
// @@protoc_insertion_point(one_of_clear_start:game.battlemon.updates.UpdateMessage)
  switch (update_case()) {
    case kRoomNeedAccept: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.room_need_accept_;
      }
      break;
    }
    case kRoomAcceptingCanceled: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.room_accepting_canceled_;
      }
      break;
    }
    case kRoomFound: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.room_found_;
      }
      break;
    }
    case kRoomTeammates: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.room_teammates_;
      }
      break;
    }
    case kRoomReady: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.room_ready_;
      }
      break;
    }
    case kUserIsAlreadyInLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.user_is_already_in_line_;
      }
      break;
    }
    case kUserIsAlreadyInBattle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.user_is_already_in_battle_;
      }
      break;
    }
    case kUserOutOfLine: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.update_.user_out_of_line_;
      }
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = UPDATE_NOT_SET;
}


void UpdateMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.UpdateMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_update();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .game.battlemon.updates.RoomNeedAccept room_need_accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_need_accept(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.common.Empty room_accepting_canceled = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_accepting_canceled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.updates.RoomInfo room_found = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_found(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.updates.RoomInfo room_teammates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_teammates(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.updates.RoomInfo room_ready = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_room_ready(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.common.Empty user_is_already_in_line = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_is_already_in_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.updates.RoomInfo user_is_already_in_battle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_is_already_in_battle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.common.Empty user_out_of_line = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_out_of_line(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.UpdateMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .game.battlemon.updates.RoomNeedAccept room_need_accept = 1;
  if (_internal_has_room_need_accept()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::room_need_accept(this),
        _Internal::room_need_accept(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.common.Empty room_accepting_canceled = 2;
  if (_internal_has_room_accepting_canceled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::room_accepting_canceled(this),
        _Internal::room_accepting_canceled(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.updates.RoomInfo room_found = 3;
  if (_internal_has_room_found()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::room_found(this),
        _Internal::room_found(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.updates.RoomInfo room_teammates = 4;
  if (_internal_has_room_teammates()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::room_teammates(this),
        _Internal::room_teammates(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.updates.RoomInfo room_ready = 5;
  if (_internal_has_room_ready()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::room_ready(this),
        _Internal::room_ready(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.common.Empty user_is_already_in_line = 6;
  if (_internal_has_user_is_already_in_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::user_is_already_in_line(this),
        _Internal::user_is_already_in_line(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.updates.RoomInfo user_is_already_in_battle = 7;
  if (_internal_has_user_is_already_in_battle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::user_is_already_in_battle(this),
        _Internal::user_is_already_in_battle(this).GetCachedSize(), target, stream);
  }

  // .game.battlemon.common.Empty user_out_of_line = 8;
  if (_internal_has_user_out_of_line()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::user_out_of_line(this),
        _Internal::user_out_of_line(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.UpdateMessage)
  return target;
}

size_t UpdateMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.UpdateMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (update_case()) {
    // .game.battlemon.updates.RoomNeedAccept room_need_accept = 1;
    case kRoomNeedAccept: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.room_need_accept_);
      break;
    }
    // .game.battlemon.common.Empty room_accepting_canceled = 2;
    case kRoomAcceptingCanceled: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.room_accepting_canceled_);
      break;
    }
    // .game.battlemon.updates.RoomInfo room_found = 3;
    case kRoomFound: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.room_found_);
      break;
    }
    // .game.battlemon.updates.RoomInfo room_teammates = 4;
    case kRoomTeammates: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.room_teammates_);
      break;
    }
    // .game.battlemon.updates.RoomInfo room_ready = 5;
    case kRoomReady: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.room_ready_);
      break;
    }
    // .game.battlemon.common.Empty user_is_already_in_line = 6;
    case kUserIsAlreadyInLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.user_is_already_in_line_);
      break;
    }
    // .game.battlemon.updates.RoomInfo user_is_already_in_battle = 7;
    case kUserIsAlreadyInBattle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.user_is_already_in_battle_);
      break;
    }
    // .game.battlemon.common.Empty user_out_of_line = 8;
    case kUserOutOfLine: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_.user_out_of_line_);
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateMessage::GetClassData() const { return &_class_data_; }


void UpdateMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateMessage*>(&to_msg);
  auto& from = static_cast<const UpdateMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.UpdateMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.update_case()) {
    case kRoomNeedAccept: {
      _this->_internal_mutable_room_need_accept()->::game::battlemon::updates::RoomNeedAccept::MergeFrom(
          from._internal_room_need_accept());
      break;
    }
    case kRoomAcceptingCanceled: {
      _this->_internal_mutable_room_accepting_canceled()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_room_accepting_canceled());
      break;
    }
    case kRoomFound: {
      _this->_internal_mutable_room_found()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_found());
      break;
    }
    case kRoomTeammates: {
      _this->_internal_mutable_room_teammates()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_teammates());
      break;
    }
    case kRoomReady: {
      _this->_internal_mutable_room_ready()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_room_ready());
      break;
    }
    case kUserIsAlreadyInLine: {
      _this->_internal_mutable_user_is_already_in_line()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_user_is_already_in_line());
      break;
    }
    case kUserIsAlreadyInBattle: {
      _this->_internal_mutable_user_is_already_in_battle()->::game::battlemon::updates::RoomInfo::MergeFrom(
          from._internal_user_is_already_in_battle());
      break;
    }
    case kUserOutOfLine: {
      _this->_internal_mutable_user_out_of_line()->::game::battlemon::common::Empty::MergeFrom(
          from._internal_user_out_of_line());
      break;
    }
    case UPDATE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateMessage::CopyFrom(const UpdateMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.UpdateMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessage::IsInitialized() const {
  return true;
}

void UpdateMessage::InternalSwap(UpdateMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.update_, other->_impl_.update_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_updates_2eproto_getter, &descriptor_table_updates_2eproto_once,
      file_level_metadata_updates_2eproto[1]);
}

// ===================================================================

class RoomNeedAccept::_Internal {
 public:
};

RoomNeedAccept::RoomNeedAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.RoomNeedAccept)
}
RoomNeedAccept::RoomNeedAccept(const RoomNeedAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomNeedAccept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.manual_accept_){}
    , decltype(_impl_.time_to_accept_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.manual_accept_, &from._impl_.manual_accept_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.time_to_accept_) -
    reinterpret_cast<char*>(&_impl_.manual_accept_)) + sizeof(_impl_.time_to_accept_));
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.RoomNeedAccept)
}

inline void RoomNeedAccept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.manual_accept_){false}
    , decltype(_impl_.time_to_accept_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RoomNeedAccept::~RoomNeedAccept() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.RoomNeedAccept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomNeedAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RoomNeedAccept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomNeedAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.RoomNeedAccept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.manual_accept_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.time_to_accept_) -
      reinterpret_cast<char*>(&_impl_.manual_accept_)) + sizeof(_impl_.time_to_accept_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomNeedAccept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool manual_accept = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.manual_accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 time_to_accept = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_to_accept_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomNeedAccept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.RoomNeedAccept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool manual_accept = 1;
  if (this->_internal_manual_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_manual_accept(), target);
  }

  // int32 time_to_accept = 2;
  if (this->_internal_time_to_accept() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_time_to_accept(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.RoomNeedAccept)
  return target;
}

size_t RoomNeedAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.RoomNeedAccept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool manual_accept = 1;
  if (this->_internal_manual_accept() != 0) {
    total_size += 1 + 1;
  }

  // int32 time_to_accept = 2;
  if (this->_internal_time_to_accept() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_time_to_accept());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomNeedAccept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomNeedAccept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomNeedAccept::GetClassData() const { return &_class_data_; }


void RoomNeedAccept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomNeedAccept*>(&to_msg);
  auto& from = static_cast<const RoomNeedAccept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.RoomNeedAccept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_manual_accept() != 0) {
    _this->_internal_set_manual_accept(from._internal_manual_accept());
  }
  if (from._internal_time_to_accept() != 0) {
    _this->_internal_set_time_to_accept(from._internal_time_to_accept());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomNeedAccept::CopyFrom(const RoomNeedAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.RoomNeedAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomNeedAccept::IsInitialized() const {
  return true;
}

void RoomNeedAccept::InternalSwap(RoomNeedAccept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoomNeedAccept, _impl_.time_to_accept_)
      + sizeof(RoomNeedAccept::_impl_.time_to_accept_)
      - PROTOBUF_FIELD_OFFSET(RoomNeedAccept, _impl_.manual_accept_)>(
          reinterpret_cast<char*>(&_impl_.manual_accept_),
          reinterpret_cast<char*>(&other->_impl_.manual_accept_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomNeedAccept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_updates_2eproto_getter, &descriptor_table_updates_2eproto_once,
      file_level_metadata_updates_2eproto[2]);
}

// ===================================================================

class RoomInfo::_Internal {
 public:
};

RoomInfo::RoomInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.RoomInfo)
}
RoomInfo::RoomInfo(const RoomInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.server_ip_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_room_id().empty()) {
    _this->_impl_.room_id_.Set(from._internal_room_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_ip().empty()) {
    _this->_impl_.server_ip_.Set(from._internal_server_ip(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.RoomInfo)
}

inline void RoomInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , decltype(_impl_.room_id_){}
    , decltype(_impl_.server_ip_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.room_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.room_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomInfo::~RoomInfo() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.RoomInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
  _impl_.room_id_.Destroy();
  _impl_.server_ip_.Destroy();
}

void RoomInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.RoomInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _impl_.room_id_.ClearToEmpty();
  _impl_.server_ip_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string room_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_room_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.RoomInfo.room_id"));
        } else
          goto handle_unusual;
        continue;
      // string server_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.RoomInfo.server_ip"));
        } else
          goto handle_unusual;
        continue;
      // repeated .game.battlemon.updates.RoomPlayer players = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.RoomInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_room_id().data(), static_cast<int>(this->_internal_room_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.RoomInfo.room_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_room_id(), target);
  }

  // string server_ip = 2;
  if (!this->_internal_server_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_ip().data(), static_cast<int>(this->_internal_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.RoomInfo.server_ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_server_ip(), target);
  }

  // repeated .game.battlemon.updates.RoomPlayer players = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.RoomInfo)
  return target;
}

size_t RoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.RoomInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .game.battlemon.updates.RoomPlayer players = 3;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string room_id = 1;
  if (!this->_internal_room_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_room_id());
  }

  // string server_ip = 2;
  if (!this->_internal_server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomInfo::GetClassData() const { return &_class_data_; }


void RoomInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomInfo*>(&to_msg);
  auto& from = static_cast<const RoomInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.RoomInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  if (!from._internal_room_id().empty()) {
    _this->_internal_set_room_id(from._internal_room_id());
  }
  if (!from._internal_server_ip().empty()) {
    _this->_internal_set_server_ip(from._internal_server_ip());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomInfo::CopyFrom(const RoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.RoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomInfo::IsInitialized() const {
  return true;
}

void RoomInfo::InternalSwap(RoomInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.room_id_, lhs_arena,
      &other->_impl_.room_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_ip_, lhs_arena,
      &other->_impl_.server_ip_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_updates_2eproto_getter, &descriptor_table_updates_2eproto_once,
      file_level_metadata_updates_2eproto[3]);
}

// ===================================================================

class RoomPlayer::_Internal {
 public:
  static const ::game::battlemon::items::Item& lemon(const RoomPlayer* msg);
};

const ::game::battlemon::items::Item&
RoomPlayer::_Internal::lemon(const RoomPlayer* msg) {
  return *msg->_impl_.lemon_;
}
void RoomPlayer::clear_lemon() {
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
}
RoomPlayer::RoomPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:game.battlemon.updates.RoomPlayer)
}
RoomPlayer::RoomPlayer(const RoomPlayer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RoomPlayer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_near_id().empty()) {
    _this->_impl_.near_id_.Set(from._internal_near_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_lemon()) {
    _this->_impl_.lemon_ = new ::game::battlemon::items::Item(*from._impl_.lemon_);
  }
  // @@protoc_insertion_point(copy_constructor:game.battlemon.updates.RoomPlayer)
}

inline void RoomPlayer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.near_id_){}
    , decltype(_impl_.lemon_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.near_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.near_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RoomPlayer::~RoomPlayer() {
  // @@protoc_insertion_point(destructor:game.battlemon.updates.RoomPlayer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RoomPlayer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.near_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.lemon_;
}

void RoomPlayer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RoomPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:game.battlemon.updates.RoomPlayer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.near_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.lemon_ != nullptr) {
    delete _impl_.lemon_;
  }
  _impl_.lemon_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoomPlayer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string near_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_near_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "game.battlemon.updates.RoomPlayer.near_id"));
        } else
          goto handle_unusual;
        continue;
      // .game.battlemon.items.Item lemon = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lemon(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RoomPlayer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:game.battlemon.updates.RoomPlayer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_near_id().data(), static_cast<int>(this->_internal_near_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "game.battlemon.updates.RoomPlayer.near_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_near_id(), target);
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::lemon(this),
        _Internal::lemon(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:game.battlemon.updates.RoomPlayer)
  return target;
}

size_t RoomPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:game.battlemon.updates.RoomPlayer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string near_id = 1;
  if (!this->_internal_near_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_near_id());
  }

  // .game.battlemon.items.Item lemon = 2;
  if (this->_internal_has_lemon()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.lemon_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RoomPlayer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RoomPlayer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RoomPlayer::GetClassData() const { return &_class_data_; }


void RoomPlayer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RoomPlayer*>(&to_msg);
  auto& from = static_cast<const RoomPlayer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:game.battlemon.updates.RoomPlayer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_near_id().empty()) {
    _this->_internal_set_near_id(from._internal_near_id());
  }
  if (from._internal_has_lemon()) {
    _this->_internal_mutable_lemon()->::game::battlemon::items::Item::MergeFrom(
        from._internal_lemon());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RoomPlayer::CopyFrom(const RoomPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:game.battlemon.updates.RoomPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomPlayer::IsInitialized() const {
  return true;
}

void RoomPlayer::InternalSwap(RoomPlayer* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.near_id_, lhs_arena,
      &other->_impl_.near_id_, rhs_arena
  );
  swap(_impl_.lemon_, other->_impl_.lemon_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RoomPlayer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_updates_2eproto_getter, &descriptor_table_updates_2eproto_once,
      file_level_metadata_updates_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace updates
}  // namespace battlemon
}  // namespace game
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::Update*
Arena::CreateMaybeMessage< ::game::battlemon::updates::Update >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::Update >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::UpdateMessage*
Arena::CreateMaybeMessage< ::game::battlemon::updates::UpdateMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::UpdateMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::RoomNeedAccept*
Arena::CreateMaybeMessage< ::game::battlemon::updates::RoomNeedAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::RoomNeedAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::RoomInfo*
Arena::CreateMaybeMessage< ::game::battlemon::updates::RoomInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::RoomInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::game::battlemon::updates::RoomPlayer*
Arena::CreateMaybeMessage< ::game::battlemon::updates::RoomPlayer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::game::battlemon::updates::RoomPlayer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
